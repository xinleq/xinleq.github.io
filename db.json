{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/legend/source/js/legend.js","path":"js/legend.js","modified":1,"renderable":1},{"_id":"themes/legend/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/legend/source/css/config.styl","path":"css/config.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/footer.styl","path":"css/footer.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/archive.styl","path":"css/archive.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/header.styl","path":"css/header.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/page.styl","path":"css/page.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/legend.styl","path":"css/legend.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/home.styl","path":"css/home.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/post.styl","path":"css/post.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/social.styl","path":"css/social.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/css/reward.styl","path":"css/reward.styl","modified":1,"renderable":1},{"_id":"themes/legend/source/images/facebook.png","path":"images/facebook.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/background.png","path":"images/background.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/me_n.png","path":"images/me_n.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/linkedin.png","path":"images/linkedin.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/github.png","path":"images/github.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/playback_pause.png","path":"images/playback_pause.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/playback_play.png","path":"images/playback_play.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/zhihu.png","path":"images/zhihu.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/rss.png","path":"images/rss.png","modified":1,"renderable":1},{"_id":"themes/legend/source/images/twitter.png","path":"images/twitter.png","modified":1,"renderable":1},{"_id":"themes/legend/source/plugins/github-markdown.css","path":"plugins/github-markdown.css","modified":1,"renderable":1},{"_id":"themes/legend/source/images/weibo.png","path":"images/weibo.png","modified":1,"renderable":1},{"_id":"themes/legend/source/plugins/code-theme/tomorrow-night.css","path":"plugins/code-theme/tomorrow-night.css","modified":1,"renderable":1},{"_id":"themes/legend/source/plugins/code-theme/tomorrow.css","path":"plugins/code-theme/tomorrow.css","modified":1,"renderable":1}],"Cache":[{"_id":"themes/legend/LICENSE","hash":"95e0ed4d2a4daeda6f8520b21f23aa9badc5f42a","modified":1557383719481},{"_id":"themes/legend/README.md","hash":"97009a98d944239190056af3b45e521b30d0d463","modified":1557383719483},{"_id":"source/_posts/Jmeter分布式执行机命令行启动报错处理.md","hash":"c1f32d5908b3a1d273b8c80644fcc97388d97c9b","modified":1559299838337},{"_id":"source/_posts/edge驱动问题.md","hash":"77710ce86eb96e14a713a9ce6b60f33ff7462224","modified":1557819519885},{"_id":"source/_posts/fiddler设置服务代理后连不上网.md","hash":"5fa8320070be29b2adc0eac2b25b6931a88aaaf1","modified":1574948859927},{"_id":"source/_posts/firefox多版本安装-回溯.md","hash":"dd126cf0bdcac67f5ccdab8ab3b1b632eb8b159c","modified":1557500898666},{"_id":"source/_posts/hello-world.md","hash":"029f91fccbe8f87c0f3ea10c4042300d2fa7edc0","modified":1557381681355},{"_id":"source/_posts/importance-of-backup.md","hash":"65eda48f87d3d949263eb89b542aed55da9bb839","modified":1557661925198},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应.md","hash":"efde50ec594c3006e61c437420191a08e6967279","modified":1567648991670},{"_id":"source/_posts/loadrunner碰壁.md","hash":"4eba7c71918c15272c6f2b02d6978d8d30413048","modified":1558085979293},{"_id":"source/_posts/pytest零用例运行.md","hash":"769bc0e525353ffc9651dcbb91fc0cde715e11e6","modified":1584254226218},{"_id":"source/_posts/selenium配置安装概要-回溯.md","hash":"29be098e9190766dbce52fdf7e89923db75f4843","modified":1557498377037},{"_id":"source/_posts/uiautomator2报错解决.md","hash":"d005ae01e2e60939049b3d7720dceab38d37011c","modified":1584274176482},{"_id":"source/_posts/uiautomatorvierwer闪退.md","hash":"0d805c51c138ca996f403581484f1af1f31210b5","modified":1574906426501},{"_id":"source/_posts/unittest知识小结-回溯.md","hash":"62464d38721925ce0e58c1b61ec2e7cf8531c414","modified":1557497465626},{"_id":"source/_posts/unittest跳过某个测试方法及命令行执行-追回.md","hash":"b65d25eb94b870ff48c2bae5360a936519f96095","modified":1557496631120},{"_id":"source/_posts/全职高手-坚持.md","hash":"4af5bc897760d0e57446294f06eb10601ce52077","modified":1566615988824},{"_id":"source/_posts/关于selenium-IDE-回溯.md","hash":"c21bc29464886120842e732da36f2fd3ae707bc6","modified":1557499796149},{"_id":"source/_posts/性能测试指标.md","hash":"d7fdc075c2877f17845be60febad3e876e310718","modified":1559264347456},{"_id":"source/_posts/断言的常用方法-追回.md","hash":"dd17acbc88964a763a5570e07c1644d4d36599ef","modified":1557497063277},{"_id":"source/_posts/最重要的-回溯.md","hash":"63b256ee8302b039ee7914e7a376b220c3eeca39","modified":1557500344731},{"_id":"source/_posts/测试理论-回溯.md","hash":"ed068ba0802fe4d54c57542d781ff8404125dd15","modified":1557500977706},{"_id":"source/_posts/测试理论2-回溯.md","hash":"66d1c9780d696122dd7ede88a24d1022a09fd18e","modified":1557500497901},{"_id":"source/_posts/测试理论3-回溯.md","hash":"798a2412686b6b44ec20bdd90d3e3e3705768b0b","modified":1557500063114},{"_id":"source/_posts/着急下班的熊宝-追回.md","hash":"15925a900a1c6a96072989a192bafca7df8553f7","modified":1566611486698},{"_id":"source/_posts/简单的自动求职脚本(追回).md","hash":"d5ce74f7ec2fc38e7a12adbbcd21f8ce74aff290","modified":1572403317855},{"_id":"source/_posts/追剧代码-追回.md","hash":"909ee040e4c84c67a4743f682555e35194ace22e","modified":1557496896042},{"_id":"themes/legend/_config.yml","hash":"67a92847738038270c84eb90236d19fe8ddbdd5f","modified":1557502219052},{"_id":"themes/legend/layout/archive.swig","hash":"af62aae6dbae2785a868ebff398ff19e970d1437","modified":1557383719487},{"_id":"source/about/index.md","hash":"a650f43f31f040457afeb0e5799d5c533baced68","modified":1575018884307},{"_id":"themes/legend/screenshots/qr.png","hash":"ad895fa242594962c3459523cea4999ca45e9e34","modified":1557383719518},{"_id":"themes/legend/layout/index.swig","hash":"27fabecf2fe00904f711349db5812820232211c9","modified":1557383719512},{"_id":"themes/legend/layout/home.swig","hash":"fbbc8506b10c005a6f3f9f6611039f49c02c13bd","modified":1557383719491},{"_id":"themes/legend/layout/page.swig","hash":"76970cb04e653612022d1c7c11b7a1274b6088dd","modified":1557383719514},{"_id":"themes/legend/layout/post.swig","hash":"3c5e16c4394c924d94c67b2eed18a74ad5a3fd04","modified":1557383719516},{"_id":"themes/legend/screenshots/bg.png","hash":"5844fa20a3999c2f0d1ff0325248d8832fe09f1f","modified":1557383719518},{"_id":"themes/legend/source/js/legend.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1557383719548},{"_id":"themes/legend/source/favicon.ico","hash":"d3ef1ab83fea7695188d95a8075cd8c76c8d9b1f","modified":1557383719540},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/add.jpg","hash":"bb5dfba6afcac1f3d3d4e452f47893040afc538c","modified":1566569652590},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/add2.jpg","hash":"62aade7e7f5d5efa615a7ae223b4a8685a784ef4","modified":1566569768501},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/error.jpg","hash":"9834140b9d7feb864040a428b35d221fbfcbf11d","modified":1566570336600},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/old.jpg","hash":"4b56d556438ea6f393ed1df9628b060dc8160900","modified":1566568875500},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/option.jpg","hash":"a0d56411f3a4a8c2b3a1d4efdfb9f322016234c2","modified":1566569309280},{"_id":"source/_posts/关于selenium-IDE-回溯/存储器类型命令.png","hash":"8d324165f823251fa7d7aa23cd1d434b352d2a25","modified":1557473207273},{"_id":"source/_posts/关于selenium-IDE-回溯/存储器类型命令结果.png","hash":"7b0809e097fb19512cfa83ff5bb0e6e827fccee3","modified":1557473207274},{"_id":"themes/legend/layout/includes/audio-play.swig","hash":"b640e26d67d2a0bbc2c9f4784e0b1b39e0558022","modified":1557383719495},{"_id":"source/_posts/追剧代码-追回/goodluck.jpg","hash":"1a6530e8623443d53fb5070e4fff710f66c232e8","modified":1557473207292},{"_id":"themes/legend/layout/includes/footer.swig","hash":"50d7c724fdcbdede52d16ed8fc8ddcc80f0ef088","modified":1557383719497},{"_id":"themes/legend/layout/includes/header-menu.swig","hash":"f98352b09f56aac917a2b388c54b3bf6c6451bcc","modified":1557383719500},{"_id":"themes/legend/layout/includes/layout.swig","hash":"7f34ef2d21ae4ff6de1dc8b41f91d90414cd78ba","modified":1557383719503},{"_id":"themes/legend/layout/includes/livere.swig","hash":"329f3ad60f8cece55860bc651ad82747b90f2ae7","modified":1557383719506},{"_id":"themes/legend/layout/includes/social.swig","hash":"a463128fda78649625f3110f95de2a743cd04f10","modified":1557383719511},{"_id":"themes/legend/layout/includes/reward.swig","hash":"6fa3cea9bbbdb2aa3ddaa647e7736c39b96490de","modified":1557383719508},{"_id":"themes/legend/source/css/config.styl","hash":"05d2709a76da7224e44f857303af02068c9b5e46","modified":1557383719523},{"_id":"themes/legend/source/css/footer.styl","hash":"fec56ed7402cf181f404d0909fc11c042a841f58","modified":1557383719525},{"_id":"themes/legend/source/css/archive.styl","hash":"524c02b727f3851b2401d47d9883275a5fac3f2f","modified":1557383719522},{"_id":"themes/legend/source/css/header.styl","hash":"449c246f3a3a4cb80d3bf1fd3b0e0b5a5ee2701b","modified":1557383719527},{"_id":"themes/legend/source/css/page.styl","hash":"7251b4c58d56d825fe08ad40307c8c974c33d92d","modified":1557383719533},{"_id":"themes/legend/source/css/legend.styl","hash":"89f8c627da0a4bdd71e799e1b700821e8282d4de","modified":1557383719531},{"_id":"themes/legend/source/css/home.styl","hash":"ea9327b8815da4514fe0b91ca19f1c0d02e76bec","modified":1557502056029},{"_id":"themes/legend/source/css/post.styl","hash":"8e38c427270bbb24df323d4c2a09c9cbae0711e7","modified":1557383719535},{"_id":"themes/legend/source/css/social.styl","hash":"8a9044648442ae96bb2db6eb8c280cd78514c840","modified":1557383719538},{"_id":"themes/legend/source/css/reward.styl","hash":"6cc54f26685e54489ab40077b44b454f4ae7c670","modified":1557383719536},{"_id":"themes/legend/source/images/facebook.png","hash":"15e82524d9c263c31123fe9a64c2c58d73915f9c","modified":1557383719542},{"_id":"themes/legend/source/images/background.png","hash":"2943b2a3e246d17c49872132adaafab8b2bf0097","modified":1557383719541},{"_id":"themes/legend/source/images/me_n.png","hash":"6d5157f82330e7dc5d6c530cb80b6fdf68e5ccfe","modified":1557383719544},{"_id":"themes/legend/source/images/linkedin.png","hash":"fc38e493c846ea1559272d3aed0a42b9ca9c5dbb","modified":1557383719543},{"_id":"themes/legend/source/images/github.png","hash":"affdf8eeef82068108b2d14dcdcebad41af37b08","modified":1557383719543},{"_id":"themes/legend/source/images/playback_pause.png","hash":"7853ebfb7126c9db50b010b56b97a87ac55432e0","modified":1557383719545},{"_id":"themes/legend/source/images/playback_play.png","hash":"0c10c1898a454cca9b5d3c8a241fab8a8dd23ad7","modified":1557383719545},{"_id":"themes/legend/source/images/zhihu.png","hash":"6d40410ac14c533fb9966311d5ac612da62ba26b","modified":1557383719548},{"_id":"themes/legend/source/images/rss.png","hash":"801fa6fa93050f409070b620fbe2f0f600c4fe40","modified":1557383719546},{"_id":"themes/legend/source/images/twitter.png","hash":"2dc0cf6898e0b81448d7034531b6892b6f9b4da3","modified":1557383719547},{"_id":"source/_posts/Jmeter分布式执行机命令行启动报错处理/error.png","hash":"835445135b255029e2d5a1c19b1efe53d31699a8","modified":1559296235474},{"_id":"themes/legend/source/plugins/github-markdown.css","hash":"fe440a82744ad4cdb99e455d04f9269793525d15","modified":1557383719558},{"_id":"themes/legend/source/images/weibo.png","hash":"99e367aba574c70837366c22436326787d148b81","modified":1557383719548},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/chart.jpg","hash":"5e36de9fd3ce95ec4f10bf7319e820822dfe1daf","modified":1567647897078},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/ex.jpg","hash":"6be7a1ab19cf1aa8717d0046804426223b219654","modified":1567648363973},{"_id":"source/_posts/unittest知识小结-回溯/image.jpg","hash":"1acdfa96bb9628b730f71fec1694160ad6edd108","modified":1557473207290},{"_id":"source/_posts/断言的常用方法-追回/assert_常用.png","hash":"abe5e9e898cca7fd61f12a2bafe634b581b26f21","modified":1557473207296},{"_id":"source/_posts/断言的常用方法-追回/assert_常用3.png","hash":"b406757015bd7f6c704261d59ed8df63d2fe82a5","modified":1557473207300},{"_id":"source/_posts/断言的常用方法-追回/assert_废弃名.png","hash":"d0b456c32b58d406c99b90b00b4b25fc19380f23","modified":1557473207301},{"_id":"source/_posts/断言的常用方法-追回/assert_常用2.png","hash":"585228176b446b02f8a124efbf4330101ca72e9a","modified":1557473207298},{"_id":"themes/legend/source/plugins/code-theme/tomorrow-night.css","hash":"9c9b542e717db159edb141e31953f058c17185f6","modified":1557383719551},{"_id":"themes/legend/source/plugins/code-theme/tomorrow.css","hash":"ddd485994b9d0b94c979f9923be02dd5f2e9c00b","modified":1557383719552},{"_id":"source/_posts/测试理论2-回溯/IMG_20180315_230714.png","hash":"ed2446abf3ae08cbdc422bb5e123677fe7ff2dee","modified":1557473207261},{"_id":"source/_posts/测试理论-回溯/Screenshot_20180315-181148.png","hash":"4466a60e37c2a4c56c46277b38b097ba6ad0331b","modified":1557473207253},{"_id":"source/_posts/最重要的-回溯/Screenshot_20180315-182005.png","hash":"56019b9a4a62cb629c1bee464a258ad2d85c741f","modified":1557473207268},{"_id":"source/_posts/firefox多版本安装-回溯/smile2.png","hash":"bb355b698f7065c23864a1cdd8366154c06c304a","modified":1557473207288},{"_id":"source/_posts/loadrunner碰壁/panda6.mp4","hash":"a3b7b0f569b3ddfe15acf8ec2a7c4b82f4be5ef4","modified":1558083743637},{"_id":"source/_posts/loadrunner碰壁/panda5.mp4","hash":"214aa8cde6b9611fdeba192ff07f04ac8e645663","modified":1558083704372},{"_id":"source/_posts/简单的自动求职脚本(追回)/640.gif","hash":"16f7cfdef1a2354729512d40a041ad32db6e48b4","modified":1557473207537},{"_id":"source/_posts/性能测试指标/fly.mp4","hash":"35ecbc3ca3ef685be16c92c03fc2f81407e70ff2","modified":1559127929788},{"_id":"source/_posts/edge驱动问题/panda.mp4","hash":"758cce4a7118f97c0fe9d27493b988632a258b85","modified":1557633729336},{"_id":"source/_posts/importance-of-backup/录像2.mp4","hash":"2455eae124793d3a6aaadd53a14e81cd4ec87c34","modified":1557481785622},{"_id":"source/_posts/Jmeter分布式执行机命令行启动报错处理/lovebaby.mp4","hash":"366691bbe73ad00c892a2ede2feb29f497191503","modified":1559297776427},{"_id":"source/_posts/全职高手-坚持/insist.mp4","hash":"0a79a51b76bb3b9c235ea4f0d73c15c04df00720","modified":1566610249238},{"_id":"source/_posts/性能测试指标/baby.mp4","hash":"370e48b64c2edbfe4c711c292ded7eff80fd62f8","modified":1559128277917},{"_id":"source/_posts/着急下班的熊宝-追回/Video_2019-04-28.mp4","hash":"de4addc49146b6cbc66421f952043976bfbd5ef3","modified":1557473207408},{"_id":"public/about/index.html","hash":"69666dc6d4ec90cd8e5c754739abc138ccde2818","modified":1584274196579},{"_id":"public/2020/03/15/pytest零用例运行/index.html","hash":"3afce32f5b45286190d081879d2e0e5561179e35","modified":1584274196579},{"_id":"public/2019/11/28/fiddler设置服务代理后连不上网/index.html","hash":"4e05e38d5c59436b6460987ef1677ad8d2b4d495","modified":1584274196580},{"_id":"public/2019/11/28/uiautomatorvierwer闪退/index.html","hash":"a4bc4e300a55f617d3d0402409e6de320fb99004","modified":1584274196582},{"_id":"public/2019/08/24/全职高手-坚持/index.html","hash":"a65e26d8631fd43bfa09765ffdb25664a0cd4ea0","modified":1584274196582},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/index.html","hash":"3f5e8fd71bd209931aaa8c1f5ea2f27845be3f28","modified":1584274196582},{"_id":"public/2019/05/31/Jmeter分布式执行机命令行启动报错处理/index.html","hash":"8498dd07646d39f4809cbf06b95c46407253eb7a","modified":1584274196582},{"_id":"public/2019/05/29/性能测试指标/index.html","hash":"627f3bdfc3c7e5fafe7a3456acc6d455cde3a2b7","modified":1584274196582},{"_id":"public/2019/05/10/测试理论-回溯/index.html","hash":"2f7a964a1b797c40ac91439d1236dcfec5d58b07","modified":1584274196583},{"_id":"public/2019/05/10/测试理论2-回溯/index.html","hash":"a7c1d3c2741ef14e21701aeb6d7ae73fc55afa9d","modified":1584274196583},{"_id":"public/2020/03/15/uiautomator2报错解决/index.html","hash":"2bef55fd53bdd8a32234186781550fedadc2a914","modified":1584274196593},{"_id":"public/2019/05/10/最重要的-回溯/index.html","hash":"d6a214f3c584b0bdfe114650823b10d58b34e197","modified":1584274196593},{"_id":"public/2019/05/10/测试理论3-回溯/index.html","hash":"d60779b915d266db4d3205566144c4acec043bf3","modified":1584274196595},{"_id":"public/2019/05/10/关于selenium-IDE-回溯/index.html","hash":"69881f61d0d1c80b03d1f1e82b56ced5dfd9fc6a","modified":1584274196596},{"_id":"public/2019/05/10/selenium配置安装概要-回溯/index.html","hash":"b89b984ffba086f9d7a520d97c1c117301f3c280","modified":1584274196596},{"_id":"public/2019/05/10/firefox多版本安装-回溯/index.html","hash":"4173ad4d09857042a79742e382f894956a6cabea","modified":1584274196596},{"_id":"public/2019/05/10/unittest知识小结-回溯/index.html","hash":"6b4adde23ca78d73071ed717dd842bd40b91e8c2","modified":1584274196596},{"_id":"public/2019/05/10/追剧代码-追回/index.html","hash":"24262c5a1450f8330cd5c2ca80ee327cf547b586","modified":1584274196596},{"_id":"public/2019/05/10/unittest跳过某个测试方法及命令行执行-追回/index.html","hash":"e20353cd8bdfeb87abc9328435710f74469a1bb4","modified":1584274196596},{"_id":"public/2019/05/10/断言的常用方法-追回/index.html","hash":"b338a64fc37fecc7c69802d7893283500935a607","modified":1584274196596},{"_id":"public/2019/05/10/着急下班的熊宝-追回/index.html","hash":"cb8ef16224a81075b5160aba1827e394e0055ada","modified":1584274196597},{"_id":"public/2019/05/10/简单的自动求职脚本(追回)/index.html","hash":"01013fc7f36a1a2337871480916ff0f1696e88fc","modified":1584274196597},{"_id":"public/2019/05/10/importance-of-backup/index.html","hash":"2388c76a31514f2e6ae50b801cd2e6d7898c90ee","modified":1584274196597},{"_id":"public/2019/05/09/hello-world/index.html","hash":"900a8ff3890d9a93a07d79fa22dd76304650176c","modified":1584274196597},{"_id":"public/archives/index.html","hash":"90977f1e59197ccb06a7bfcc25d38b49f5b6a3cd","modified":1584274196597},{"_id":"public/archives/page/2/index.html","hash":"c85f42ce02ac07773b1ff670c2f80140a5e64803","modified":1584274196597},{"_id":"public/archives/2019/index.html","hash":"419ee7d71fa3b60b4ec939afac668cbe23ab2971","modified":1584274196597},{"_id":"public/archives/2019/page/2/index.html","hash":"01196724eae37fdc76bbc2ae7b427a5e316fd1bb","modified":1584274196597},{"_id":"public/archives/2019/05/index.html","hash":"c6fff28e7a45eeba0efbeb92365f1fb1cafd05fd","modified":1584274196597},{"_id":"public/archives/2019/05/page/2/index.html","hash":"0a560661e8108282638d7fec182ef3bc73e4fa39","modified":1584274196597},{"_id":"public/archives/2019/08/index.html","hash":"89f6590d33dbdc96bf5d40a35ca666084037e4dc","modified":1584274196597},{"_id":"public/archives/2019/11/index.html","hash":"82b09363a22a5e9d094e6ac87e2048a0fb92a578","modified":1584274196597},{"_id":"public/archives/2020/index.html","hash":"ec4298cc6fc96d5663e21fc44abb8e1807f3c3e7","modified":1584274196597},{"_id":"public/archives/2020/03/index.html","hash":"ec4298cc6fc96d5663e21fc44abb8e1807f3c3e7","modified":1584274196598},{"_id":"public/index.html","hash":"8054dd12b6617bb4ba64847456fb03654204e846","modified":1584274196598},{"_id":"public/page/2/index.html","hash":"8054dd12b6617bb4ba64847456fb03654204e846","modified":1584274196598},{"_id":"public/page/3/index.html","hash":"8054dd12b6617bb4ba64847456fb03654204e846","modified":1584274196598},{"_id":"public/2019/05/17/loadrunner碰壁/index.html","hash":"25e07e65bbf232cc765ef84c5293c8523d1dae9a","modified":1584274196598},{"_id":"public/2019/05/12/edge驱动问题/index.html","hash":"d5271e25a46f3eeddc74520b4e6137a4409668f3","modified":1584274196598},{"_id":"public/favicon.ico","hash":"d3ef1ab83fea7695188d95a8075cd8c76c8d9b1f","modified":1584274196607},{"_id":"public/images/background.png","hash":"2943b2a3e246d17c49872132adaafab8b2bf0097","modified":1584274196607},{"_id":"public/images/github.png","hash":"affdf8eeef82068108b2d14dcdcebad41af37b08","modified":1584274196607},{"_id":"public/images/facebook.png","hash":"15e82524d9c263c31123fe9a64c2c58d73915f9c","modified":1584274196607},{"_id":"public/images/me_n.png","hash":"6d5157f82330e7dc5d6c530cb80b6fdf68e5ccfe","modified":1584274196607},{"_id":"public/images/playback_pause.png","hash":"7853ebfb7126c9db50b010b56b97a87ac55432e0","modified":1584274196607},{"_id":"public/images/linkedin.png","hash":"fc38e493c846ea1559272d3aed0a42b9ca9c5dbb","modified":1584274196607},{"_id":"public/images/playback_play.png","hash":"0c10c1898a454cca9b5d3c8a241fab8a8dd23ad7","modified":1584274196607},{"_id":"public/images/zhihu.png","hash":"6d40410ac14c533fb9966311d5ac612da62ba26b","modified":1584274196607},{"_id":"public/images/rss.png","hash":"801fa6fa93050f409070b620fbe2f0f600c4fe40","modified":1584274196608},{"_id":"public/images/weibo.png","hash":"99e367aba574c70837366c22436326787d148b81","modified":1584274196608},{"_id":"public/images/twitter.png","hash":"2dc0cf6898e0b81448d7034531b6892b6f9b4da3","modified":1584274196608},{"_id":"public/2019/05/10/关于selenium-IDE-回溯/存储器类型命令.png","hash":"8d324165f823251fa7d7aa23cd1d434b352d2a25","modified":1584274196608},{"_id":"public/2019/05/10/关于selenium-IDE-回溯/存储器类型命令结果.png","hash":"7b0809e097fb19512cfa83ff5bb0e6e827fccee3","modified":1584274196608},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/error.jpg","hash":"9834140b9d7feb864040a428b35d221fbfcbf11d","modified":1584274196608},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/add.jpg","hash":"bb5dfba6afcac1f3d3d4e452f47893040afc538c","modified":1584274196608},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/add2.jpg","hash":"62aade7e7f5d5efa615a7ae223b4a8685a784ef4","modified":1584274196608},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/option.jpg","hash":"a0d56411f3a4a8c2b3a1d4efdfb9f322016234c2","modified":1584274196609},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/old.jpg","hash":"4b56d556438ea6f393ed1df9628b060dc8160900","modified":1584274196609},{"_id":"public/2019/05/10/追剧代码-追回/goodluck.jpg","hash":"1a6530e8623443d53fb5070e4fff710f66c232e8","modified":1584274196609},{"_id":"public/2019/05/10/unittest知识小结-回溯/image.jpg","hash":"1acdfa96bb9628b730f71fec1694160ad6edd108","modified":1584274197254},{"_id":"public/2019/05/31/Jmeter分布式执行机命令行启动报错处理/error.png","hash":"835445135b255029e2d5a1c19b1efe53d31699a8","modified":1584274197255},{"_id":"public/2019/05/10/断言的常用方法-追回/assert_常用2.png","hash":"585228176b446b02f8a124efbf4330101ca72e9a","modified":1584274197255},{"_id":"public/2019/05/10/断言的常用方法-追回/assert_常用.png","hash":"abe5e9e898cca7fd61f12a2bafe634b581b26f21","modified":1584274197255},{"_id":"public/2019/05/10/断言的常用方法-追回/assert_常用3.png","hash":"b406757015bd7f6c704261d59ed8df63d2fe82a5","modified":1584274197255},{"_id":"public/2019/05/10/断言的常用方法-追回/assert_废弃名.png","hash":"d0b456c32b58d406c99b90b00b4b25fc19380f23","modified":1584274197255},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/ex.jpg","hash":"6be7a1ab19cf1aa8717d0046804426223b219654","modified":1584274197256},{"_id":"public/2019/08/23/jmeter第三方图像监视器插件无响应/chart.jpg","hash":"5e36de9fd3ce95ec4f10bf7319e820822dfe1daf","modified":1584274197256},{"_id":"public/css/archive.css","hash":"b2375d27240f865267332d044c70a09bf938859a","modified":1584274197261},{"_id":"public/css/header.css","hash":"99983c37e42fa38419f2031d5733b67a8bcd55e2","modified":1584274197261},{"_id":"public/css/footer.css","hash":"4876c20f92a8c7f42476c8705cebd67835e60768","modified":1584274197261},{"_id":"public/js/legend.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584274197261},{"_id":"public/css/page.css","hash":"ff969e375c86cdcb3538752fc5abd24a6274249d","modified":1584274197261},{"_id":"public/css/legend.css","hash":"0bae0893339ad23a986da046affadbde79093e03","modified":1584274197261},{"_id":"public/css/home.css","hash":"70c1272255ab3579e202c94e763c567bdf2ee654","modified":1584274197262},{"_id":"public/css/social.css","hash":"e295455dbcd5915d64967c369f9b0c3290bc493b","modified":1584274197262},{"_id":"public/css/post.css","hash":"d93d6014063efee1299d8f167efb016fe6478bee","modified":1584274197262},{"_id":"public/css/reward.css","hash":"ebcafc7ed41c5b21ef5b07892c697d7ca0054957","modified":1584274197262},{"_id":"public/css/config.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1584274197262},{"_id":"public/plugins/github-markdown.css","hash":"c2db17e60f9d345156c00875be97d337df6998ac","modified":1584274197262},{"_id":"public/plugins/code-theme/tomorrow.css","hash":"2555e6fe53cd4d76716af54ff7094289a4529c8e","modified":1584274197262},{"_id":"public/plugins/code-theme/tomorrow-night.css","hash":"40d3a13e572b5e2743762aaff97738c3248acbf6","modified":1584274197262},{"_id":"public/2019/05/10/firefox多版本安装-回溯/smile2.png","hash":"bb355b698f7065c23864a1cdd8366154c06c304a","modified":1584274197458},{"_id":"public/2019/05/10/测试理论-回溯/Screenshot_20180315-181148.png","hash":"4466a60e37c2a4c56c46277b38b097ba6ad0331b","modified":1584274197460},{"_id":"public/2019/05/10/测试理论2-回溯/IMG_20180315_230714.png","hash":"ed2446abf3ae08cbdc422bb5e123677fe7ff2dee","modified":1584274197464},{"_id":"public/2019/05/10/最重要的-回溯/Screenshot_20180315-182005.png","hash":"56019b9a4a62cb629c1bee464a258ad2d85c741f","modified":1584274197467},{"_id":"public/2019/05/17/loadrunner碰壁/panda6.mp4","hash":"a3b7b0f569b3ddfe15acf8ec2a7c4b82f4be5ef4","modified":1584274197488},{"_id":"public/2019/05/10/简单的自动求职脚本(追回)/640.gif","hash":"16f7cfdef1a2354729512d40a041ad32db6e48b4","modified":1584274197490},{"_id":"public/2019/05/17/loadrunner碰壁/panda5.mp4","hash":"214aa8cde6b9611fdeba192ff07f04ac8e645663","modified":1584274197493},{"_id":"public/2019/05/29/性能测试指标/fly.mp4","hash":"35ecbc3ca3ef685be16c92c03fc2f81407e70ff2","modified":1584274197493},{"_id":"public/2019/05/12/edge驱动问题/panda.mp4","hash":"758cce4a7118f97c0fe9d27493b988632a258b85","modified":1584274197517},{"_id":"public/2019/05/10/importance-of-backup/录像2.mp4","hash":"2455eae124793d3a6aaadd53a14e81cd4ec87c34","modified":1584274197532},{"_id":"public/2019/05/31/Jmeter分布式执行机命令行启动报错处理/lovebaby.mp4","hash":"366691bbe73ad00c892a2ede2feb29f497191503","modified":1584274197555},{"_id":"public/2019/08/24/全职高手-坚持/insist.mp4","hash":"0a79a51b76bb3b9c235ea4f0d73c15c04df00720","modified":1584274197594},{"_id":"public/2019/05/29/性能测试指标/baby.mp4","hash":"370e48b64c2edbfe4c711c292ded7eff80fd62f8","modified":1584274197600},{"_id":"public/2019/05/10/着急下班的熊宝-追回/Video_2019-04-28.mp4","hash":"de4addc49146b6cbc66421f952043976bfbd5ef3","modified":1584274197631}],"Category":[],"Data":[],"Page":[{"title":"about me","date":"2019-05-10T07:39:32.000Z","_content":"\n写点什么呢？\n\n我工作很认真，也很有耐心\n\n也不算很笨，除非去工地搬砖或者跑销售\n\n不然工作还真是做的还行的\n\n吃土很久了\n\n希望找到目标工作\n\n测试是我的目标\n\n最近看全职高手\n\n伍晨的话很有同感，自己的职业生涯还不如伍晨\n\n进不得，但不想退，只有坚持了\n\n可是有些事可以拼尽全力\n\n有些事大多数人都做了，给自己争取了很好的机会，节约了时间，加快了成长可是还是我还是懒得去做\n\n一遍遍问自己，是不是真蠢得无可救药，是不是不负责任\n\n平心静气，利用难得的空闲修炼自身，做更好的自己\n\n等待奇迹\n\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2019-05-10 15:39:32\n---\n\n写点什么呢？\n\n我工作很认真，也很有耐心\n\n也不算很笨，除非去工地搬砖或者跑销售\n\n不然工作还真是做的还行的\n\n吃土很久了\n\n希望找到目标工作\n\n测试是我的目标\n\n最近看全职高手\n\n伍晨的话很有同感，自己的职业生涯还不如伍晨\n\n进不得，但不想退，只有坚持了\n\n可是有些事可以拼尽全力\n\n有些事大多数人都做了，给自己争取了很好的机会，节约了时间，加快了成长可是还是我还是懒得去做\n\n一遍遍问自己，是不是真蠢得无可救药，是不是不负责任\n\n平心静气，利用难得的空闲修炼自身，做更好的自己\n\n等待奇迹\n\n","updated":"2019-11-29T09:14:44.307Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck7szy6n1000j5cwpk19yubqu","content":"<p>写点什么呢？</p>\n<p>我工作很认真，也很有耐心</p>\n<p>也不算很笨，除非去工地搬砖或者跑销售</p>\n<p>不然工作还真是做的还行的</p>\n<p>吃土很久了</p>\n<p>希望找到目标工作</p>\n<p>测试是我的目标</p>\n<p>最近看全职高手</p>\n<p>伍晨的话很有同感，自己的职业生涯还不如伍晨</p>\n<p>进不得，但不想退，只有坚持了</p>\n<p>可是有些事可以拼尽全力</p>\n<p>有些事大多数人都做了，给自己争取了很好的机会，节约了时间，加快了成长可是还是我还是懒得去做</p>\n<p>一遍遍问自己，是不是真蠢得无可救药，是不是不负责任</p>\n<p>平心静气，利用难得的空闲修炼自身，做更好的自己</p>\n<p>等待奇迹</p>\n","site":{"data":{}},"excerpt":"","more":"<p>写点什么呢？</p>\n<p>我工作很认真，也很有耐心</p>\n<p>也不算很笨，除非去工地搬砖或者跑销售</p>\n<p>不然工作还真是做的还行的</p>\n<p>吃土很久了</p>\n<p>希望找到目标工作</p>\n<p>测试是我的目标</p>\n<p>最近看全职高手</p>\n<p>伍晨的话很有同感，自己的职业生涯还不如伍晨</p>\n<p>进不得，但不想退，只有坚持了</p>\n<p>可是有些事可以拼尽全力</p>\n<p>有些事大多数人都做了，给自己争取了很好的机会，节约了时间，加快了成长可是还是我还是懒得去做</p>\n<p>一遍遍问自己，是不是真蠢得无可救药，是不是不负责任</p>\n<p>平心静气，利用难得的空闲修炼自身，做更好的自己</p>\n<p>等待奇迹</p>\n"}],"Post":[{"title":"Jmeter分布式执行机命令行启动报错处理","date":"2019-05-31T09:24:53.000Z","_content":"\n好长的标题，哈哈......\n\n回顾Jmeter，这两天有点东一榔头，西一棒子的赶脚.....\n\n之前学习Jmeter,到分布式这块，是现成的执行机，控制机，于是当我的资料丢失后，虽重新找回一部分，然后遇到这块，一脸懵逼，咩，执行机哪去了？\n\n不过是回顾，不像初学时囫囵吞枣，还是有点明白一些了。执行机，控制机都是执行jmeter脚本，所以都是Jmeter安装目录，然而配置不同。安装目录配置环境变量就不说了\n\n本人关于Jmeter的学习还很浮于表面，所以配置只涉及基本功能实现。控制机界面启动，执行机命令行启动。\n\n控制机配置\n\n打开安装目录bin下的**jmeter.properties**\n\n查找**remote_hosts=**\n\n把值修改为执行机的**IP：端口**\n\n执行机配置\n\n1. 执行机命令行启动，所以需要配置环境变量，将下面三个文件配置到Path中\n\n* Jmeter安装目录\\lib\\ext\\ApacheJMeter_core.jar\n\n* Jmeter安装目录\\lib\\jorphan.jar\n\n* Jmeter安装目录\\lib\\logkit-2.0.jar\n\n2. 修改端口\n   在Jmeter.properties中查找server_port，去掉前面注释符，值改为执行机端口号\n   \n3. 打开执行机（jmeter-server.bat），出现如下报警\n\n   {% asset_img error.png %}\n\n   在Jmeter.properties中查找server.rmi.ssl.disable,改为\n\n   server.rmi.ssl.disable=true,保存，重新运行\n\n   参考于：http://www.bubuko.com/infodetail-2616706.html\n\n   <video src=\"lovebaby.mp4\" controls=\"controls\" autoplay=\"autoplay\" ></video>\n\n\n","source":"_posts/Jmeter分布式执行机命令行启动报错处理.md","raw":"---\ntitle: Jmeter分布式执行机命令行启动报错处理\ndate: 2019-05-31 17:24:53\ntags:\n---\n\n好长的标题，哈哈......\n\n回顾Jmeter，这两天有点东一榔头，西一棒子的赶脚.....\n\n之前学习Jmeter,到分布式这块，是现成的执行机，控制机，于是当我的资料丢失后，虽重新找回一部分，然后遇到这块，一脸懵逼，咩，执行机哪去了？\n\n不过是回顾，不像初学时囫囵吞枣，还是有点明白一些了。执行机，控制机都是执行jmeter脚本，所以都是Jmeter安装目录，然而配置不同。安装目录配置环境变量就不说了\n\n本人关于Jmeter的学习还很浮于表面，所以配置只涉及基本功能实现。控制机界面启动，执行机命令行启动。\n\n控制机配置\n\n打开安装目录bin下的**jmeter.properties**\n\n查找**remote_hosts=**\n\n把值修改为执行机的**IP：端口**\n\n执行机配置\n\n1. 执行机命令行启动，所以需要配置环境变量，将下面三个文件配置到Path中\n\n* Jmeter安装目录\\lib\\ext\\ApacheJMeter_core.jar\n\n* Jmeter安装目录\\lib\\jorphan.jar\n\n* Jmeter安装目录\\lib\\logkit-2.0.jar\n\n2. 修改端口\n   在Jmeter.properties中查找server_port，去掉前面注释符，值改为执行机端口号\n   \n3. 打开执行机（jmeter-server.bat），出现如下报警\n\n   {% asset_img error.png %}\n\n   在Jmeter.properties中查找server.rmi.ssl.disable,改为\n\n   server.rmi.ssl.disable=true,保存，重新运行\n\n   参考于：http://www.bubuko.com/infodetail-2616706.html\n\n   <video src=\"lovebaby.mp4\" controls=\"controls\" autoplay=\"autoplay\" ></video>\n\n\n","slug":"Jmeter分布式执行机命令行启动报错处理","published":1,"updated":"2019-05-31T10:50:38.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6lb00005cwp0blqim82","content":"<p>好长的标题，哈哈……</p>\n<p>回顾Jmeter，这两天有点东一榔头，西一棒子的赶脚…..</p>\n<p>之前学习Jmeter,到分布式这块，是现成的执行机，控制机，于是当我的资料丢失后，虽重新找回一部分，然后遇到这块，一脸懵逼，咩，执行机哪去了？</p>\n<p>不过是回顾，不像初学时囫囵吞枣，还是有点明白一些了。执行机，控制机都是执行jmeter脚本，所以都是Jmeter安装目录，然而配置不同。安装目录配置环境变量就不说了</p>\n<p>本人关于Jmeter的学习还很浮于表面，所以配置只涉及基本功能实现。控制机界面启动，执行机命令行启动。</p>\n<p>控制机配置</p>\n<p>打开安装目录bin下的<strong>jmeter.properties</strong></p>\n<p>查找<strong>remote_hosts=</strong></p>\n<p>把值修改为执行机的<strong>IP：端口</strong></p>\n<p>执行机配置</p>\n<ol>\n<li>执行机命令行启动，所以需要配置环境变量，将下面三个文件配置到Path中</li>\n</ol>\n<ul>\n<li><p>Jmeter安装目录\\lib\\ext\\ApacheJMeter_core.jar</p>\n</li>\n<li><p>Jmeter安装目录\\lib\\jorphan.jar</p>\n</li>\n<li><p>Jmeter安装目录\\lib\\logkit-2.0.jar</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>修改端口<br>在Jmeter.properties中查找server_port，去掉前面注释符，值改为执行机端口号</p>\n</li>\n<li><p>打开执行机（jmeter-server.bat），出现如下报警</p>\n<img src=\"/2019/05/31/Jmeter分布式执行机命令行启动报错处理/error.png\">\n<p>在Jmeter.properties中查找server.rmi.ssl.disable,改为</p>\n<p>server.rmi.ssl.disable=true,保存，重新运行</p>\n<p>参考于：<a href=\"http://www.bubuko.com/infodetail-2616706.html\" target=\"_blank\" rel=\"noopener\">http://www.bubuko.com/infodetail-2616706.html</a></p>\n<video src=\"lovebaby.mp4\" controls=\"controls\" autoplay=\"autoplay\"></video>\n\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>好长的标题，哈哈……</p>\n<p>回顾Jmeter，这两天有点东一榔头，西一棒子的赶脚…..</p>\n<p>之前学习Jmeter,到分布式这块，是现成的执行机，控制机，于是当我的资料丢失后，虽重新找回一部分，然后遇到这块，一脸懵逼，咩，执行机哪去了？</p>\n<p>不过是回顾，不像初学时囫囵吞枣，还是有点明白一些了。执行机，控制机都是执行jmeter脚本，所以都是Jmeter安装目录，然而配置不同。安装目录配置环境变量就不说了</p>\n<p>本人关于Jmeter的学习还很浮于表面，所以配置只涉及基本功能实现。控制机界面启动，执行机命令行启动。</p>\n<p>控制机配置</p>\n<p>打开安装目录bin下的<strong>jmeter.properties</strong></p>\n<p>查找<strong>remote_hosts=</strong></p>\n<p>把值修改为执行机的<strong>IP：端口</strong></p>\n<p>执行机配置</p>\n<ol>\n<li>执行机命令行启动，所以需要配置环境变量，将下面三个文件配置到Path中</li>\n</ol>\n<ul>\n<li><p>Jmeter安装目录\\lib\\ext\\ApacheJMeter_core.jar</p>\n</li>\n<li><p>Jmeter安装目录\\lib\\jorphan.jar</p>\n</li>\n<li><p>Jmeter安装目录\\lib\\logkit-2.0.jar</p>\n</li>\n</ul>\n<ol start=\"2\">\n<li><p>修改端口<br>在Jmeter.properties中查找server_port，去掉前面注释符，值改为执行机端口号</p>\n</li>\n<li><p>打开执行机（jmeter-server.bat），出现如下报警</p>\n<img src=\"/2019/05/31/Jmeter分布式执行机命令行启动报错处理/error.png\">\n<p>在Jmeter.properties中查找server.rmi.ssl.disable,改为</p>\n<p>server.rmi.ssl.disable=true,保存，重新运行</p>\n<p>参考于：<a href=\"http://www.bubuko.com/infodetail-2616706.html\" target=\"_blank\" rel=\"noopener\">http://www.bubuko.com/infodetail-2616706.html</a></p>\n<video src=\"lovebaby.mp4\" controls=\"controls\" autoplay=\"autoplay\"></video>\n\n\n</li>\n</ol>\n"},{"title":"edge驱动问题","date":"2019-05-12T03:24:22.000Z","_content":"\n这是硬盘坏的第几天来着？资料恢复行动已经告一段落，能回收的资料已经回收，电脑上之前的软件在陆续安装。\n\n因为硬盘的关系，系统也恢复了一下，结果升级后，在用selenium3写脚本时出现了新的问题，关于驱动\n\n之前发现的问题，虽然系统是64位的，但使用IE11的64位驱动，selenium3的键盘输入简直慢到令人发指。换32位驱动正常。至于驱动选择，与selenium版本号一致即可。\n\nIE获取当前网址，获取到的是*localhost:端口号*\n\n为什么？？？？？？？\n\nedge浏览器之前是17版本的，17134，官网可以下到对应驱动\n\nhttps://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/， selenium3会出现ResourceWarning，但是脚本可以正常执行。然而此次系统恢复到原来的老版本，又更新直接更到最新版本，edge版本也更到18版本Microsoft EdgeHTML 18.17763，\n\n于是按照官网给的命令输入然后悲剧，浏览器打开网页变的很慢。于是放弃这个驱动，难道是我打开的方式不对？？？？\n\n（又试了一次，当时正用百度网盘上传文件，虽然速度只有200k,但打开网页的速度明显变慢，看来是百度网盘上传文件导致的，18版本的MicrosoftWebdriver*表示这锅我不背，是百度网盘和网速的问题，跟我没关系*）下载18版本驱动：打开命令行窗口，输入 *DISM.exe /Online /Add-Capability /CapabilityName:Microsoft.WebDriver~~~~0.0.1.0*\n\nchrome打开某些网站也会很慢，目前的水平来说，使用Firefox似乎是最好选择。\n\n以上.....\n\n待解决......\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n  <source src=\"panda.mp4\" type=\"video/mp4\" />\n</video>","source":"_posts/edge驱动问题.md","raw":"---\ntitle: edge驱动问题\ndate: 2019-05-12 11:24:22\ntags:\n---\n\n这是硬盘坏的第几天来着？资料恢复行动已经告一段落，能回收的资料已经回收，电脑上之前的软件在陆续安装。\n\n因为硬盘的关系，系统也恢复了一下，结果升级后，在用selenium3写脚本时出现了新的问题，关于驱动\n\n之前发现的问题，虽然系统是64位的，但使用IE11的64位驱动，selenium3的键盘输入简直慢到令人发指。换32位驱动正常。至于驱动选择，与selenium版本号一致即可。\n\nIE获取当前网址，获取到的是*localhost:端口号*\n\n为什么？？？？？？？\n\nedge浏览器之前是17版本的，17134，官网可以下到对应驱动\n\nhttps://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/， selenium3会出现ResourceWarning，但是脚本可以正常执行。然而此次系统恢复到原来的老版本，又更新直接更到最新版本，edge版本也更到18版本Microsoft EdgeHTML 18.17763，\n\n于是按照官网给的命令输入然后悲剧，浏览器打开网页变的很慢。于是放弃这个驱动，难道是我打开的方式不对？？？？\n\n（又试了一次，当时正用百度网盘上传文件，虽然速度只有200k,但打开网页的速度明显变慢，看来是百度网盘上传文件导致的，18版本的MicrosoftWebdriver*表示这锅我不背，是百度网盘和网速的问题，跟我没关系*）下载18版本驱动：打开命令行窗口，输入 *DISM.exe /Online /Add-Capability /CapabilityName:Microsoft.WebDriver~~~~0.0.1.0*\n\nchrome打开某些网站也会很慢，目前的水平来说，使用Firefox似乎是最好选择。\n\n以上.....\n\n待解决......\n\n<video width=\"320\" height=\"240\" controls=\"controls\">\n  <source src=\"panda.mp4\" type=\"video/mp4\" />\n</video>","slug":"edge驱动问题","published":1,"updated":"2019-05-14T07:38:39.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6ln00015cwp8wswddz6","content":"<p>这是硬盘坏的第几天来着？资料恢复行动已经告一段落，能回收的资料已经回收，电脑上之前的软件在陆续安装。</p>\n<p>因为硬盘的关系，系统也恢复了一下，结果升级后，在用selenium3写脚本时出现了新的问题，关于驱动</p>\n<p>之前发现的问题，虽然系统是64位的，但使用IE11的64位驱动，selenium3的键盘输入简直慢到令人发指。换32位驱动正常。至于驱动选择，与selenium版本号一致即可。</p>\n<p>IE获取当前网址，获取到的是<em>localhost:端口号</em></p>\n<p>为什么？？？？？？？</p>\n<p>edge浏览器之前是17版本的，17134，官网可以下到对应驱动</p>\n<p><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/，\" target=\"_blank\" rel=\"noopener\">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/，</a> selenium3会出现ResourceWarning，但是脚本可以正常执行。然而此次系统恢复到原来的老版本，又更新直接更到最新版本，edge版本也更到18版本Microsoft EdgeHTML 18.17763，</p>\n<p>于是按照官网给的命令输入然后悲剧，浏览器打开网页变的很慢。于是放弃这个驱动，难道是我打开的方式不对？？？？</p>\n<p>（又试了一次，当时正用百度网盘上传文件，虽然速度只有200k,但打开网页的速度明显变慢，看来是百度网盘上传文件导致的，18版本的MicrosoftWebdriver<em>表示这锅我不背，是百度网盘和网速的问题，跟我没关系</em>）下载18版本驱动：打开命令行窗口，输入 <em>DISM.exe /Online /Add-Capability /CapabilityName:Microsoft.WebDriver~~~~0.0.1.0</em></p>\n<p>chrome打开某些网站也会很慢，目前的水平来说，使用Firefox似乎是最好选择。</p>\n<p>以上…..</p>\n<p>待解决……</p>\n<video width=\"320\" height=\"240\" controls=\"controls\"><br>  <source src=\"panda.mp4\" type=\"video/mp4\"><br></video>","site":{"data":{}},"excerpt":"","more":"<p>这是硬盘坏的第几天来着？资料恢复行动已经告一段落，能回收的资料已经回收，电脑上之前的软件在陆续安装。</p>\n<p>因为硬盘的关系，系统也恢复了一下，结果升级后，在用selenium3写脚本时出现了新的问题，关于驱动</p>\n<p>之前发现的问题，虽然系统是64位的，但使用IE11的64位驱动，selenium3的键盘输入简直慢到令人发指。换32位驱动正常。至于驱动选择，与selenium版本号一致即可。</p>\n<p>IE获取当前网址，获取到的是<em>localhost:端口号</em></p>\n<p>为什么？？？？？？？</p>\n<p>edge浏览器之前是17版本的，17134，官网可以下到对应驱动</p>\n<p><a href=\"https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/，\" target=\"_blank\" rel=\"noopener\">https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/，</a> selenium3会出现ResourceWarning，但是脚本可以正常执行。然而此次系统恢复到原来的老版本，又更新直接更到最新版本，edge版本也更到18版本Microsoft EdgeHTML 18.17763，</p>\n<p>于是按照官网给的命令输入然后悲剧，浏览器打开网页变的很慢。于是放弃这个驱动，难道是我打开的方式不对？？？？</p>\n<p>（又试了一次，当时正用百度网盘上传文件，虽然速度只有200k,但打开网页的速度明显变慢，看来是百度网盘上传文件导致的，18版本的MicrosoftWebdriver<em>表示这锅我不背，是百度网盘和网速的问题，跟我没关系</em>）下载18版本驱动：打开命令行窗口，输入 <em>DISM.exe /Online /Add-Capability /CapabilityName:Microsoft.WebDriver~~~~0.0.1.0</em></p>\n<p>chrome打开某些网站也会很慢，目前的水平来说，使用Firefox似乎是最好选择。</p>\n<p>以上…..</p>\n<p>待解决……</p>\n<video width=\"320\" height=\"240\" controls=\"controls\"><br>  <source src=\"panda.mp4\" type=\"video/mp4\"><br></video>"},{"title":"fiddler设置服务代理后连不上网","date":"2019-11-28T13:15:10.000Z","_content":"\n又整一篇，如题，少写俩字手机。就是这么东一榔头，西一棒子。没什么技术含量，仅记录一下遇到的问题，第一次用fiddler连接手机，一次通过。然而今天连接，突然就不通了，问题解决的也很莫名。\n\nfiddler连接手机的过程：\n\n1、fiddler设置：Tools->Options->Connections,勾选Allow remote computers to connect,点击ok，重启fiddler\n\n2、电脑命令黑窗口ipconfig查看WiFi的IP\n\n3、手机设置：手机与电脑处于同一个WiFi网络下，点击网络名，本手机是长按->点击修改网路->勾选高级选项,服务器主机名填写第2步的IP，端口写fiddler的默认端口8888，保存\n\n基本过程如上。\n\n然而今天无论fiddler都抓不到包，手机联网状况也不好，大部分时间连不上。只浏览器刷网页偶尔能刷开，不知是不是之前的缓存。WiFi总提醒无法联网。\n\n于是开始百度解决方法之旅。\n\n1、设置问题，自查没问题。所有步骤严格遵守上述连接过程。\n\n2、端口问题，有帖子提议改端口，懒，没改。\n\n3、.NET Framework版本低，根据https://blog.csdn.net/caseywei/article/details/84976587这篇帖子查了下，我的机子版本没问题\n\n4、关闭防火墙，试了没用。Windows defender允许通过的应用没有勾选fiddler，查了本机已经勾选。\n\nfiddler重装了N次，最后电脑ping了一下手机（也是从某篇帖子得到的提示)，首先得了句无法访问目标主机，然后，通了，虽然ping的时间最短的10ms,最长的的2244ms.\n\n再然后，奇迹出现了，手机突然就联网自如了。fiddler对于手机的包也抓的 很好。作为肚子里没多少水的我，只有瞪大眼的份（我的眼也不大），行吧，对于目前这个水平的我来说，能用就行，追根究底的事以后再说吧。\n\n解决个问题（虽然很莫名），文写了，心情也好了，不错！\n\n","source":"_posts/fiddler设置服务代理后连不上网.md","raw":"---\ntitle: fiddler设置服务代理后连不上网\ndate: 2019-11-28 21:15:10\ntags:\n---\n\n又整一篇，如题，少写俩字手机。就是这么东一榔头，西一棒子。没什么技术含量，仅记录一下遇到的问题，第一次用fiddler连接手机，一次通过。然而今天连接，突然就不通了，问题解决的也很莫名。\n\nfiddler连接手机的过程：\n\n1、fiddler设置：Tools->Options->Connections,勾选Allow remote computers to connect,点击ok，重启fiddler\n\n2、电脑命令黑窗口ipconfig查看WiFi的IP\n\n3、手机设置：手机与电脑处于同一个WiFi网络下，点击网络名，本手机是长按->点击修改网路->勾选高级选项,服务器主机名填写第2步的IP，端口写fiddler的默认端口8888，保存\n\n基本过程如上。\n\n然而今天无论fiddler都抓不到包，手机联网状况也不好，大部分时间连不上。只浏览器刷网页偶尔能刷开，不知是不是之前的缓存。WiFi总提醒无法联网。\n\n于是开始百度解决方法之旅。\n\n1、设置问题，自查没问题。所有步骤严格遵守上述连接过程。\n\n2、端口问题，有帖子提议改端口，懒，没改。\n\n3、.NET Framework版本低，根据https://blog.csdn.net/caseywei/article/details/84976587这篇帖子查了下，我的机子版本没问题\n\n4、关闭防火墙，试了没用。Windows defender允许通过的应用没有勾选fiddler，查了本机已经勾选。\n\nfiddler重装了N次，最后电脑ping了一下手机（也是从某篇帖子得到的提示)，首先得了句无法访问目标主机，然后，通了，虽然ping的时间最短的10ms,最长的的2244ms.\n\n再然后，奇迹出现了，手机突然就联网自如了。fiddler对于手机的包也抓的 很好。作为肚子里没多少水的我，只有瞪大眼的份（我的眼也不大），行吧，对于目前这个水平的我来说，能用就行，追根究底的事以后再说吧。\n\n解决个问题（虽然很莫名），文写了，心情也好了，不错！\n\n","slug":"fiddler设置服务代理后连不上网","published":1,"updated":"2019-11-28T13:47:39.927Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6ls00025cwpbzgk7083","content":"<p>又整一篇，如题，少写俩字手机。就是这么东一榔头，西一棒子。没什么技术含量，仅记录一下遇到的问题，第一次用fiddler连接手机，一次通过。然而今天连接，突然就不通了，问题解决的也很莫名。</p>\n<p>fiddler连接手机的过程：</p>\n<p>1、fiddler设置：Tools-&gt;Options-&gt;Connections,勾选Allow remote computers to connect,点击ok，重启fiddler</p>\n<p>2、电脑命令黑窗口ipconfig查看WiFi的IP</p>\n<p>3、手机设置：手机与电脑处于同一个WiFi网络下，点击网络名，本手机是长按-&gt;点击修改网路-&gt;勾选高级选项,服务器主机名填写第2步的IP，端口写fiddler的默认端口8888，保存</p>\n<p>基本过程如上。</p>\n<p>然而今天无论fiddler都抓不到包，手机联网状况也不好，大部分时间连不上。只浏览器刷网页偶尔能刷开，不知是不是之前的缓存。WiFi总提醒无法联网。</p>\n<p>于是开始百度解决方法之旅。</p>\n<p>1、设置问题，自查没问题。所有步骤严格遵守上述连接过程。</p>\n<p>2、端口问题，有帖子提议改端口，懒，没改。</p>\n<p>3、.NET Framework版本低，根据<a href=\"https://blog.csdn.net/caseywei/article/details/84976587这篇帖子查了下，我的机子版本没问题\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/caseywei/article/details/84976587这篇帖子查了下，我的机子版本没问题</a></p>\n<p>4、关闭防火墙，试了没用。Windows defender允许通过的应用没有勾选fiddler，查了本机已经勾选。</p>\n<p>fiddler重装了N次，最后电脑ping了一下手机（也是从某篇帖子得到的提示)，首先得了句无法访问目标主机，然后，通了，虽然ping的时间最短的10ms,最长的的2244ms.</p>\n<p>再然后，奇迹出现了，手机突然就联网自如了。fiddler对于手机的包也抓的 很好。作为肚子里没多少水的我，只有瞪大眼的份（我的眼也不大），行吧，对于目前这个水平的我来说，能用就行，追根究底的事以后再说吧。</p>\n<p>解决个问题（虽然很莫名），文写了，心情也好了，不错！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>又整一篇，如题，少写俩字手机。就是这么东一榔头，西一棒子。没什么技术含量，仅记录一下遇到的问题，第一次用fiddler连接手机，一次通过。然而今天连接，突然就不通了，问题解决的也很莫名。</p>\n<p>fiddler连接手机的过程：</p>\n<p>1、fiddler设置：Tools-&gt;Options-&gt;Connections,勾选Allow remote computers to connect,点击ok，重启fiddler</p>\n<p>2、电脑命令黑窗口ipconfig查看WiFi的IP</p>\n<p>3、手机设置：手机与电脑处于同一个WiFi网络下，点击网络名，本手机是长按-&gt;点击修改网路-&gt;勾选高级选项,服务器主机名填写第2步的IP，端口写fiddler的默认端口8888，保存</p>\n<p>基本过程如上。</p>\n<p>然而今天无论fiddler都抓不到包，手机联网状况也不好，大部分时间连不上。只浏览器刷网页偶尔能刷开，不知是不是之前的缓存。WiFi总提醒无法联网。</p>\n<p>于是开始百度解决方法之旅。</p>\n<p>1、设置问题，自查没问题。所有步骤严格遵守上述连接过程。</p>\n<p>2、端口问题，有帖子提议改端口，懒，没改。</p>\n<p>3、.NET Framework版本低，根据<a href=\"https://blog.csdn.net/caseywei/article/details/84976587这篇帖子查了下，我的机子版本没问题\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/caseywei/article/details/84976587这篇帖子查了下，我的机子版本没问题</a></p>\n<p>4、关闭防火墙，试了没用。Windows defender允许通过的应用没有勾选fiddler，查了本机已经勾选。</p>\n<p>fiddler重装了N次，最后电脑ping了一下手机（也是从某篇帖子得到的提示)，首先得了句无法访问目标主机，然后，通了，虽然ping的时间最短的10ms,最长的的2244ms.</p>\n<p>再然后，奇迹出现了，手机突然就联网自如了。fiddler对于手机的包也抓的 很好。作为肚子里没多少水的我，只有瞪大眼的份（我的眼也不大），行吧，对于目前这个水平的我来说，能用就行，追根究底的事以后再说吧。</p>\n<p>解决个问题（虽然很莫名），文写了，心情也好了，不错！</p>\n"},{"title":"firefox多版本安装(回溯)","date":"2019-05-10T14:12:52.000Z","_content":"\n<p>因为要用selenium3，所以Firefox升级到最新版，然后发现新版不支持firebug，httpwatch插件，于是百度如何安装两个版本。方法如下：</p>\n<p>鉴于本人有个毛病，爱把所有软件升级到最新版，所以，把新下载的firefox66作为主浏览器，设置为自动更新的。</p>\n<ol>\n<li><p>安装firefox66.0版本后，快捷方式重命名防止重复</p>\n</li>\n<li><p>打开浏览器，输入<em>about:profiles</em>,出现配置文件，点击<strong>创建新配置文件</strong>，按配置向导<strong>下一步</strong>，配置文件命名为firefox35（此名依据个人喜好随便）。</p>\n</li>\n<li><p>安装低版本Firefox，本人放在另一个盘符下，当然两个版本都没有走默认安装，全都改了安装路径，这也是根据个人习惯，只要两次安装不是同一路径就好。设置不更新。</p>\n</li>\n<li><p><strong>鼠标右键</strong>点击低版本<strong>快捷方式</strong>-<strong>属性</strong>，在弹出框<strong>目标</strong>里添加<em>–no-remote -P firefox35</em>,点击<strong>确定</strong>，完成。</p>\n<p>–no-remote据百度，是允许多个Firefox共存</p>\n<p>-P firefox35 据百度，指定使用的配置文件，firefox35就是之前在第一个浏览器里新建的配置文件名。</p>\n</li>\n<li><p>确认低版本浏览器配置文件是否是新建的那个，本人的低版本Firefox是35.0版本，无法使用<em>about:profiles</em>打开配置文件，故打开浏览器，点击<strong>帮助</strong>-<strong>故障排除信息</strong>，找<strong>配置文件夹</strong>后的<strong>显示文件夹</strong>，点击，跳出的文件夹名称正是之前新建那个配置文件里显示的，故成功</p>\n</li>\n</ol>\n{% asset_img smile2.png 依旧我美丽的大国宝 %}\n\n","source":"_posts/firefox多版本安装-回溯.md","raw":"---\ntitle: firefox多版本安装(回溯)\ndate: 2019-05-10 22:12:52\ntags:\n---\n\n<p>因为要用selenium3，所以Firefox升级到最新版，然后发现新版不支持firebug，httpwatch插件，于是百度如何安装两个版本。方法如下：</p>\n<p>鉴于本人有个毛病，爱把所有软件升级到最新版，所以，把新下载的firefox66作为主浏览器，设置为自动更新的。</p>\n<ol>\n<li><p>安装firefox66.0版本后，快捷方式重命名防止重复</p>\n</li>\n<li><p>打开浏览器，输入<em>about:profiles</em>,出现配置文件，点击<strong>创建新配置文件</strong>，按配置向导<strong>下一步</strong>，配置文件命名为firefox35（此名依据个人喜好随便）。</p>\n</li>\n<li><p>安装低版本Firefox，本人放在另一个盘符下，当然两个版本都没有走默认安装，全都改了安装路径，这也是根据个人习惯，只要两次安装不是同一路径就好。设置不更新。</p>\n</li>\n<li><p><strong>鼠标右键</strong>点击低版本<strong>快捷方式</strong>-<strong>属性</strong>，在弹出框<strong>目标</strong>里添加<em>–no-remote -P firefox35</em>,点击<strong>确定</strong>，完成。</p>\n<p>–no-remote据百度，是允许多个Firefox共存</p>\n<p>-P firefox35 据百度，指定使用的配置文件，firefox35就是之前在第一个浏览器里新建的配置文件名。</p>\n</li>\n<li><p>确认低版本浏览器配置文件是否是新建的那个，本人的低版本Firefox是35.0版本，无法使用<em>about:profiles</em>打开配置文件，故打开浏览器，点击<strong>帮助</strong>-<strong>故障排除信息</strong>，找<strong>配置文件夹</strong>后的<strong>显示文件夹</strong>，点击，跳出的文件夹名称正是之前新建那个配置文件里显示的，故成功</p>\n</li>\n</ol>\n{% asset_img smile2.png 依旧我美丽的大国宝 %}\n\n","slug":"firefox多版本安装-回溯","published":1,"updated":"2019-05-10T15:08:18.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6lv00035cwpxeovcidr","content":"<p></p><p>因为要用selenium3，所以Firefox升级到最新版，然后发现新版不支持firebug，httpwatch插件，于是百度如何安装两个版本。方法如下：</p><p></p>\n<p></p><p>鉴于本人有个毛病，爱把所有软件升级到最新版，所以，把新下载的firefox66作为主浏览器，设置为自动更新的。</p><p></p>\n<p><ol></ol></p>\n<p><li><p>安装firefox66.0版本后，快捷方式重命名防止重复</p><br></li></p>\n<p><li><p>打开浏览器，输入<em>about:profiles</em>,出现配置文件，点击<strong>创建新配置文件</strong>，按配置向导<strong>下一步</strong>，配置文件命名为firefox35（此名依据个人喜好随便）。</p><br></li></p>\n<p><li><p>安装低版本Firefox，本人放在另一个盘符下，当然两个版本都没有走默认安装，全都改了安装路径，这也是根据个人习惯，只要两次安装不是同一路径就好。设置不更新。</p><br></li></p>\n<p><li><p><strong>鼠标右键</strong>点击低版本<strong>快捷方式</strong>-<strong>属性</strong>，在弹出框<strong>目标</strong>里添加<em>–no-remote -P firefox35</em>,点击<strong>确定</strong>，完成。</p></li></p>\n<p></p><p>–no-remote据百度，是允许多个Firefox共存</p><p></p>\n<p></p><p>-P firefox35 据百度，指定使用的配置文件，firefox35就是之前在第一个浏览器里新建的配置文件名。</p><br><p></p>\n<p><li><p>确认低版本浏览器配置文件是否是新建的那个，本人的低版本Firefox是35.0版本，无法使用<em>about:profiles</em>打开配置文件，故打开浏览器，点击<strong>帮助</strong>-<strong>故障排除信息</strong>，找<strong>配置文件夹</strong>后的<strong>显示文件夹</strong>，点击，跳出的文件夹名称正是之前新建那个配置文件里显示的，故成功</p><br></li><br><br><img src=\"/2019/05/10/firefox多版本安装-回溯/smile2.png\" title=\"依旧我美丽的大国宝\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p>因为要用selenium3，所以Firefox升级到最新版，然后发现新版不支持firebug，httpwatch插件，于是百度如何安装两个版本。方法如下：</p><p></p>\n<p></p><p>鉴于本人有个毛病，爱把所有软件升级到最新版，所以，把新下载的firefox66作为主浏览器，设置为自动更新的。</p><p></p>\n<p><ol></ol></p>\n<p><li><p>安装firefox66.0版本后，快捷方式重命名防止重复</p><br></li></p>\n<p><li><p>打开浏览器，输入<em>about:profiles</em>,出现配置文件，点击<strong>创建新配置文件</strong>，按配置向导<strong>下一步</strong>，配置文件命名为firefox35（此名依据个人喜好随便）。</p><br></li></p>\n<p><li><p>安装低版本Firefox，本人放在另一个盘符下，当然两个版本都没有走默认安装，全都改了安装路径，这也是根据个人习惯，只要两次安装不是同一路径就好。设置不更新。</p><br></li></p>\n<p><li><p><strong>鼠标右键</strong>点击低版本<strong>快捷方式</strong>-<strong>属性</strong>，在弹出框<strong>目标</strong>里添加<em>–no-remote -P firefox35</em>,点击<strong>确定</strong>，完成。</p></li></p>\n<p></p><p>–no-remote据百度，是允许多个Firefox共存</p><p></p>\n<p></p><p>-P firefox35 据百度，指定使用的配置文件，firefox35就是之前在第一个浏览器里新建的配置文件名。</p><br><p></p>\n<p><li><p>确认低版本浏览器配置文件是否是新建的那个，本人的低版本Firefox是35.0版本，无法使用<em>about:profiles</em>打开配置文件，故打开浏览器，点击<strong>帮助</strong>-<strong>故障排除信息</strong>，找<strong>配置文件夹</strong>后的<strong>显示文件夹</strong>，点击，跳出的文件夹名称正是之前新建那个配置文件里显示的，故成功</p><br></li><br><br><img src=\"/2019/05/10/firefox多版本安装-回溯/smile2.png\" title=\"依旧我美丽的大国宝\"></p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-05-09T06:01:21.353Z","updated":"2019-05-09T06:01:21.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6lw00045cwplzqn3pxx","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"importance of backup","date":"2019-05-10T07:43:23.000Z","_content":"\n对于自己的笔记本似乎过于自信，在我得到它的第四个年头，硬盘突然坏掉了，当有预兆的时候，我晚了一点开始尝试挽救我的数据（很显然我的反应慢了点，行动失败）。数据很多，有我花去过去一整年工资才换来的学习资料，有过去一年我自己记录的学习笔记（有学习心得也有自己跳的坑，以及怎么跳出来的)，有我花n个夜晚录制的其他学习视频。还有我国可爱的国宝大熊猫的图像资料。\n\n想起了希腊神话故事的西西弗斯。\n\n这两天一直在慢慢复原自己电脑里的东西，包括这个博客。博客的原数据没有了，只能把GitHub上的资料存档，从中恢复一些自己看来有用的文章。然后这次建立了分支，专门备份源数据。\n\n这次资料丢失，突然发现自己的笔记丢的很可惜，过去花的时间精力不谈，以后遇到需要查找的问题，有自己的笔记在的时候还是方便的多。\n\n下面说一点可能是常识的东西，但是自己刚发现。\n\n百度云盘如果上传文件夹，数量有限制，上传一个文件最大的限制是20G，需要买超级会员。如果不买会员，上传最大文件4G，上传速度200k,下载速度100k以内。\n\n腾讯qq,使用文件传送最大可以传64G的文件，速度看情况，时快时慢。腾讯微云，非会员10G空间，上传速度目测二三百k，买会员应该会快，速度多少没研究。\n\n因为在GitHub上使用hexo建博客，这次硬盘坏掉导致数据丢失，想把GitHub上的数据pull下来，结果不行，速度超慢，5k以下的速度，然后就失败，百度n久，增大缓冲区什么的都不行，最终解决办法，把GitHub导入码云，然后pull也好，clone也好，分分钟的事。\n\n<video src=\"录像2.mp4\" width=\"320\" height=\"240\" controls=\"controls\">\nYour browser does not support the video tag.\n</video>\n\n","source":"_posts/importance-of-backup.md","raw":"---\ntitle: importance of backup\ndate: 2019-05-10 15:43:23\ntags:\n---\n\n对于自己的笔记本似乎过于自信，在我得到它的第四个年头，硬盘突然坏掉了，当有预兆的时候，我晚了一点开始尝试挽救我的数据（很显然我的反应慢了点，行动失败）。数据很多，有我花去过去一整年工资才换来的学习资料，有过去一年我自己记录的学习笔记（有学习心得也有自己跳的坑，以及怎么跳出来的)，有我花n个夜晚录制的其他学习视频。还有我国可爱的国宝大熊猫的图像资料。\n\n想起了希腊神话故事的西西弗斯。\n\n这两天一直在慢慢复原自己电脑里的东西，包括这个博客。博客的原数据没有了，只能把GitHub上的资料存档，从中恢复一些自己看来有用的文章。然后这次建立了分支，专门备份源数据。\n\n这次资料丢失，突然发现自己的笔记丢的很可惜，过去花的时间精力不谈，以后遇到需要查找的问题，有自己的笔记在的时候还是方便的多。\n\n下面说一点可能是常识的东西，但是自己刚发现。\n\n百度云盘如果上传文件夹，数量有限制，上传一个文件最大的限制是20G，需要买超级会员。如果不买会员，上传最大文件4G，上传速度200k,下载速度100k以内。\n\n腾讯qq,使用文件传送最大可以传64G的文件，速度看情况，时快时慢。腾讯微云，非会员10G空间，上传速度目测二三百k，买会员应该会快，速度多少没研究。\n\n因为在GitHub上使用hexo建博客，这次硬盘坏掉导致数据丢失，想把GitHub上的数据pull下来，结果不行，速度超慢，5k以下的速度，然后就失败，百度n久，增大缓冲区什么的都不行，最终解决办法，把GitHub导入码云，然后pull也好，clone也好，分分钟的事。\n\n<video src=\"录像2.mp4\" width=\"320\" height=\"240\" controls=\"controls\">\nYour browser does not support the video tag.\n</video>\n\n","slug":"importance-of-backup","published":1,"updated":"2019-05-12T11:52:05.198Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6ly00055cwp5unxheoo","content":"<p>对于自己的笔记本似乎过于自信，在我得到它的第四个年头，硬盘突然坏掉了，当有预兆的时候，我晚了一点开始尝试挽救我的数据（很显然我的反应慢了点，行动失败）。数据很多，有我花去过去一整年工资才换来的学习资料，有过去一年我自己记录的学习笔记（有学习心得也有自己跳的坑，以及怎么跳出来的)，有我花n个夜晚录制的其他学习视频。还有我国可爱的国宝大熊猫的图像资料。</p>\n<p>想起了希腊神话故事的西西弗斯。</p>\n<p>这两天一直在慢慢复原自己电脑里的东西，包括这个博客。博客的原数据没有了，只能把GitHub上的资料存档，从中恢复一些自己看来有用的文章。然后这次建立了分支，专门备份源数据。</p>\n<p>这次资料丢失，突然发现自己的笔记丢的很可惜，过去花的时间精力不谈，以后遇到需要查找的问题，有自己的笔记在的时候还是方便的多。</p>\n<p>下面说一点可能是常识的东西，但是自己刚发现。</p>\n<p>百度云盘如果上传文件夹，数量有限制，上传一个文件最大的限制是20G，需要买超级会员。如果不买会员，上传最大文件4G，上传速度200k,下载速度100k以内。</p>\n<p>腾讯qq,使用文件传送最大可以传64G的文件，速度看情况，时快时慢。腾讯微云，非会员10G空间，上传速度目测二三百k，买会员应该会快，速度多少没研究。</p>\n<p>因为在GitHub上使用hexo建博客，这次硬盘坏掉导致数据丢失，想把GitHub上的数据pull下来，结果不行，速度超慢，5k以下的速度，然后就失败，百度n久，增大缓冲区什么的都不行，最终解决办法，把GitHub导入码云，然后pull也好，clone也好，分分钟的事。</p>\n<video src=\"录像2.mp4\" width=\"320\" height=\"240\" controls=\"controls\"><br>Your browser does not support the video tag.<br></video>\n\n","site":{"data":{}},"excerpt":"","more":"<p>对于自己的笔记本似乎过于自信，在我得到它的第四个年头，硬盘突然坏掉了，当有预兆的时候，我晚了一点开始尝试挽救我的数据（很显然我的反应慢了点，行动失败）。数据很多，有我花去过去一整年工资才换来的学习资料，有过去一年我自己记录的学习笔记（有学习心得也有自己跳的坑，以及怎么跳出来的)，有我花n个夜晚录制的其他学习视频。还有我国可爱的国宝大熊猫的图像资料。</p>\n<p>想起了希腊神话故事的西西弗斯。</p>\n<p>这两天一直在慢慢复原自己电脑里的东西，包括这个博客。博客的原数据没有了，只能把GitHub上的资料存档，从中恢复一些自己看来有用的文章。然后这次建立了分支，专门备份源数据。</p>\n<p>这次资料丢失，突然发现自己的笔记丢的很可惜，过去花的时间精力不谈，以后遇到需要查找的问题，有自己的笔记在的时候还是方便的多。</p>\n<p>下面说一点可能是常识的东西，但是自己刚发现。</p>\n<p>百度云盘如果上传文件夹，数量有限制，上传一个文件最大的限制是20G，需要买超级会员。如果不买会员，上传最大文件4G，上传速度200k,下载速度100k以内。</p>\n<p>腾讯qq,使用文件传送最大可以传64G的文件，速度看情况，时快时慢。腾讯微云，非会员10G空间，上传速度目测二三百k，买会员应该会快，速度多少没研究。</p>\n<p>因为在GitHub上使用hexo建博客，这次硬盘坏掉导致数据丢失，想把GitHub上的数据pull下来，结果不行，速度超慢，5k以下的速度，然后就失败，百度n久，增大缓冲区什么的都不行，最终解决办法，把GitHub导入码云，然后pull也好，clone也好，分分钟的事。</p>\n<video src=\"录像2.mp4\" width=\"320\" height=\"240\" controls=\"controls\"><br>Your browser does not support the video tag.<br></video>\n\n"},{"title":"jmeter第三方图像监视器插件无响应","date":"2019-08-23T13:34:28.000Z","_content":"\n今天看了会jmeter,没想到又遇到了问题。因为电脑硬盘坏的突然，很多资料都没来得急保存。后来找回一些，电脑上曾经安装的环境重装了一遍，但还是有缺漏。\n\n今天突然想用一下第三方图形监视器，于是重新下载安装：\n\n1.在<https://jmeter-plugins.org/downloads/old/>页下载了JMeterPlugins-Standard-1.4.0.zip,解压缩，复制JMeterPlugins-Standard.jar文件到jmeter安装目录下lib/ext/里\n\n2.服务器端，在<https://jmeter-plugins.org/wiki/PerfMonAgent/>页下载Server Agent，最新版本2.2.3，解压缩。windows平台执行startAgent.bat文件，Linux平台执行startAgent.sh文件。\n\n结果就出了问题。\n\n监听器选了jp@gc - PerfMon Metrics Collector后，脚本无法运行，整个Jmeter关也关不上，jp@gc - PerfMon Metrics Collector图表界面没有图表，只有*waiting for samples*字样，本人Jmeter安装在Windows里，所以只好用任务管理器关闭Jmeter进程。\n\n后来看到下图红框里的文字\n\n{% asset_img old.jpg  %}\n\n于是删除了JMeterPlugins-Standard.jar，下载了jmeter-plugins-manager-1.3.jar放在jmeter安装目录下lib/ext/里，重新启动Jmeter.\n\n果然发现菜单栏 -选项里多了一项Plugins Manager\n\n{% asset_img option.jpg  %}\n\n点击选项(option)--Plugins Manager，跳出下图\n\n{% asset_img add.jpg  %}\n\n再点击Available Plugins,出现下图\n\n{% asset_img add2.jpg  %}\n\n下拉找到jpgc-Standard Set,前面空格打勾，再点击右下方Apply Changes and Restart JMeter，等Jmeter重新启动后我们需要的更新版本的jp@gc - PerfMon Metrics Collector就出现在监听器里了。\n\n果然Jmeter不再无响应，也没有报错，脚本运行正常，结果树显示正常，然而jp@gc - PerfMon Metrics Collector图表界面依旧只有*waiting for samples*字样，停止脚本重新运行就报错\n\n{% asset_img error.jpg  %}\n\n发现脚本只要点击运行，Server Agent就秒停，且出现报错日志。以本人不怎么地的英语连蒙带猜可能是环境报错，本机java版本12.0.1，跟Server Agent不兼容，没能百度出解决方法。\n\n在虚拟机上Java1.8.0版本，则完美运行。\n\njava12依旧不知道该更改哪些设置可以使用，又不想卸载，在文档说明里看到下面一段话，{% asset_img ex.jpg  %}\n\n大概知道可以自己复制一个现成的jre包就可以，不一定要安装java。又看到下面的博文，https://blog.csdn.net/GHY2016/article/details/83422627\n\n综合了一下，于是复制了一个jre包放在severAgent文件夹里，本人使用windows系统，所以修改startAgent.bat文件里**java -jar %0\\..\\CMDRunner.jar --tool PerfMonAgent %***\n\nJava改为复制的jre的Java路径**E:\\apache-jmeter-5.1.1\\ServerAgent-2.2.3\\jre\\bin\\java -jar %0\\..\\CMDRunner.jar --tool PerfMonAgent %***\n\n监控的线图终于出来了，可是有点怪怪的\n\n{% asset_img chart.jpg  %}\n\n但是，暂时先这样吧\n\n","source":"_posts/jmeter第三方图像监视器插件无响应.md","raw":"---\ntitle: jmeter第三方图像监视器插件无响应\ndate: 2019-08-23 21:34:28\ntags:\t\t\n---\n\n今天看了会jmeter,没想到又遇到了问题。因为电脑硬盘坏的突然，很多资料都没来得急保存。后来找回一些，电脑上曾经安装的环境重装了一遍，但还是有缺漏。\n\n今天突然想用一下第三方图形监视器，于是重新下载安装：\n\n1.在<https://jmeter-plugins.org/downloads/old/>页下载了JMeterPlugins-Standard-1.4.0.zip,解压缩，复制JMeterPlugins-Standard.jar文件到jmeter安装目录下lib/ext/里\n\n2.服务器端，在<https://jmeter-plugins.org/wiki/PerfMonAgent/>页下载Server Agent，最新版本2.2.3，解压缩。windows平台执行startAgent.bat文件，Linux平台执行startAgent.sh文件。\n\n结果就出了问题。\n\n监听器选了jp@gc - PerfMon Metrics Collector后，脚本无法运行，整个Jmeter关也关不上，jp@gc - PerfMon Metrics Collector图表界面没有图表，只有*waiting for samples*字样，本人Jmeter安装在Windows里，所以只好用任务管理器关闭Jmeter进程。\n\n后来看到下图红框里的文字\n\n{% asset_img old.jpg  %}\n\n于是删除了JMeterPlugins-Standard.jar，下载了jmeter-plugins-manager-1.3.jar放在jmeter安装目录下lib/ext/里，重新启动Jmeter.\n\n果然发现菜单栏 -选项里多了一项Plugins Manager\n\n{% asset_img option.jpg  %}\n\n点击选项(option)--Plugins Manager，跳出下图\n\n{% asset_img add.jpg  %}\n\n再点击Available Plugins,出现下图\n\n{% asset_img add2.jpg  %}\n\n下拉找到jpgc-Standard Set,前面空格打勾，再点击右下方Apply Changes and Restart JMeter，等Jmeter重新启动后我们需要的更新版本的jp@gc - PerfMon Metrics Collector就出现在监听器里了。\n\n果然Jmeter不再无响应，也没有报错，脚本运行正常，结果树显示正常，然而jp@gc - PerfMon Metrics Collector图表界面依旧只有*waiting for samples*字样，停止脚本重新运行就报错\n\n{% asset_img error.jpg  %}\n\n发现脚本只要点击运行，Server Agent就秒停，且出现报错日志。以本人不怎么地的英语连蒙带猜可能是环境报错，本机java版本12.0.1，跟Server Agent不兼容，没能百度出解决方法。\n\n在虚拟机上Java1.8.0版本，则完美运行。\n\njava12依旧不知道该更改哪些设置可以使用，又不想卸载，在文档说明里看到下面一段话，{% asset_img ex.jpg  %}\n\n大概知道可以自己复制一个现成的jre包就可以，不一定要安装java。又看到下面的博文，https://blog.csdn.net/GHY2016/article/details/83422627\n\n综合了一下，于是复制了一个jre包放在severAgent文件夹里，本人使用windows系统，所以修改startAgent.bat文件里**java -jar %0\\..\\CMDRunner.jar --tool PerfMonAgent %***\n\nJava改为复制的jre的Java路径**E:\\apache-jmeter-5.1.1\\ServerAgent-2.2.3\\jre\\bin\\java -jar %0\\..\\CMDRunner.jar --tool PerfMonAgent %***\n\n监控的线图终于出来了，可是有点怪怪的\n\n{% asset_img chart.jpg  %}\n\n但是，暂时先这样吧\n\n","slug":"jmeter第三方图像监视器插件无响应","published":1,"updated":"2019-09-05T02:03:11.670Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6lz00065cwps1lclm16","content":"<p>今天看了会jmeter,没想到又遇到了问题。因为电脑硬盘坏的突然，很多资料都没来得急保存。后来找回一些，电脑上曾经安装的环境重装了一遍，但还是有缺漏。</p>\n<p>今天突然想用一下第三方图形监视器，于是重新下载安装：</p>\n<p>1.在<a href=\"https://jmeter-plugins.org/downloads/old/\" target=\"_blank\" rel=\"noopener\">https://jmeter-plugins.org/downloads/old/</a>页下载了JMeterPlugins-Standard-1.4.0.zip,解压缩，复制JMeterPlugins-Standard.jar文件到jmeter安装目录下lib/ext/里</p>\n<p>2.服务器端，在<a href=\"https://jmeter-plugins.org/wiki/PerfMonAgent/\" target=\"_blank\" rel=\"noopener\">https://jmeter-plugins.org/wiki/PerfMonAgent/</a>页下载Server Agent，最新版本2.2.3，解压缩。windows平台执行startAgent.bat文件，Linux平台执行startAgent.sh文件。</p>\n<p>结果就出了问题。</p>\n<p>监听器选了jp@gc - PerfMon Metrics Collector后，脚本无法运行，整个Jmeter关也关不上，jp@gc - PerfMon Metrics Collector图表界面没有图表，只有<em>waiting for samples</em>字样，本人Jmeter安装在Windows里，所以只好用任务管理器关闭Jmeter进程。</p>\n<p>后来看到下图红框里的文字</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/old.jpg\">\n<p>于是删除了JMeterPlugins-Standard.jar，下载了jmeter-plugins-manager-1.3.jar放在jmeter安装目录下lib/ext/里，重新启动Jmeter.</p>\n<p>果然发现菜单栏 -选项里多了一项Plugins Manager</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/option.jpg\">\n<p>点击选项(option)–Plugins Manager，跳出下图</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/add.jpg\">\n<p>再点击Available Plugins,出现下图</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/add2.jpg\">\n<p>下拉找到jpgc-Standard Set,前面空格打勾，再点击右下方Apply Changes and Restart JMeter，等Jmeter重新启动后我们需要的更新版本的jp@gc - PerfMon Metrics Collector就出现在监听器里了。</p>\n<p>果然Jmeter不再无响应，也没有报错，脚本运行正常，结果树显示正常，然而jp@gc - PerfMon Metrics Collector图表界面依旧只有<em>waiting for samples</em>字样，停止脚本重新运行就报错</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/error.jpg\">\n<p>发现脚本只要点击运行，Server Agent就秒停，且出现报错日志。以本人不怎么地的英语连蒙带猜可能是环境报错，本机java版本12.0.1，跟Server Agent不兼容，没能百度出解决方法。</p>\n<p>在虚拟机上Java1.8.0版本，则完美运行。</p>\n<p>java12依旧不知道该更改哪些设置可以使用，又不想卸载，在文档说明里看到下面一段话，<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/ex.jpg\"></p>\n<p>大概知道可以自己复制一个现成的jre包就可以，不一定要安装java。又看到下面的博文，<a href=\"https://blog.csdn.net/GHY2016/article/details/83422627\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/GHY2016/article/details/83422627</a></p>\n<p>综合了一下，于是复制了一个jre包放在severAgent文件夹里，本人使用windows系统，所以修改startAgent.bat文件里<strong>java -jar %0..\\CMDRunner.jar –tool PerfMonAgent %*</strong></p>\n<p>Java改为复制的jre的Java路径<strong>E:\\apache-jmeter-5.1.1\\ServerAgent-2.2.3\\jre\\bin\\java -jar %0..\\CMDRunner.jar –tool PerfMonAgent %*</strong></p>\n<p>监控的线图终于出来了，可是有点怪怪的</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/chart.jpg\">\n<p>但是，暂时先这样吧</p>\n","site":{"data":{}},"excerpt":"","more":"<p>今天看了会jmeter,没想到又遇到了问题。因为电脑硬盘坏的突然，很多资料都没来得急保存。后来找回一些，电脑上曾经安装的环境重装了一遍，但还是有缺漏。</p>\n<p>今天突然想用一下第三方图形监视器，于是重新下载安装：</p>\n<p>1.在<a href=\"https://jmeter-plugins.org/downloads/old/\" target=\"_blank\" rel=\"noopener\">https://jmeter-plugins.org/downloads/old/</a>页下载了JMeterPlugins-Standard-1.4.0.zip,解压缩，复制JMeterPlugins-Standard.jar文件到jmeter安装目录下lib/ext/里</p>\n<p>2.服务器端，在<a href=\"https://jmeter-plugins.org/wiki/PerfMonAgent/\" target=\"_blank\" rel=\"noopener\">https://jmeter-plugins.org/wiki/PerfMonAgent/</a>页下载Server Agent，最新版本2.2.3，解压缩。windows平台执行startAgent.bat文件，Linux平台执行startAgent.sh文件。</p>\n<p>结果就出了问题。</p>\n<p>监听器选了jp@gc - PerfMon Metrics Collector后，脚本无法运行，整个Jmeter关也关不上，jp@gc - PerfMon Metrics Collector图表界面没有图表，只有<em>waiting for samples</em>字样，本人Jmeter安装在Windows里，所以只好用任务管理器关闭Jmeter进程。</p>\n<p>后来看到下图红框里的文字</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/old.jpg\">\n<p>于是删除了JMeterPlugins-Standard.jar，下载了jmeter-plugins-manager-1.3.jar放在jmeter安装目录下lib/ext/里，重新启动Jmeter.</p>\n<p>果然发现菜单栏 -选项里多了一项Plugins Manager</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/option.jpg\">\n<p>点击选项(option)–Plugins Manager，跳出下图</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/add.jpg\">\n<p>再点击Available Plugins,出现下图</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/add2.jpg\">\n<p>下拉找到jpgc-Standard Set,前面空格打勾，再点击右下方Apply Changes and Restart JMeter，等Jmeter重新启动后我们需要的更新版本的jp@gc - PerfMon Metrics Collector就出现在监听器里了。</p>\n<p>果然Jmeter不再无响应，也没有报错，脚本运行正常，结果树显示正常，然而jp@gc - PerfMon Metrics Collector图表界面依旧只有<em>waiting for samples</em>字样，停止脚本重新运行就报错</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/error.jpg\">\n<p>发现脚本只要点击运行，Server Agent就秒停，且出现报错日志。以本人不怎么地的英语连蒙带猜可能是环境报错，本机java版本12.0.1，跟Server Agent不兼容，没能百度出解决方法。</p>\n<p>在虚拟机上Java1.8.0版本，则完美运行。</p>\n<p>java12依旧不知道该更改哪些设置可以使用，又不想卸载，在文档说明里看到下面一段话，<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/ex.jpg\"></p>\n<p>大概知道可以自己复制一个现成的jre包就可以，不一定要安装java。又看到下面的博文，<a href=\"https://blog.csdn.net/GHY2016/article/details/83422627\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/GHY2016/article/details/83422627</a></p>\n<p>综合了一下，于是复制了一个jre包放在severAgent文件夹里，本人使用windows系统，所以修改startAgent.bat文件里<strong>java -jar %0..\\CMDRunner.jar –tool PerfMonAgent %*</strong></p>\n<p>Java改为复制的jre的Java路径<strong>E:\\apache-jmeter-5.1.1\\ServerAgent-2.2.3\\jre\\bin\\java -jar %0..\\CMDRunner.jar –tool PerfMonAgent %*</strong></p>\n<p>监控的线图终于出来了，可是有点怪怪的</p>\n<img src=\"/2019/08/23/jmeter第三方图像监视器插件无响应/chart.jpg\">\n<p>但是，暂时先这样吧</p>\n"},{"title":"loadrunner碰壁","date":"2019-05-17T08:43:26.000Z","_content":"\n 这篇注定是没啥内容，因为想见识一下loadrunner12,所以电脑虚拟机里就一个loadrunner11,一个loadrunner12,于是用12版本做了负载机，结局很杯具。果然不通，场景运行直接出来几千的error.地址找不到，关联的参数不能识别之类。两个11版本，一个控制，一个负载，就没啥问题。目前能力解决不了，记下来了。12版本脚本界面看起来比11的爽，可是总体很繁杂的感觉。初初接触，第一眼观感。\n\n<video src=\"panda5.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video><video src=\"panda6.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video>\n\n","source":"_posts/loadrunner碰壁.md","raw":"---\ntitle: loadrunner碰壁\ndate: 2019-05-17 16:43:26\ntags:\n---\n\n 这篇注定是没啥内容，因为想见识一下loadrunner12,所以电脑虚拟机里就一个loadrunner11,一个loadrunner12,于是用12版本做了负载机，结局很杯具。果然不通，场景运行直接出来几千的error.地址找不到，关联的参数不能识别之类。两个11版本，一个控制，一个负载，就没啥问题。目前能力解决不了，记下来了。12版本脚本界面看起来比11的爽，可是总体很繁杂的感觉。初初接触，第一眼观感。\n\n<video src=\"panda5.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video><video src=\"panda6.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video>\n\n","slug":"loadrunner碰壁","published":1,"updated":"2019-05-17T09:39:39.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6m000075cwplxs9arsl","content":"<p> 这篇注定是没啥内容，因为想见识一下loadrunner12,所以电脑虚拟机里就一个loadrunner11,一个loadrunner12,于是用12版本做了负载机，结局很杯具。果然不通，场景运行直接出来几千的error.地址找不到，关联的参数不能识别之类。两个11版本，一个控制，一个负载，就没啥问题。目前能力解决不了，记下来了。12版本脚本界面看起来比11的爽，可是总体很繁杂的感觉。初初接触，第一眼观感。</p>\n<video src=\"panda5.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video><video src=\"panda6.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video>\n\n","site":{"data":{}},"excerpt":"","more":"<p> 这篇注定是没啥内容，因为想见识一下loadrunner12,所以电脑虚拟机里就一个loadrunner11,一个loadrunner12,于是用12版本做了负载机，结局很杯具。果然不通，场景运行直接出来几千的error.地址找不到，关联的参数不能识别之类。两个11版本，一个控制，一个负载，就没啥问题。目前能力解决不了，记下来了。12版本脚本界面看起来比11的爽，可是总体很繁杂的感觉。初初接触，第一眼观感。</p>\n<video src=\"panda5.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video><video src=\"panda6.mp4\" height=\"240\" controls=\"controls\" autoplay=\"autoplay\"></video>\n\n"},{"title":"pytest零用例运行","date":"2020-03-15T06:17:51.000Z","_content":"\n好久没用pytest，最近要熟悉一下，控制台输入pytest命令执行，发现一直是零执行。一堆的error信息，百度也没发现啥有用的，pytest之前装的版本丢了，后来补装的，看着一堆报警，前面的明显自己能力有限，折腾不出来，不过看到最后一条，关于插件allure的，心想试试吧，就把allure卸载了，然后运行，果断正常。行吧，当初安装allure的时候就因为兼容问题，花了不少时间搞定，结果pytest升级，又出问题。自己现今是金鱼脑子，今天用今天记得，明天不用，就忘得一干二净，没办法只能记基本原理，原理太高深，就靠当年学校培训来的解决问题的思路本能，虽然问题根源是啥还不知道，但pytest可以跑起来了，插件再慢慢看吧，总要一步步来的。\n\n> E:\\pycharm\\newproject>pytest\n> =========================================== test session starts ===========================================\n> platform win32 -- Python 3.6.8, pytest-5.4.1, py-1.8.0, pluggy-0.13.1\n> rootdir: E:\\pycharm\\newproject, inifile: pytest.ini, testpaths: ./src\n> plugins: allure-adaptor-1.7.10, html-2.0.1, metadata-1.8.0, ordering-0.6, rerunfailures-4.1\n> collected 2 items                                                                                          \n> INTERNALERROR> Traceback (most recent call last):\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 191, in wrap_session\n> INTERNALERROR>     session.exitstatus = doit(config, session) or 0\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 246, in _main\n> INTERNALERROR>     config.hook.pytest_collection(session=session)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n> INTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n> INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\manager.py\", line 87, in <lambda>\n> INTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n> INTERNALERROR>     return outcome.get_result()\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n> INTERNALERROR>     raise ex[1].with_traceback(ex[2])\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n> INTERNALERROR>     res = hook_impl.function(*args)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 257, in pytest_collection\n> INTERNALERROR>     return session.perform_collect()\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 453, in perform_collect\n> INTERNALERROR>     self.config.pluginmanager.check_pending()\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\manager.py\", line 277, in check_pending\n> INTERNALERROR>     % (name, hookimpl.plugin),\n> INTERNALERROR> pluggy.manager.PluginValidationError: unknown hook 'pytest_namespace' in plugin <module 'allu\n> re.pytest_plugin' from 'e:\\\\python\\\\lib\\\\site-packages\\\\allure\\\\pytest_plugin.py'>","source":"_posts/pytest零用例运行.md","raw":"---\ntitle: pytest零用例运行\ndate: 2020-03-15 14:17:51\ntags:\n---\n\n好久没用pytest，最近要熟悉一下，控制台输入pytest命令执行，发现一直是零执行。一堆的error信息，百度也没发现啥有用的，pytest之前装的版本丢了，后来补装的，看着一堆报警，前面的明显自己能力有限，折腾不出来，不过看到最后一条，关于插件allure的，心想试试吧，就把allure卸载了，然后运行，果断正常。行吧，当初安装allure的时候就因为兼容问题，花了不少时间搞定，结果pytest升级，又出问题。自己现今是金鱼脑子，今天用今天记得，明天不用，就忘得一干二净，没办法只能记基本原理，原理太高深，就靠当年学校培训来的解决问题的思路本能，虽然问题根源是啥还不知道，但pytest可以跑起来了，插件再慢慢看吧，总要一步步来的。\n\n> E:\\pycharm\\newproject>pytest\n> =========================================== test session starts ===========================================\n> platform win32 -- Python 3.6.8, pytest-5.4.1, py-1.8.0, pluggy-0.13.1\n> rootdir: E:\\pycharm\\newproject, inifile: pytest.ini, testpaths: ./src\n> plugins: allure-adaptor-1.7.10, html-2.0.1, metadata-1.8.0, ordering-0.6, rerunfailures-4.1\n> collected 2 items                                                                                          \n> INTERNALERROR> Traceback (most recent call last):\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 191, in wrap_session\n> INTERNALERROR>     session.exitstatus = doit(config, session) or 0\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 246, in _main\n> INTERNALERROR>     config.hook.pytest_collection(session=session)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n> INTERNALERROR>     return self._hookexec(self, self.get_hookimpls(), kwargs)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n> INTERNALERROR>     return self._inner_hookexec(hook, methods, kwargs)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\manager.py\", line 87, in <lambda>\n> INTERNALERROR>     firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n> INTERNALERROR>     return outcome.get_result()\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n> INTERNALERROR>     raise ex[1].with_traceback(ex[2])\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n> INTERNALERROR>     res = hook_impl.function(*args)\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 257, in pytest_collection\n> INTERNALERROR>     return session.perform_collect()\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\_pytest\\main.py\", line 453, in perform_collect\n> INTERNALERROR>     self.config.pluginmanager.check_pending()\n> INTERNALERROR>   File \"e:\\python\\lib\\site-packages\\pluggy\\manager.py\", line 277, in check_pending\n> INTERNALERROR>     % (name, hookimpl.plugin),\n> INTERNALERROR> pluggy.manager.PluginValidationError: unknown hook 'pytest_namespace' in plugin <module 'allu\n> re.pytest_plugin' from 'e:\\\\python\\\\lib\\\\site-packages\\\\allure\\\\pytest_plugin.py'>","slug":"pytest零用例运行","published":1,"updated":"2020-03-15T06:37:06.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6m100085cwpj3vzfyva","content":"<p>好久没用pytest，最近要熟悉一下，控制台输入pytest命令执行，发现一直是零执行。一堆的error信息，百度也没发现啥有用的，pytest之前装的版本丢了，后来补装的，看着一堆报警，前面的明显自己能力有限，折腾不出来，不过看到最后一条，关于插件allure的，心想试试吧，就把allure卸载了，然后运行，果断正常。行吧，当初安装allure的时候就因为兼容问题，花了不少时间搞定，结果pytest升级，又出问题。自己现今是金鱼脑子，今天用今天记得，明天不用，就忘得一干二净，没办法只能记基本原理，原理太高深，就靠当年学校培训来的解决问题的思路本能，虽然问题根源是啥还不知道，但pytest可以跑起来了，插件再慢慢看吧，总要一步步来的。</p>\n<blockquote>\n<p>E:\\pycharm\\newproject&gt;pytest<br>=========================================== test session starts ===========================================<br>platform win32 – Python 3.6.8, pytest-5.4.1, py-1.8.0, pluggy-0.13.1<br>rootdir: E:\\pycharm\\newproject, inifile: pytest.ini, testpaths: ./src<br>plugins: allure-adaptor-1.7.10, html-2.0.1, metadata-1.8.0, ordering-0.6, rerunfailures-4.1<br>collected 2 items<br>INTERNALERROR&gt; Traceback (most recent call last):<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 191, in wrap_session<br>INTERNALERROR&gt;     session.exitstatus = doit(config, session) or 0<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 246, in _main<br>INTERNALERROR&gt;     config.hook.pytest_collection(session=session)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\hooks.py”, line 286, in <strong>call</strong><br>INTERNALERROR&gt;     return self._hookexec(self, self.get_hookimpls(), kwargs)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\manager.py”, line 93, in _hookexec<br>INTERNALERROR&gt;     return self._inner_hookexec(hook, methods, kwargs)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\manager.py”, line 87, in <lambda><br>INTERNALERROR&gt;     firstresult=hook.spec.opts.get(“firstresult”) if hook.spec else False,<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\callers.py”, line 208, in _multicall<br>INTERNALERROR&gt;     return outcome.get_result()<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\callers.py”, line 80, in get_result<br>INTERNALERROR&gt;     raise ex[1].with_traceback(ex[2])<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\callers.py”, line 187, in _multicall<br>INTERNALERROR&gt;     res = hook_impl.function(*args)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 257, in pytest_collection<br>INTERNALERROR&gt;     return session.perform_collect()<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 453, in perform_collect<br>INTERNALERROR&gt;     self.config.pluginmanager.check_pending()<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\manager.py”, line 277, in check_pending<br>INTERNALERROR&gt;     % (name, hookimpl.plugin),<br>INTERNALERROR&gt; pluggy.manager.PluginValidationError: unknown hook ‘pytest_namespace’ in plugin <module 'allu re.pytest_plugin' from 'e:\\\\python\\\\lib\\\\site-packages\\\\allure\\\\pytest_plugin.py'></module></lambda></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>好久没用pytest，最近要熟悉一下，控制台输入pytest命令执行，发现一直是零执行。一堆的error信息，百度也没发现啥有用的，pytest之前装的版本丢了，后来补装的，看着一堆报警，前面的明显自己能力有限，折腾不出来，不过看到最后一条，关于插件allure的，心想试试吧，就把allure卸载了，然后运行，果断正常。行吧，当初安装allure的时候就因为兼容问题，花了不少时间搞定，结果pytest升级，又出问题。自己现今是金鱼脑子，今天用今天记得，明天不用，就忘得一干二净，没办法只能记基本原理，原理太高深，就靠当年学校培训来的解决问题的思路本能，虽然问题根源是啥还不知道，但pytest可以跑起来了，插件再慢慢看吧，总要一步步来的。</p>\n<blockquote>\n<p>E:\\pycharm\\newproject&gt;pytest<br>=========================================== test session starts ===========================================<br>platform win32 – Python 3.6.8, pytest-5.4.1, py-1.8.0, pluggy-0.13.1<br>rootdir: E:\\pycharm\\newproject, inifile: pytest.ini, testpaths: ./src<br>plugins: allure-adaptor-1.7.10, html-2.0.1, metadata-1.8.0, ordering-0.6, rerunfailures-4.1<br>collected 2 items<br>INTERNALERROR&gt; Traceback (most recent call last):<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 191, in wrap_session<br>INTERNALERROR&gt;     session.exitstatus = doit(config, session) or 0<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 246, in _main<br>INTERNALERROR&gt;     config.hook.pytest_collection(session=session)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\hooks.py”, line 286, in <strong>call</strong><br>INTERNALERROR&gt;     return self._hookexec(self, self.get_hookimpls(), kwargs)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\manager.py”, line 93, in _hookexec<br>INTERNALERROR&gt;     return self._inner_hookexec(hook, methods, kwargs)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\manager.py”, line 87, in <lambda><br>INTERNALERROR&gt;     firstresult=hook.spec.opts.get(“firstresult”) if hook.spec else False,<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\callers.py”, line 208, in _multicall<br>INTERNALERROR&gt;     return outcome.get_result()<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\callers.py”, line 80, in get_result<br>INTERNALERROR&gt;     raise ex[1].with_traceback(ex[2])<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\callers.py”, line 187, in _multicall<br>INTERNALERROR&gt;     res = hook_impl.function(*args)<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 257, in pytest_collection<br>INTERNALERROR&gt;     return session.perform_collect()<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages_pytest\\main.py”, line 453, in perform_collect<br>INTERNALERROR&gt;     self.config.pluginmanager.check_pending()<br>INTERNALERROR&gt;   File “e:\\python\\lib\\site-packages\\pluggy\\manager.py”, line 277, in check_pending<br>INTERNALERROR&gt;     % (name, hookimpl.plugin),<br>INTERNALERROR&gt; pluggy.manager.PluginValidationError: unknown hook ‘pytest_namespace’ in plugin <module 'allu re.pytest_plugin' from 'e:\\\\python\\\\lib\\\\site-packages\\\\allure\\\\pytest_plugin.py'></module></lambda></p>\n</blockquote>\n"},{"title":"selenium配置安装概要(回溯)","date":"2019-05-10T14:19:03.000Z","_content":"\n<p>selenium前世今生？</p>\n<p>        前世今生？有点夸张。selenium是一款支持多语言的免费开源的自动化测试软件工具，现在已经更新到selenium3。</p>\n<p>        selenium1包含selenium rc(用于运行自动化测试脚本)，selenium IDE（Firefox插件，提供图形界面录制和回放脚本）以及selenium grid(实现脚本并发执行)</p>\n<p>        selenium2 是selenium1+webdriver</p>\n<p>        selenium3去掉了seleniumRC，并在selenium2上进行了功能增强，例如提高自动化测试稳定性，支持更新更多的浏览器等。</p>\n<h5 id=\"关于测试工具安装配置\"><a href=\"#关于测试工具安装配置\" class=\"headerlink\" title=\"关于测试工具安装配置\"></a>关于测试工具安装配置</h5><p>        网上度娘可以找到很多大神详尽的图文并茂的叙述，故不再啰嗦。</p>\n<p>下面只提几个关键词，给自己加深记忆。</p>\n<p>       selenium IDE插件直接搜索下载安装即可。</p>\n<p>       <strong>着重点：selenium2</strong></p>\n<p>       因为使用python进行自动化脚本的编写，所以是基于python环境的安装。</p>\n<p>       1.<strong>python解释器</strong>：官网下载，安装</p>\n<p>       2.<strong>pycharm</strong>：python编辑器，依旧是下载安装</p>\n<p>       3.<strong>pip工具安装</strong>：搜索-下载，下载后解压，cmd下，找到setup.py文件所在的目录，输入”<em>python setup.py install</em>“命令进行安装</p>\n<p>输入“<em>pip –version</em>“可查看是否安装成功，一般python会默认自带一个低版本的pip工具，但如后续安装中出现版本兼容问题，可使用此安装方式。</p>\n<p>       4.<strong>selenium安装</strong>：<em>pip install selenium==2.48.0</em></p>\n<p>      5.<strong>浏览器驱动</strong>：各浏览器都需要下载各自对应的驱动，并添加到path环境变量中。（在脚本中使用executable_path参数指明驱动文件所在路径也可。例如：<em>driver=webdriver.Firefox(executable_path=”c:\\geckodriver”）</em>),selenium3.x支持Firefox48以后版本，需要下载驱动，而Firefox48之前版本则由selenium2.x支持，无需下载驱动（有内置驱动）。</p>\n{% asset_img smile.png 依旧我美丽的大国宝 %}\n\n","source":"_posts/selenium配置安装概要-回溯.md","raw":"---\ntitle: selenium配置安装概要(回溯)\ndate: 2019-05-10 22:19:03\ntags:\n---\n\n<p>selenium前世今生？</p>\n<p>        前世今生？有点夸张。selenium是一款支持多语言的免费开源的自动化测试软件工具，现在已经更新到selenium3。</p>\n<p>        selenium1包含selenium rc(用于运行自动化测试脚本)，selenium IDE（Firefox插件，提供图形界面录制和回放脚本）以及selenium grid(实现脚本并发执行)</p>\n<p>        selenium2 是selenium1+webdriver</p>\n<p>        selenium3去掉了seleniumRC，并在selenium2上进行了功能增强，例如提高自动化测试稳定性，支持更新更多的浏览器等。</p>\n<h5 id=\"关于测试工具安装配置\"><a href=\"#关于测试工具安装配置\" class=\"headerlink\" title=\"关于测试工具安装配置\"></a>关于测试工具安装配置</h5><p>        网上度娘可以找到很多大神详尽的图文并茂的叙述，故不再啰嗦。</p>\n<p>下面只提几个关键词，给自己加深记忆。</p>\n<p>       selenium IDE插件直接搜索下载安装即可。</p>\n<p>       <strong>着重点：selenium2</strong></p>\n<p>       因为使用python进行自动化脚本的编写，所以是基于python环境的安装。</p>\n<p>       1.<strong>python解释器</strong>：官网下载，安装</p>\n<p>       2.<strong>pycharm</strong>：python编辑器，依旧是下载安装</p>\n<p>       3.<strong>pip工具安装</strong>：搜索-下载，下载后解压，cmd下，找到setup.py文件所在的目录，输入”<em>python setup.py install</em>“命令进行安装</p>\n<p>输入“<em>pip –version</em>“可查看是否安装成功，一般python会默认自带一个低版本的pip工具，但如后续安装中出现版本兼容问题，可使用此安装方式。</p>\n<p>       4.<strong>selenium安装</strong>：<em>pip install selenium==2.48.0</em></p>\n<p>      5.<strong>浏览器驱动</strong>：各浏览器都需要下载各自对应的驱动，并添加到path环境变量中。（在脚本中使用executable_path参数指明驱动文件所在路径也可。例如：<em>driver=webdriver.Firefox(executable_path=”c:\\geckodriver”）</em>),selenium3.x支持Firefox48以后版本，需要下载驱动，而Firefox48之前版本则由selenium2.x支持，无需下载驱动（有内置驱动）。</p>\n{% asset_img smile.png 依旧我美丽的大国宝 %}\n\n","slug":"selenium配置安装概要-回溯","published":1,"updated":"2019-05-10T14:26:17.037Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6m500095cwpj3fhd2rz","content":"<p></p><p>selenium前世今生？</p><p></p>\n<p></p><p>        前世今生？有点夸张。selenium是一款支持多语言的免费开源的自动化测试软件工具，现在已经更新到selenium3。</p><p></p>\n<p></p><p>        selenium1包含selenium rc(用于运行自动化测试脚本)，selenium IDE（Firefox插件，提供图形界面录制和回放脚本）以及selenium grid(实现脚本并发执行)</p><p></p>\n<p></p><p>        selenium2 是selenium1+webdriver</p><p></p>\n<p></p><p>        selenium3去掉了seleniumRC，并在selenium2上进行了功能增强，例如提高自动化测试稳定性，支持更新更多的浏览器等。</p><p></p>\n<p></p><h5 id=\"关于测试工具安装配置\"><a href=\"#关于测试工具安装配置\" class=\"headerlink\" title=\"关于测试工具安装配置\"></a>关于测试工具安装配置</h5><p>        网上度娘可以找到很多大神详尽的图文并茂的叙述，故不再啰嗦。</p><p></p>\n<p></p><p>下面只提几个关键词，给自己加深记忆。</p><p></p>\n<p></p><p>       selenium IDE插件直接搜索下载安装即可。</p><p></p>\n<p></p><p>       <strong>着重点：selenium2</strong></p><p></p>\n<p></p><p>       因为使用python进行自动化脚本的编写，所以是基于python环境的安装。</p><p></p>\n<p></p><p>       1.<strong>python解释器</strong>：官网下载，安装</p><p></p>\n<p></p><p>       2.<strong>pycharm</strong>：python编辑器，依旧是下载安装</p><p></p>\n<p></p><p>       3.<strong>pip工具安装</strong>：搜索-下载，下载后解压，cmd下，找到setup.py文件所在的目录，输入”<em>python setup.py install</em>“命令进行安装</p><p></p>\n<p></p><p>输入“<em>pip –version</em>“可查看是否安装成功，一般python会默认自带一个低版本的pip工具，但如后续安装中出现版本兼容问题，可使用此安装方式。</p><p></p>\n<p></p><p>       4.<strong>selenium安装</strong>：<em>pip install selenium==2.48.0</em></p><p></p>\n<p></p><p>      5.<strong>浏览器驱动</strong>：各浏览器都需要下载各自对应的驱动，并添加到path环境变量中。（在脚本中使用executable_path参数指明驱动文件所在路径也可。例如：<em>driver=webdriver.Firefox(executable_path=”c:\\geckodriver”）</em>),selenium3.x支持Firefox48以后版本，需要下载驱动，而Firefox48之前版本则由selenium2.x支持，无需下载驱动（有内置驱动）。</p><br><p></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p>selenium前世今生？</p><p></p>\n<p></p><p>        前世今生？有点夸张。selenium是一款支持多语言的免费开源的自动化测试软件工具，现在已经更新到selenium3。</p><p></p>\n<p></p><p>        selenium1包含selenium rc(用于运行自动化测试脚本)，selenium IDE（Firefox插件，提供图形界面录制和回放脚本）以及selenium grid(实现脚本并发执行)</p><p></p>\n<p></p><p>        selenium2 是selenium1+webdriver</p><p></p>\n<p></p><p>        selenium3去掉了seleniumRC，并在selenium2上进行了功能增强，例如提高自动化测试稳定性，支持更新更多的浏览器等。</p><p></p>\n<p></p><h5 id=\"关于测试工具安装配置\"><a href=\"#关于测试工具安装配置\" class=\"headerlink\" title=\"关于测试工具安装配置\"></a>关于测试工具安装配置</h5><p>        网上度娘可以找到很多大神详尽的图文并茂的叙述，故不再啰嗦。</p><p></p>\n<p></p><p>下面只提几个关键词，给自己加深记忆。</p><p></p>\n<p></p><p>       selenium IDE插件直接搜索下载安装即可。</p><p></p>\n<p></p><p>       <strong>着重点：selenium2</strong></p><p></p>\n<p></p><p>       因为使用python进行自动化脚本的编写，所以是基于python环境的安装。</p><p></p>\n<p></p><p>       1.<strong>python解释器</strong>：官网下载，安装</p><p></p>\n<p></p><p>       2.<strong>pycharm</strong>：python编辑器，依旧是下载安装</p><p></p>\n<p></p><p>       3.<strong>pip工具安装</strong>：搜索-下载，下载后解压，cmd下，找到setup.py文件所在的目录，输入”<em>python setup.py install</em>“命令进行安装</p><p></p>\n<p></p><p>输入“<em>pip –version</em>“可查看是否安装成功，一般python会默认自带一个低版本的pip工具，但如后续安装中出现版本兼容问题，可使用此安装方式。</p><p></p>\n<p></p><p>       4.<strong>selenium安装</strong>：<em>pip install selenium==2.48.0</em></p><p></p>\n<p></p><p>      5.<strong>浏览器驱动</strong>：各浏览器都需要下载各自对应的驱动，并添加到path环境变量中。（在脚本中使用executable_path参数指明驱动文件所在路径也可。例如：<em>driver=webdriver.Firefox(executable_path=”c:\\geckodriver”）</em>),selenium3.x支持Firefox48以后版本，需要下载驱动，而Firefox48之前版本则由selenium2.x支持，无需下载驱动（有内置驱动）。</p><br><p></p>\n"},{"title":"uiautomator2报错解决","date":"2020-03-15T11:43:21.000Z","_content":"\n这注定是个没啥内容的废话。报错内容忘了复制了，就是很久没用，今天要来熟悉，结果不管用，开始一堆的的报错，依稀记得有句\n\n> > appium-uiautomator2-server-v1.8.0.apk不存在还是咋的\n\n看了半天带找度娘，英语日志，不常用，看的还是比较费劲，看了看自己的Appium版本1.7.0的，的确也太低了点，毕竟最新的都15.0了，一开还警告不能从GitHub上得到1.9.1版本，于是卸载旧版本，下载1.9.1安装，没想到就不报错了，行吧，又一个版本兼容问题，","source":"_posts/uiautomator2报错解决.md","raw":"---\ntitle: uiautomator2报错解决\ndate: 2020-03-15 19:43:21\ntags:\n---\n\n这注定是个没啥内容的废话。报错内容忘了复制了，就是很久没用，今天要来熟悉，结果不管用，开始一堆的的报错，依稀记得有句\n\n> > appium-uiautomator2-server-v1.8.0.apk不存在还是咋的\n\n看了半天带找度娘，英语日志，不常用，看的还是比较费劲，看了看自己的Appium版本1.7.0的，的确也太低了点，毕竟最新的都15.0了，一开还警告不能从GitHub上得到1.9.1版本，于是卸载旧版本，下载1.9.1安装，没想到就不报错了，行吧，又一个版本兼容问题，","slug":"uiautomator2报错解决","published":1,"updated":"2020-03-15T12:09:36.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6m6000a5cwpvp0feuzx","content":"<p>这注定是个没啥内容的废话。报错内容忘了复制了，就是很久没用，今天要来熟悉，结果不管用，开始一堆的的报错，依稀记得有句</p>\n<blockquote>\n<blockquote>\n<p>appium-uiautomator2-server-v1.8.0.apk不存在还是咋的</p>\n</blockquote>\n</blockquote>\n<p>看了半天带找度娘，英语日志，不常用，看的还是比较费劲，看了看自己的Appium版本1.7.0的，的确也太低了点，毕竟最新的都15.0了，一开还警告不能从GitHub上得到1.9.1版本，于是卸载旧版本，下载1.9.1安装，没想到就不报错了，行吧，又一个版本兼容问题，</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这注定是个没啥内容的废话。报错内容忘了复制了，就是很久没用，今天要来熟悉，结果不管用，开始一堆的的报错，依稀记得有句</p>\n<blockquote>\n<blockquote>\n<p>appium-uiautomator2-server-v1.8.0.apk不存在还是咋的</p>\n</blockquote>\n</blockquote>\n<p>看了半天带找度娘，英语日志，不常用，看的还是比较费劲，看了看自己的Appium版本1.7.0的，的确也太低了点，毕竟最新的都15.0了，一开还警告不能从GitHub上得到1.9.1版本，于是卸载旧版本，下载1.9.1安装，没想到就不报错了，行吧，又一个版本兼容问题，</p>\n"},{"title":"uiautomatorvierwer闪退","date":"2019-11-28T01:50:03.000Z","_content":"\nn久没有使用appium，昨天因为一些事情要用uiautomatorvierwer，结果就遇到了打开闪退，百度了下有解决方法，但是跟自己的情况貌似不太一样，采用无效，考虑之前使用正常，唯一的区别的是Java版本有了变化，鉴于之前jmeter同样由于自己采用Java12出现问题，目前还没有能力检查根本原因透过更改配置来解决适配问题，于是采用最简单粗暴的方法，Java12回退至Java8，结果很有效。很长时间没写些什么了，刚36的我最近一直遭受35岁暴击，就不多废话了。以上......","source":"_posts/uiautomatorvierwer闪退.md","raw":"---\ntitle: uiautomatorvierwer闪退\ndate: 2019-11-28 09:50:03\ntags:\n---\n\nn久没有使用appium，昨天因为一些事情要用uiautomatorvierwer，结果就遇到了打开闪退，百度了下有解决方法，但是跟自己的情况貌似不太一样，采用无效，考虑之前使用正常，唯一的区别的是Java版本有了变化，鉴于之前jmeter同样由于自己采用Java12出现问题，目前还没有能力检查根本原因透过更改配置来解决适配问题，于是采用最简单粗暴的方法，Java12回退至Java8，结果很有效。很长时间没写些什么了，刚36的我最近一直遭受35岁暴击，就不多废话了。以上......","slug":"uiautomatorvierwer闪退","published":1,"updated":"2019-11-28T02:00:26.501Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6m7000b5cwppzt3jdyd","content":"<p>n久没有使用appium，昨天因为一些事情要用uiautomatorvierwer，结果就遇到了打开闪退，百度了下有解决方法，但是跟自己的情况貌似不太一样，采用无效，考虑之前使用正常，唯一的区别的是Java版本有了变化，鉴于之前jmeter同样由于自己采用Java12出现问题，目前还没有能力检查根本原因透过更改配置来解决适配问题，于是采用最简单粗暴的方法，Java12回退至Java8，结果很有效。很长时间没写些什么了，刚36的我最近一直遭受35岁暴击，就不多废话了。以上……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>n久没有使用appium，昨天因为一些事情要用uiautomatorvierwer，结果就遇到了打开闪退，百度了下有解决方法，但是跟自己的情况貌似不太一样，采用无效，考虑之前使用正常，唯一的区别的是Java版本有了变化，鉴于之前jmeter同样由于自己采用Java12出现问题，目前还没有能力检查根本原因透过更改配置来解决适配问题，于是采用最简单粗暴的方法，Java12回退至Java8，结果很有效。很长时间没写些什么了，刚36的我最近一直遭受35岁暴击，就不多废话了。以上……</p>\n"},{"title":"unittest知识小结(回溯)","date":"2019-05-10T14:08:50.000Z","_content":"\n<h4 id=\"unittest单元测试框架支持自动化\"><a href=\"#unittest单元测试框架支持自动化\" class=\"headerlink\" title=\"unittest单元测试框架支持自动化\"></a>unittest单元测试框架支持自动化</h4><p>unittest单元测试框架是标准python语言中的一个模块，主要用于python语言程序的单元测试。拥有支持自动化测试、测试用例间共享setUp和shutDown代码块，集合所有的测试用例并且将测试结果独立地展示在报告框架中的特性。</p>\n<h5 id=\"核心：\"><a href=\"#核心：\" class=\"headerlink\" title=\"核心：\"></a>核心：</h5><ol>\n<li><p>test fixture(测试固件)</p>\n<p>一个test fixture代表一个或多个测试执行前的准备动作和测试结束后的清理动作</p>\n</li>\n<li><p>test case（测试用例）</p>\n<p>一个test case就是一个最小测试单元，也就是一个完整的测试流程。针对一组特殊的输入进行特殊的验证与相应。通过集成unittest提供的测试基类（TestCase），可以创建新的测试用例</p>\n</li>\n<li><p>test suite（测试套件）</p>\n<p>一个test suite就是一组测试用例，一组测试套件或者两者共同组成的集合。它的作用是将测试用例集合到一起，然后一次性执行集合中所有的测试用例。</p>\n</li>\n<li><p>test runner（测试运行器）</p>\n<p>一个test runner由执行设定的测试用例和将测试结果提供给用户两部分功能组成。</p>\n</li>\n</ol>\n<h5 id=\"单元测试加载方法\"><a href=\"#单元测试加载方法\" class=\"headerlink\" title=\"单元测试加载方法\"></a>单元测试加载方法</h5><p>在unittest单元测试框架中，提供了两种单元测试的加载方法：</p>\n<p>1）直接通过unittest.main()方法加载单元测试的测试模块。</p>\n<p>2）将所有的单元测试用例（Test Case）添加到测试套件（Test Suite）集合中，然后一次性加载所有测试对象。</p>\n<h5 id=\"TestCase类中定义的几个特殊方法\"><a href=\"#TestCase类中定义的几个特殊方法\" class=\"headerlink\" title=\"TestCase类中定义的几个特殊方法\"></a>TestCase类中定义的几个特殊方法</h5><ol>\n<li>setUp()：每个测试方法运行前运行，测试前的初始化工作</li>\n<li>tearDown()：每个测试方法运行结束后运行，测试后的清理工作</li>\n<li>setUpClass()：所有的测试方法运行前运行，单元测试前期准备，必须使用@classmethod装饰器进行修饰，setUp()函数之前执行，整个测试过程只执行一次</li>\n<li>tearDownClass()：所有的测试方法运行结束后执行，单元测试后期清理，必须使用@classmethod装饰器进行修饰，tearDown()之后执行，整个测试过程只执行一次</li>\n</ol>\n{% asset_img image.jpg %}","source":"_posts/unittest知识小结-回溯.md","raw":"---\ntitle: unittest知识小结(回溯)\ndate: 2019-05-10 22:08:50\ntags:\n---\n\n<h4 id=\"unittest单元测试框架支持自动化\"><a href=\"#unittest单元测试框架支持自动化\" class=\"headerlink\" title=\"unittest单元测试框架支持自动化\"></a>unittest单元测试框架支持自动化</h4><p>unittest单元测试框架是标准python语言中的一个模块，主要用于python语言程序的单元测试。拥有支持自动化测试、测试用例间共享setUp和shutDown代码块，集合所有的测试用例并且将测试结果独立地展示在报告框架中的特性。</p>\n<h5 id=\"核心：\"><a href=\"#核心：\" class=\"headerlink\" title=\"核心：\"></a>核心：</h5><ol>\n<li><p>test fixture(测试固件)</p>\n<p>一个test fixture代表一个或多个测试执行前的准备动作和测试结束后的清理动作</p>\n</li>\n<li><p>test case（测试用例）</p>\n<p>一个test case就是一个最小测试单元，也就是一个完整的测试流程。针对一组特殊的输入进行特殊的验证与相应。通过集成unittest提供的测试基类（TestCase），可以创建新的测试用例</p>\n</li>\n<li><p>test suite（测试套件）</p>\n<p>一个test suite就是一组测试用例，一组测试套件或者两者共同组成的集合。它的作用是将测试用例集合到一起，然后一次性执行集合中所有的测试用例。</p>\n</li>\n<li><p>test runner（测试运行器）</p>\n<p>一个test runner由执行设定的测试用例和将测试结果提供给用户两部分功能组成。</p>\n</li>\n</ol>\n<h5 id=\"单元测试加载方法\"><a href=\"#单元测试加载方法\" class=\"headerlink\" title=\"单元测试加载方法\"></a>单元测试加载方法</h5><p>在unittest单元测试框架中，提供了两种单元测试的加载方法：</p>\n<p>1）直接通过unittest.main()方法加载单元测试的测试模块。</p>\n<p>2）将所有的单元测试用例（Test Case）添加到测试套件（Test Suite）集合中，然后一次性加载所有测试对象。</p>\n<h5 id=\"TestCase类中定义的几个特殊方法\"><a href=\"#TestCase类中定义的几个特殊方法\" class=\"headerlink\" title=\"TestCase类中定义的几个特殊方法\"></a>TestCase类中定义的几个特殊方法</h5><ol>\n<li>setUp()：每个测试方法运行前运行，测试前的初始化工作</li>\n<li>tearDown()：每个测试方法运行结束后运行，测试后的清理工作</li>\n<li>setUpClass()：所有的测试方法运行前运行，单元测试前期准备，必须使用@classmethod装饰器进行修饰，setUp()函数之前执行，整个测试过程只执行一次</li>\n<li>tearDownClass()：所有的测试方法运行结束后执行，单元测试后期清理，必须使用@classmethod装饰器进行修饰，tearDown()之后执行，整个测试过程只执行一次</li>\n</ol>\n{% asset_img image.jpg %}","slug":"unittest知识小结-回溯","published":1,"updated":"2019-05-10T14:11:05.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6m8000c5cwpnnk6c5ih","content":"<p></p><h4 id=\"unittest单元测试框架支持自动化\"><a href=\"#unittest单元测试框架支持自动化\" class=\"headerlink\" title=\"unittest单元测试框架支持自动化\"></a>unittest单元测试框架支持自动化</h4><p>unittest单元测试框架是标准python语言中的一个模块，主要用于python语言程序的单元测试。拥有支持自动化测试、测试用例间共享setUp和shutDown代码块，集合所有的测试用例并且将测试结果独立地展示在报告框架中的特性。</p><p></p>\n<p></p><h5 id=\"核心：\"><a href=\"#核心：\" class=\"headerlink\" title=\"核心：\"></a>核心：</h5><ol><p></p>\n<p><li><p>test fixture(测试固件)</p></li></p>\n<p></p><p>一个test fixture代表一个或多个测试执行前的准备动作和测试结束后的清理动作</p><br><p></p>\n<p><li><p>test case（测试用例）</p></li></p>\n<p></p><p>一个test case就是一个最小测试单元，也就是一个完整的测试流程。针对一组特殊的输入进行特殊的验证与相应。通过集成unittest提供的测试基类（TestCase），可以创建新的测试用例</p><br><p></p>\n<p><li><p>test suite（测试套件）</p></li></p>\n<p></p><p>一个test suite就是一组测试用例，一组测试套件或者两者共同组成的集合。它的作用是将测试用例集合到一起，然后一次性执行集合中所有的测试用例。</p><br><p></p>\n<p><li><p>test runner（测试运行器）</p></li></p>\n<p></p><p>一个test runner由执行设定的测试用例和将测试结果提供给用户两部分功能组成。</p><br><br></ol><p></p>\n<p></p><h5 id=\"单元测试加载方法\"><a href=\"#单元测试加载方法\" class=\"headerlink\" title=\"单元测试加载方法\"></a>单元测试加载方法</h5><p>在unittest单元测试框架中，提供了两种单元测试的加载方法：</p><p></p>\n<p></p><p>1）直接通过unittest.main()方法加载单元测试的测试模块。</p><p></p>\n<p></p><p>2）将所有的单元测试用例（Test Case）添加到测试套件（Test Suite）集合中，然后一次性加载所有测试对象。</p><p></p>\n<p></p><h5 id=\"TestCase类中定义的几个特殊方法\"><a href=\"#TestCase类中定义的几个特殊方法\" class=\"headerlink\" title=\"TestCase类中定义的几个特殊方法\"></a>TestCase类中定义的几个特殊方法</h5><ol><p></p>\n<p><li>setUp()：每个测试方法运行前运行，测试前的初始化工作</li></p>\n<p><li>tearDown()：每个测试方法运行结束后运行，测试后的清理工作</li></p>\n<p><li>setUpClass()：所有的测试方法运行前运行，单元测试前期准备，必须使用@classmethod装饰器进行修饰，setUp()函数之前执行，整个测试过程只执行一次</li></p>\n<p><li>tearDownClass()：所有的测试方法运行结束后执行，单元测试后期清理，必须使用@classmethod装饰器进行修饰，tearDown()之后执行，整个测试过程只执行一次</li><br></p></ol><br><img src=\"/2019/05/10/unittest知识小结-回溯/image.jpg\"><p></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><h4 id=\"unittest单元测试框架支持自动化\"><a href=\"#unittest单元测试框架支持自动化\" class=\"headerlink\" title=\"unittest单元测试框架支持自动化\"></a>unittest单元测试框架支持自动化</h4><p>unittest单元测试框架是标准python语言中的一个模块，主要用于python语言程序的单元测试。拥有支持自动化测试、测试用例间共享setUp和shutDown代码块，集合所有的测试用例并且将测试结果独立地展示在报告框架中的特性。</p><p></p>\n<p></p><h5 id=\"核心：\"><a href=\"#核心：\" class=\"headerlink\" title=\"核心：\"></a>核心：</h5><ol><p></p>\n<p><li><p>test fixture(测试固件)</p></li></p>\n<p></p><p>一个test fixture代表一个或多个测试执行前的准备动作和测试结束后的清理动作</p><br><p></p>\n<p><li><p>test case（测试用例）</p></li></p>\n<p></p><p>一个test case就是一个最小测试单元，也就是一个完整的测试流程。针对一组特殊的输入进行特殊的验证与相应。通过集成unittest提供的测试基类（TestCase），可以创建新的测试用例</p><br><p></p>\n<p><li><p>test suite（测试套件）</p></li></p>\n<p></p><p>一个test suite就是一组测试用例，一组测试套件或者两者共同组成的集合。它的作用是将测试用例集合到一起，然后一次性执行集合中所有的测试用例。</p><br><p></p>\n<p><li><p>test runner（测试运行器）</p></li></p>\n<p></p><p>一个test runner由执行设定的测试用例和将测试结果提供给用户两部分功能组成。</p><br><br></ol><p></p>\n<p></p><h5 id=\"单元测试加载方法\"><a href=\"#单元测试加载方法\" class=\"headerlink\" title=\"单元测试加载方法\"></a>单元测试加载方法</h5><p>在unittest单元测试框架中，提供了两种单元测试的加载方法：</p><p></p>\n<p></p><p>1）直接通过unittest.main()方法加载单元测试的测试模块。</p><p></p>\n<p></p><p>2）将所有的单元测试用例（Test Case）添加到测试套件（Test Suite）集合中，然后一次性加载所有测试对象。</p><p></p>\n<p></p><h5 id=\"TestCase类中定义的几个特殊方法\"><a href=\"#TestCase类中定义的几个特殊方法\" class=\"headerlink\" title=\"TestCase类中定义的几个特殊方法\"></a>TestCase类中定义的几个特殊方法</h5><ol><p></p>\n<p><li>setUp()：每个测试方法运行前运行，测试前的初始化工作</li></p>\n<p><li>tearDown()：每个测试方法运行结束后运行，测试后的清理工作</li></p>\n<p><li>setUpClass()：所有的测试方法运行前运行，单元测试前期准备，必须使用@classmethod装饰器进行修饰，setUp()函数之前执行，整个测试过程只执行一次</li></p>\n<p><li>tearDownClass()：所有的测试方法运行结束后执行，单元测试后期清理，必须使用@classmethod装饰器进行修饰，tearDown()之后执行，整个测试过程只执行一次</li><br></p></ol><br><img src=\"/2019/05/10/unittest知识小结-回溯/image.jpg\"><p></p>\n"},{"title":"unittest跳过某个测试方法及命令行执行(追回)","date":"2019-05-10T13:54:55.000Z","_content":"\n<p>在批量执行测试用例时，某些测试用例想要忽略，可以在测试方法前加下列语句跳过此方法。</p>\n<ol>\n<li>@unittest.skip(“说明语句”)：无条件跳过</li>\n<li>@unittest.skipIf(条件表达式，”说明语句”)：条件为真，忽略该方法</li>\n<li>@unittest.skipUnless(条件表达式，”说明语句”)：条件为假，跳过该方法 </li>\n</ol>\n<hr>\n<h6 id=\"命令行模式执行测试用例\"><a href=\"#命令行模式执行测试用例\" class=\"headerlink\" title=\"命令行模式执行测试用例\"></a>命令行模式执行测试用例</h6><p>命令行模式，切换到当前测试模块所在目录下，执行下面命令：</p>\n<ol>\n<li><p>通过命令直接运行整个测试模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1 test_module2.....</span><br><span class=\"line\">例：python -m unittest -v MyTest #-v参数表示输出测试用例执行的详细信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行测试模块中某个测试类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行测试模块中某个测试类下的某个测试方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass.test_method</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass.test_fun</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"命令行模式，批量执行某个目录下的测试脚本\"><a href=\"#命令行模式，批量执行某个目录下的测试脚本\" class=\"headerlink\" title=\"命令行模式，批量执行某个目录下的测试脚本\"></a>命令行模式，批量执行某个目录下的测试脚本</h6><p>命令行模式，cd 切换到要测目录，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest discover</span><br></pre></td></tr></table></figure>\n<p>discover命令的参数（可选）</p>\n<p>-v：输出详细测试信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -v</span><br></pre></td></tr></table></figure>\n<p>-s：执行发现测试脚本的目录，默认为当前目录</p>\n<p>-p：模式匹配文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -p &quot;test*.py&quot;</span><br></pre></td></tr></table></figure>\n<p>-t：工程的根目录下搜索可执行的测试脚本，默认是当前目录</p>","source":"_posts/unittest跳过某个测试方法及命令行执行-追回.md","raw":"---\ntitle: unittest跳过某个测试方法及命令行执行(追回)\ndate: 2019-05-10 21:54:55\ntags:\n---\n\n<p>在批量执行测试用例时，某些测试用例想要忽略，可以在测试方法前加下列语句跳过此方法。</p>\n<ol>\n<li>@unittest.skip(“说明语句”)：无条件跳过</li>\n<li>@unittest.skipIf(条件表达式，”说明语句”)：条件为真，忽略该方法</li>\n<li>@unittest.skipUnless(条件表达式，”说明语句”)：条件为假，跳过该方法 </li>\n</ol>\n<hr>\n<h6 id=\"命令行模式执行测试用例\"><a href=\"#命令行模式执行测试用例\" class=\"headerlink\" title=\"命令行模式执行测试用例\"></a>命令行模式执行测试用例</h6><p>命令行模式，切换到当前测试模块所在目录下，执行下面命令：</p>\n<ol>\n<li><p>通过命令直接运行整个测试模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1 test_module2.....</span><br><span class=\"line\">例：python -m unittest -v MyTest #-v参数表示输出测试用例执行的详细信息</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行测试模块中某个测试类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行测试模块中某个测试类下的某个测试方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass.test_method</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass.test_fun</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h6 id=\"命令行模式，批量执行某个目录下的测试脚本\"><a href=\"#命令行模式，批量执行某个目录下的测试脚本\" class=\"headerlink\" title=\"命令行模式，批量执行某个目录下的测试脚本\"></a>命令行模式，批量执行某个目录下的测试脚本</h6><p>命令行模式，cd 切换到要测目录，执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest discover</span><br></pre></td></tr></table></figure>\n<p>discover命令的参数（可选）</p>\n<p>-v：输出详细测试信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -v</span><br></pre></td></tr></table></figure>\n<p>-s：执行发现测试脚本的目录，默认为当前目录</p>\n<p>-p：模式匹配文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -p &quot;test*.py&quot;</span><br></pre></td></tr></table></figure>\n<p>-t：工程的根目录下搜索可执行的测试脚本，默认是当前目录</p>","slug":"unittest跳过某个测试方法及命令行执行-追回","published":1,"updated":"2019-05-10T13:57:11.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6ma000d5cwp8e4eisvw","content":"<p>在批量执行测试用例时，某些测试用例想要忽略，可以在测试方法前加下列语句跳过此方法。</p><br><ol><br><li>@unittest.skip(“说明语句”)：无条件跳过</li><br><li>@unittest.skipIf(条件表达式，”说明语句”)：条件为真，忽略该方法</li><br><li>@unittest.skipUnless(条件表达式，”说明语句”)：条件为假，跳过该方法 </li><br></ol><br><hr><br><h6 id=\"命令行模式执行测试用例\"><a href=\"#命令行模式执行测试用例\" class=\"headerlink\" title=\"命令行模式执行测试用例\"></a>命令行模式执行测试用例</h6><p>命令行模式，切换到当前测试模块所在目录下，执行下面命令：</p><br><ol><br><li><p>通过命令直接运行整个测试模块</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1 test_module2…..</span><br><span class=\"line\">例：python -m unittest -v MyTest #-v参数表示输出测试用例执行的详细信息</span><br></pre></td></tr></table></figure><br></li><br><li><p>执行测试模块中某个测试类</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass</span><br></pre></td></tr></table></figure><br></li><br><li><p>执行测试模块中某个测试类下的某个测试方法</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass.test_method</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass.test_fun</span><br></pre></td></tr></table></figure><br></li><br></ol><br><h6 id=\"命令行模式，批量执行某个目录下的测试脚本\"><a href=\"#命令行模式，批量执行某个目录下的测试脚本\" class=\"headerlink\" title=\"命令行模式，批量执行某个目录下的测试脚本\"></a>命令行模式，批量执行某个目录下的测试脚本</h6><p>命令行模式，cd 切换到要测目录，执行命令</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest discover</span><br></pre></td></tr></table></figure><br><p>discover命令的参数（可选）</p><br><p>-v：输出详细测试信息</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -v</span><br></pre></td></tr></table></figure><br><p>-s：执行发现测试脚本的目录，默认为当前目录</p><br><p>-p：模式匹配文件</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -p &quot;test*.py&quot;</span><br></pre></td></tr></table></figure><br><p>-t：工程的根目录下搜索可执行的测试脚本，默认是当前目录</p>","site":{"data":{}},"excerpt":"","more":"<p>在批量执行测试用例时，某些测试用例想要忽略，可以在测试方法前加下列语句跳过此方法。</p><br><ol><br><li>@unittest.skip(“说明语句”)：无条件跳过</li><br><li>@unittest.skipIf(条件表达式，”说明语句”)：条件为真，忽略该方法</li><br><li>@unittest.skipUnless(条件表达式，”说明语句”)：条件为假，跳过该方法 </li><br></ol><br><hr><br><h6 id=\"命令行模式执行测试用例\"><a href=\"#命令行模式执行测试用例\" class=\"headerlink\" title=\"命令行模式执行测试用例\"></a>命令行模式执行测试用例</h6><p>命令行模式，切换到当前测试模块所在目录下，执行下面命令：</p><br><ol><br><li><p>通过命令直接运行整个测试模块</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1 test_module2…..</span><br><span class=\"line\">例：python -m unittest -v MyTest #-v参数表示输出测试用例执行的详细信息</span><br></pre></td></tr></table></figure><br></li><br><li><p>执行测试模块中某个测试类</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass</span><br></pre></td></tr></table></figure><br></li><br><li><p>执行测试模块中某个测试类下的某个测试方法</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest test_module1.TestClass.test_method</span><br><span class=\"line\">例：python -m unittest -v MyTest.MyTestClass.test_fun</span><br></pre></td></tr></table></figure><br></li><br></ol><br><h6 id=\"命令行模式，批量执行某个目录下的测试脚本\"><a href=\"#命令行模式，批量执行某个目录下的测试脚本\" class=\"headerlink\" title=\"命令行模式，批量执行某个目录下的测试脚本\"></a>命令行模式，批量执行某个目录下的测试脚本</h6><p>命令行模式，cd 切换到要测目录，执行命令</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python -m unittest discover</span><br></pre></td></tr></table></figure><br><p>discover命令的参数（可选）</p><br><p>-v：输出详细测试信息</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -v</span><br></pre></td></tr></table></figure><br><p>-s：执行发现测试脚本的目录，默认为当前目录</p><br><p>-p：模式匹配文件</p><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例 python -m unittest discover -p &quot;test*.py&quot;</span><br></pre></td></tr></table></figure><br><p>-t：工程的根目录下搜索可执行的测试脚本，默认是当前目录</p>"},{"title":"全职高手-坚持","date":"2019-08-24T01:37:52.000Z","_content":"\n最近《全职高手》热播，最想成为的是叶修，然而......\n\n伍晨是最新出来的战队成员，他的出现也让我带入了自己，然而我的职业生涯还没有他有实力，年纪比他老，可是就像他说的，“不想退”，我也只有坚持了，或许还不够努力，那就尽量今天比昨天再努力一点好了，只有坚持了......\n<video controls>\n  <source src=\"insist.mp4\" type=\"video/mp4\">\n</video>\n\n","source":"_posts/全职高手-坚持.md","raw":"---\ntitle: 全职高手-坚持\ndate: 2019-08-24 09:37:52\ntags:\t\n---\n\n最近《全职高手》热播，最想成为的是叶修，然而......\n\n伍晨是最新出来的战队成员，他的出现也让我带入了自己，然而我的职业生涯还没有他有实力，年纪比他老，可是就像他说的，“不想退”，我也只有坚持了，或许还不够努力，那就尽量今天比昨天再努力一点好了，只有坚持了......\n<video controls>\n  <source src=\"insist.mp4\" type=\"video/mp4\">\n</video>\n\n","slug":"全职高手-坚持","published":1,"updated":"2019-08-24T03:06:28.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6mb000e5cwph9b4m3ps","content":"<p>最近《全职高手》热播，最想成为的是叶修，然而……</p>\n<p>伍晨是最新出来的战队成员，他的出现也让我带入了自己，然而我的职业生涯还没有他有实力，年纪比他老，可是就像他说的，“不想退”，我也只有坚持了，或许还不够努力，那就尽量今天比昨天再努力一点好了，只有坚持了……</p>\n<video controls><br>  <source src=\"insist.mp4\" type=\"video/mp4\"><br></video>\n\n","site":{"data":{}},"excerpt":"","more":"<p>最近《全职高手》热播，最想成为的是叶修，然而……</p>\n<p>伍晨是最新出来的战队成员，他的出现也让我带入了自己，然而我的职业生涯还没有他有实力，年纪比他老，可是就像他说的，“不想退”，我也只有坚持了，或许还不够努力，那就尽量今天比昨天再努力一点好了，只有坚持了……</p>\n<video controls><br>  <source src=\"insist.mp4\" type=\"video/mp4\"><br></video>\n\n"},{"title":"关于selenium IDE(回溯)","date":"2019-05-10T14:42:14.000Z","_content":"\n<h4 id=\"selenium-IDE\"><a href=\"#selenium-IDE\" class=\"headerlink\" title=\"selenium IDE\"></a>selenium IDE</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>Selenium IDE是Firefox和Chrome浏览器插件，可实现网页操作步骤的录制和回放，可执行简单测试逻辑的自动化测试，可将它的脚本导出为java,python等多种语言格式的程序代码，可将认为操作网页的各种动作直接转化为自动化测试的程序代码，便于编写更加复杂的测试代码。</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>优点：小巧简单，易于上手</p>\n<p>缺点：录制脚本转换为其他语言脚本时有可能出现一些错误，需要人为修改</p>\n<p>总之，Selenium IDE工具仅适合用于执行简单逻辑的自动化测试脚本，或通过录制方式导出相关的自动化测试脚本，不适于执行大中型项目的自动化测试程序</p>\n<h5 id=\"selenium-IDE脚本的组成\"><a href=\"#selenium-IDE脚本的组成\" class=\"headerlink\" title=\"selenium IDE脚本的组成\"></a>selenium IDE脚本的组成</h5><p>command（命令)、target(目标定位)、value(值)</p>\n<h6 id=\"Selenium-IDE的command命令类型：\"><a href=\"#Selenium-IDE的command命令类型：\" class=\"headerlink\" title=\"Selenium IDE的command命令类型：\"></a>Selenium IDE的command命令类型：</h6><ul>\n<li>Assertions(断言)类型：</li>\n</ul>\n<p>waitForText：在测试执行时用来判断某些文本是否显示在界面中。若显示，测试程序继续执行；若<em>等待一段时间后</em>，不显示指定文本，测试用例被设定为<em>执行失败</em>状态，测试脚本<em>继续执行</em>。（option里可设定等待时间，默认30秒）</p>\n<p>assertText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试程序继续执行；若不一致，测试用例被设定为<em>执行失败</em>，<em>后续</em>测试脚本<em>不再执行</em>。</p>\n<p>verifyText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试脚本继续执行；不一致，测试用例被设定为<em>执行失败</em>，测试脚本<em>继续执行</em>。</p>\n<ul>\n<li>Accessors(存储器)类型：</li>\n</ul>\n<p>    storeTitle：主要用于将网页的title内容存储到变量中</p>\n<p>    echo：主要用于常量字符串和变量字符创的打印输出，特别用于调试脚本时输出脚本的状态</p>\n<p>例：命令</p>\n{% asset_img 存储器类型命令.png 存储title内容到变量a，在log显示区域打印变量a的值 %}\n<p>结果</p>\n{% asset_img  存储器类型命令结果.png 存储title内容到变量a，在log显示区域打印变量a的值 %}\n<ul>\n<li><p>Actions(动作)类型：</p>\n<p>open：打开浏览器窗口</p>\n<p>openWindow：打开新的Firefox浏览器窗口</p>\n<p>selectWindow：选择一个处于打开状态的窗口</p>\n<p>pause：暂停（单位ms)</p>\n<p>type：输入字符</p>\n<p>click：点击一个按钮，链接，单选或复选框</p>\n<p>refresh：刷新当前页</p>\n<p>close：关闭浏览器窗口</p>\n</li>\n</ul>\n<hr>\n<p>以上内容非原创，参考《自动化框架实战指南》，命令非全部，仅为常用几种基本命令<br>\n<iframe title=\"国宝治愈系列\" src=\"//player.bilibili.com/player.html?aid=31723902&cid=55479363&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"300px\"> </iframe>\n</p>\n\n","source":"_posts/关于selenium-IDE-回溯.md","raw":"---\ntitle: 关于selenium IDE(回溯)\ndate: 2019-05-10 22:42:14\ntags:\n---\n\n<h4 id=\"selenium-IDE\"><a href=\"#selenium-IDE\" class=\"headerlink\" title=\"selenium IDE\"></a>selenium IDE</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>Selenium IDE是Firefox和Chrome浏览器插件，可实现网页操作步骤的录制和回放，可执行简单测试逻辑的自动化测试，可将它的脚本导出为java,python等多种语言格式的程序代码，可将认为操作网页的各种动作直接转化为自动化测试的程序代码，便于编写更加复杂的测试代码。</p>\n<h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>优点：小巧简单，易于上手</p>\n<p>缺点：录制脚本转换为其他语言脚本时有可能出现一些错误，需要人为修改</p>\n<p>总之，Selenium IDE工具仅适合用于执行简单逻辑的自动化测试脚本，或通过录制方式导出相关的自动化测试脚本，不适于执行大中型项目的自动化测试程序</p>\n<h5 id=\"selenium-IDE脚本的组成\"><a href=\"#selenium-IDE脚本的组成\" class=\"headerlink\" title=\"selenium IDE脚本的组成\"></a>selenium IDE脚本的组成</h5><p>command（命令)、target(目标定位)、value(值)</p>\n<h6 id=\"Selenium-IDE的command命令类型：\"><a href=\"#Selenium-IDE的command命令类型：\" class=\"headerlink\" title=\"Selenium IDE的command命令类型：\"></a>Selenium IDE的command命令类型：</h6><ul>\n<li>Assertions(断言)类型：</li>\n</ul>\n<p>waitForText：在测试执行时用来判断某些文本是否显示在界面中。若显示，测试程序继续执行；若<em>等待一段时间后</em>，不显示指定文本，测试用例被设定为<em>执行失败</em>状态，测试脚本<em>继续执行</em>。（option里可设定等待时间，默认30秒）</p>\n<p>assertText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试程序继续执行；若不一致，测试用例被设定为<em>执行失败</em>，<em>后续</em>测试脚本<em>不再执行</em>。</p>\n<p>verifyText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试脚本继续执行；不一致，测试用例被设定为<em>执行失败</em>，测试脚本<em>继续执行</em>。</p>\n<ul>\n<li>Accessors(存储器)类型：</li>\n</ul>\n<p>    storeTitle：主要用于将网页的title内容存储到变量中</p>\n<p>    echo：主要用于常量字符串和变量字符创的打印输出，特别用于调试脚本时输出脚本的状态</p>\n<p>例：命令</p>\n{% asset_img 存储器类型命令.png 存储title内容到变量a，在log显示区域打印变量a的值 %}\n<p>结果</p>\n{% asset_img  存储器类型命令结果.png 存储title内容到变量a，在log显示区域打印变量a的值 %}\n<ul>\n<li><p>Actions(动作)类型：</p>\n<p>open：打开浏览器窗口</p>\n<p>openWindow：打开新的Firefox浏览器窗口</p>\n<p>selectWindow：选择一个处于打开状态的窗口</p>\n<p>pause：暂停（单位ms)</p>\n<p>type：输入字符</p>\n<p>click：点击一个按钮，链接，单选或复选框</p>\n<p>refresh：刷新当前页</p>\n<p>close：关闭浏览器窗口</p>\n</li>\n</ul>\n<hr>\n<p>以上内容非原创，参考《自动化框架实战指南》，命令非全部，仅为常用几种基本命令<br>\n<iframe title=\"国宝治愈系列\" src=\"//player.bilibili.com/player.html?aid=31723902&cid=55479363&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"300px\"> </iframe>\n</p>\n\n","slug":"关于selenium-IDE-回溯","published":1,"updated":"2019-05-10T14:49:56.149Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6mc000f5cwpyusb83wb","content":"<p></p><h4 id=\"selenium-IDE\"><a href=\"#selenium-IDE\" class=\"headerlink\" title=\"selenium IDE\"></a>selenium IDE</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>Selenium IDE是Firefox和Chrome浏览器插件，可实现网页操作步骤的录制和回放，可执行简单测试逻辑的自动化测试，可将它的脚本导出为java,python等多种语言格式的程序代码，可将认为操作网页的各种动作直接转化为自动化测试的程序代码，便于编写更加复杂的测试代码。</p><p></p>\n<p></p><h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>优点：小巧简单，易于上手</p><p></p>\n<p>缺点：录制脚本转换为其他语言脚本时有可能出现一些错误，需要人为修改</p><br><p>总之，Selenium IDE工具仅适合用于执行简单逻辑的自动化测试脚本，或通过录制方式导出相关的自动化测试脚本，不适于执行大中型项目的自动化测试程序</p><br><h5 id=\"selenium-IDE脚本的组成\"><a href=\"#selenium-IDE脚本的组成\" class=\"headerlink\" title=\"selenium IDE脚本的组成\"></a>selenium IDE脚本的组成</h5><p>command（命令)、target(目标定位)、value(值)</p><br><h6 id=\"Selenium-IDE的command命令类型：\"><a href=\"#Selenium-IDE的command命令类型：\" class=\"headerlink\" title=\"Selenium IDE的command命令类型：\"></a>Selenium IDE的command命令类型：</h6><ul><br><li>Assertions(断言)类型：</li><br></ul><br><p>waitForText：在测试执行时用来判断某些文本是否显示在界面中。若显示，测试程序继续执行；若<em>等待一段时间后</em>，不显示指定文本，测试用例被设定为<em>执行失败</em>状态，测试脚本<em>继续执行</em>。（option里可设定等待时间，默认30秒）</p><br><p>assertText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试程序继续执行；若不一致，测试用例被设定为<em>执行失败</em>，<em>后续</em>测试脚本<em>不再执行</em>。</p><br><p>verifyText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试脚本继续执行；不一致，测试用例被设定为<em>执行失败</em>，测试脚本<em>继续执行</em>。</p><br><ul><br><li>Accessors(存储器)类型：</li><br></ul><br><p>    storeTitle：主要用于将网页的title内容存储到变量中</p><br><p>    echo：主要用于常量字符串和变量字符创的打印输出，特别用于调试脚本时输出脚本的状态</p><br><p>例：命令</p><br><img src=\"/2019/05/10/关于selenium-IDE-回溯/存储器类型命令.png\" title=\"存储title内容到变量a，在log显示区域打印变量a的值\"><br><p>结果</p><br><img src=\"/2019/05/10/关于selenium-IDE-回溯/存储器类型命令结果.png\" title=\"存储title内容到变量a，在log显示区域打印变量a的值\"><br><ul><br><li><p>Actions(动作)类型：</p><br><p>open：打开浏览器窗口</p><br><p>openWindow：打开新的Firefox浏览器窗口</p><br><p>selectWindow：选择一个处于打开状态的窗口</p><br><p>pause：暂停（单位ms)</p><br><p>type：输入字符</p><br><p>click：点击一个按钮，链接，单选或复选框</p><br><p>refresh：刷新当前页</p><br><p>close：关闭浏览器窗口</p><br></li><br></ul><br><hr><br><p>以上内容非原创，参考《自动化框架实战指南》，命令非全部，仅为常用几种基本命令<br><br><iframe title=\"国宝治愈系列\" src=\"//player.bilibili.com/player.html?aid=31723902&cid=55479363&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"300px\"> </iframe><br></p>\n\n","site":{"data":{}},"excerpt":"","more":"<p></p><h4 id=\"selenium-IDE\"><a href=\"#selenium-IDE\" class=\"headerlink\" title=\"selenium IDE\"></a>selenium IDE</h4><h5 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h5><p>Selenium IDE是Firefox和Chrome浏览器插件，可实现网页操作步骤的录制和回放，可执行简单测试逻辑的自动化测试，可将它的脚本导出为java,python等多种语言格式的程序代码，可将认为操作网页的各种动作直接转化为自动化测试的程序代码，便于编写更加复杂的测试代码。</p><p></p>\n<p></p><h5 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h5><p>优点：小巧简单，易于上手</p><p></p>\n<p>缺点：录制脚本转换为其他语言脚本时有可能出现一些错误，需要人为修改</p><br><p>总之，Selenium IDE工具仅适合用于执行简单逻辑的自动化测试脚本，或通过录制方式导出相关的自动化测试脚本，不适于执行大中型项目的自动化测试程序</p><br><h5 id=\"selenium-IDE脚本的组成\"><a href=\"#selenium-IDE脚本的组成\" class=\"headerlink\" title=\"selenium IDE脚本的组成\"></a>selenium IDE脚本的组成</h5><p>command（命令)、target(目标定位)、value(值)</p><br><h6 id=\"Selenium-IDE的command命令类型：\"><a href=\"#Selenium-IDE的command命令类型：\" class=\"headerlink\" title=\"Selenium IDE的command命令类型：\"></a>Selenium IDE的command命令类型：</h6><ul><br><li>Assertions(断言)类型：</li><br></ul><br><p>waitForText：在测试执行时用来判断某些文本是否显示在界面中。若显示，测试程序继续执行；若<em>等待一段时间后</em>，不显示指定文本，测试用例被设定为<em>执行失败</em>状态，测试脚本<em>继续执行</em>。（option里可设定等待时间，默认30秒）</p><br><p>assertText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试程序继续执行；若不一致，测试用例被设定为<em>执行失败</em>，<em>后续</em>测试脚本<em>不再执行</em>。</p><br><p>verifyText：测试执行时用来判断界面上某些文本是否与预期一致。若一致，测试脚本继续执行；不一致，测试用例被设定为<em>执行失败</em>，测试脚本<em>继续执行</em>。</p><br><ul><br><li>Accessors(存储器)类型：</li><br></ul><br><p>    storeTitle：主要用于将网页的title内容存储到变量中</p><br><p>    echo：主要用于常量字符串和变量字符创的打印输出，特别用于调试脚本时输出脚本的状态</p><br><p>例：命令</p><br><img src=\"/2019/05/10/关于selenium-IDE-回溯/存储器类型命令.png\" title=\"存储title内容到变量a，在log显示区域打印变量a的值\"><br><p>结果</p><br><img src=\"/2019/05/10/关于selenium-IDE-回溯/存储器类型命令结果.png\" title=\"存储title内容到变量a，在log显示区域打印变量a的值\"><br><ul><br><li><p>Actions(动作)类型：</p><br><p>open：打开浏览器窗口</p><br><p>openWindow：打开新的Firefox浏览器窗口</p><br><p>selectWindow：选择一个处于打开状态的窗口</p><br><p>pause：暂停（单位ms)</p><br><p>type：输入字符</p><br><p>click：点击一个按钮，链接，单选或复选框</p><br><p>refresh：刷新当前页</p><br><p>close：关闭浏览器窗口</p><br></li><br></ul><br><hr><br><p>以上内容非原创，参考《自动化框架实战指南》，命令非全部，仅为常用几种基本命令<br><br><iframe title=\"国宝治愈系列\" src=\"//player.bilibili.com/player.html?aid=31723902&cid=55479363&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"300px\"> </iframe><br></p>\n\n"},{"title":"性能测试指标","date":"2019-05-29T09:54:13.000Z","_content":"\n​        一个星期内坐24小时的火车回家，办事，然后又坐24小时的火车回来。很幸运在火车上收到面试邀请，不幸地是当天下火车有点赶，于是面试约到第二天，也就是今天，也是明智。如果没有推后就悲催了，火车晚点。然而以为这样就可以休息一晚，第二天精神抖擞地面试，也是妄想，事情果然是赶在一起的，就像相亲，没有的时候都不来，来的时候肯定同时来俩。晚上就收到房东姐姐的电话要求提前搬，距离我们合同到期还有四个月，房东姐姐语气很诚恳，我竟无言以对，可是看到屋里琐碎的东西，感觉不久前才刚折腾了一次，又要折腾，只想说“oh my god!神啊！救救我吧！......\"\n\n​      于是今天带着一个空大脑去面试了，面试官是很随和的，我是显得很low的，回来吃了份垃圾食品，喝了瓶垃圾饮料，睡了一觉，元气有所恢复。回顾一下性能测试的基本常识，\n\n​       我所知道的性能测试工具，Jmeter, loadrunner\n\n​        Jmeter可以用于接口测试，性能测试，压力测试，web自动化测试，数据库测试，Java程序测试。开源，小巧。\n\n​        loadrunner，性能负载工具，用于模拟高并发负载测试，测试场景搭建，运行，监控以及分析结果。功能强大，收费。\n\n​        Jmeter：接口测试机接口性能压测首选\n\n​        Loadrunner：web性能首选。\n\n​         性能测试指标：\n\n​          **吞吐量(throughput)**：单位时间内处理的客户段请求数量，直接体现软件系统的性能承载能力，通常情况下，吞吐量用\"请求数/秒\"或\"页面数/分钟\"\n\n​         **并发数(concurrency)**：多个同时发生的业务操作\n\n​         **响应时间**：指用户从客户段发起一个请求开始，到客户段接收到从服务器端返回结果整个过程所耗费的时间\n\n​         **点击数**：是衡量web服务器处理能力的一个重要指标，它的统计是客户段向web服务器发了多少次http请求\n\n​         **资源利用率**：是指系统各种资源的使用情况，一般用资源的使用量/总的资源可用量*100%形成资源利用率的数据\n\n​          通常，没有特殊需求的话\n\n​           建议cpu使用率不高于80%（+-5）\n\n​           内存使用率不高于80%\n\n​           磁盘读写时间比不高于90%\n\n**错误率**：指系统在负载情况下，失败交易的概率，错误率=（失败交易数/交易总数)*100%\n\n性能测试步骤：\n\n1. 性能测试需求分析\n\n2. 性能测试计划\n\n3. 性能测试用例\n\n4. 测试脚本编写\n\n5. 测试场景设计\n\n6. 测试场景运行\n\n7. 场景运行监控\n\n8. 运行结果分析\n\n9. 系统性能调优\n\n10. 性能测试报告总结\n\n    Jmeter与Loadrunner都可以做性能测试，所以方式界面什么的有区别，但是殊途同归.......\n\n    Jmeter的核心：*参数化，关联，集合点，断言，数据库*。\n\n    Loadrunner里VuGen的主要操作也是*参数化、关联、集合点、检查点、事务。*\n\n    Jmeter不可以做Ip欺骗，Loadrunner有IP  Wizard。\n\n<video src=\"fly.mp4\" controls=\"controls\">\n</video>\n\n<video src=\"baby.mp4\" controls=\"controls\">\n</video>","source":"_posts/性能测试指标.md","raw":"---\ntitle: 性能测试指标\ndate: 2019-05-29 17:54:13\ntags:\t\n---\n\n​        一个星期内坐24小时的火车回家，办事，然后又坐24小时的火车回来。很幸运在火车上收到面试邀请，不幸地是当天下火车有点赶，于是面试约到第二天，也就是今天，也是明智。如果没有推后就悲催了，火车晚点。然而以为这样就可以休息一晚，第二天精神抖擞地面试，也是妄想，事情果然是赶在一起的，就像相亲，没有的时候都不来，来的时候肯定同时来俩。晚上就收到房东姐姐的电话要求提前搬，距离我们合同到期还有四个月，房东姐姐语气很诚恳，我竟无言以对，可是看到屋里琐碎的东西，感觉不久前才刚折腾了一次，又要折腾，只想说“oh my god!神啊！救救我吧！......\"\n\n​      于是今天带着一个空大脑去面试了，面试官是很随和的，我是显得很low的，回来吃了份垃圾食品，喝了瓶垃圾饮料，睡了一觉，元气有所恢复。回顾一下性能测试的基本常识，\n\n​       我所知道的性能测试工具，Jmeter, loadrunner\n\n​        Jmeter可以用于接口测试，性能测试，压力测试，web自动化测试，数据库测试，Java程序测试。开源，小巧。\n\n​        loadrunner，性能负载工具，用于模拟高并发负载测试，测试场景搭建，运行，监控以及分析结果。功能强大，收费。\n\n​        Jmeter：接口测试机接口性能压测首选\n\n​        Loadrunner：web性能首选。\n\n​         性能测试指标：\n\n​          **吞吐量(throughput)**：单位时间内处理的客户段请求数量，直接体现软件系统的性能承载能力，通常情况下，吞吐量用\"请求数/秒\"或\"页面数/分钟\"\n\n​         **并发数(concurrency)**：多个同时发生的业务操作\n\n​         **响应时间**：指用户从客户段发起一个请求开始，到客户段接收到从服务器端返回结果整个过程所耗费的时间\n\n​         **点击数**：是衡量web服务器处理能力的一个重要指标，它的统计是客户段向web服务器发了多少次http请求\n\n​         **资源利用率**：是指系统各种资源的使用情况，一般用资源的使用量/总的资源可用量*100%形成资源利用率的数据\n\n​          通常，没有特殊需求的话\n\n​           建议cpu使用率不高于80%（+-5）\n\n​           内存使用率不高于80%\n\n​           磁盘读写时间比不高于90%\n\n**错误率**：指系统在负载情况下，失败交易的概率，错误率=（失败交易数/交易总数)*100%\n\n性能测试步骤：\n\n1. 性能测试需求分析\n\n2. 性能测试计划\n\n3. 性能测试用例\n\n4. 测试脚本编写\n\n5. 测试场景设计\n\n6. 测试场景运行\n\n7. 场景运行监控\n\n8. 运行结果分析\n\n9. 系统性能调优\n\n10. 性能测试报告总结\n\n    Jmeter与Loadrunner都可以做性能测试，所以方式界面什么的有区别，但是殊途同归.......\n\n    Jmeter的核心：*参数化，关联，集合点，断言，数据库*。\n\n    Loadrunner里VuGen的主要操作也是*参数化、关联、集合点、检查点、事务。*\n\n    Jmeter不可以做Ip欺骗，Loadrunner有IP  Wizard。\n\n<video src=\"fly.mp4\" controls=\"controls\">\n</video>\n\n<video src=\"baby.mp4\" controls=\"controls\">\n</video>","slug":"性能测试指标","published":1,"updated":"2019-05-31T00:59:07.456Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6me000g5cwpn785zv8g","content":"<p>​        一个星期内坐24小时的火车回家，办事，然后又坐24小时的火车回来。很幸运在火车上收到面试邀请，不幸地是当天下火车有点赶，于是面试约到第二天，也就是今天，也是明智。如果没有推后就悲催了，火车晚点。然而以为这样就可以休息一晚，第二天精神抖擞地面试，也是妄想，事情果然是赶在一起的，就像相亲，没有的时候都不来，来的时候肯定同时来俩。晚上就收到房东姐姐的电话要求提前搬，距离我们合同到期还有四个月，房东姐姐语气很诚恳，我竟无言以对，可是看到屋里琐碎的东西，感觉不久前才刚折腾了一次，又要折腾，只想说“oh my god!神啊！救救我吧！……”</p>\n<p>​      于是今天带着一个空大脑去面试了，面试官是很随和的，我是显得很low的，回来吃了份垃圾食品，喝了瓶垃圾饮料，睡了一觉，元气有所恢复。回顾一下性能测试的基本常识，</p>\n<p>​       我所知道的性能测试工具，Jmeter, loadrunner</p>\n<p>​        Jmeter可以用于接口测试，性能测试，压力测试，web自动化测试，数据库测试，Java程序测试。开源，小巧。</p>\n<p>​        loadrunner，性能负载工具，用于模拟高并发负载测试，测试场景搭建，运行，监控以及分析结果。功能强大，收费。</p>\n<p>​        Jmeter：接口测试机接口性能压测首选</p>\n<p>​        Loadrunner：web性能首选。</p>\n<p>​         性能测试指标：</p>\n<p>​          <strong>吞吐量(throughput)</strong>：单位时间内处理的客户段请求数量，直接体现软件系统的性能承载能力，通常情况下，吞吐量用”请求数/秒”或”页面数/分钟”</p>\n<p>​         <strong>并发数(concurrency)</strong>：多个同时发生的业务操作</p>\n<p>​         <strong>响应时间</strong>：指用户从客户段发起一个请求开始，到客户段接收到从服务器端返回结果整个过程所耗费的时间</p>\n<p>​         <strong>点击数</strong>：是衡量web服务器处理能力的一个重要指标，它的统计是客户段向web服务器发了多少次http请求</p>\n<p>​         <strong>资源利用率</strong>：是指系统各种资源的使用情况，一般用资源的使用量/总的资源可用量*100%形成资源利用率的数据</p>\n<p>​          通常，没有特殊需求的话</p>\n<p>​           建议cpu使用率不高于80%（+-5）</p>\n<p>​           内存使用率不高于80%</p>\n<p>​           磁盘读写时间比不高于90%</p>\n<p><strong>错误率</strong>：指系统在负载情况下，失败交易的概率，错误率=（失败交易数/交易总数)*100%</p>\n<p>性能测试步骤：</p>\n<ol>\n<li><p>性能测试需求分析</p>\n</li>\n<li><p>性能测试计划</p>\n</li>\n<li><p>性能测试用例</p>\n</li>\n<li><p>测试脚本编写</p>\n</li>\n<li><p>测试场景设计</p>\n</li>\n<li><p>测试场景运行</p>\n</li>\n<li><p>场景运行监控</p>\n</li>\n<li><p>运行结果分析</p>\n</li>\n<li><p>系统性能调优</p>\n</li>\n<li><p>性能测试报告总结</p>\n<p>Jmeter与Loadrunner都可以做性能测试，所以方式界面什么的有区别，但是殊途同归…….</p>\n<p>Jmeter的核心：<em>参数化，关联，集合点，断言，数据库</em>。</p>\n<p>Loadrunner里VuGen的主要操作也是<em>参数化、关联、集合点、检查点、事务。</em></p>\n<p>Jmeter不可以做Ip欺骗，Loadrunner有IP  Wizard。</p>\n</li>\n</ol>\n<video src=\"fly.mp4\" controls=\"controls\"><br></video>\n\n<video src=\"baby.mp4\" controls=\"controls\"><br></video>","site":{"data":{}},"excerpt":"","more":"<p>​        一个星期内坐24小时的火车回家，办事，然后又坐24小时的火车回来。很幸运在火车上收到面试邀请，不幸地是当天下火车有点赶，于是面试约到第二天，也就是今天，也是明智。如果没有推后就悲催了，火车晚点。然而以为这样就可以休息一晚，第二天精神抖擞地面试，也是妄想，事情果然是赶在一起的，就像相亲，没有的时候都不来，来的时候肯定同时来俩。晚上就收到房东姐姐的电话要求提前搬，距离我们合同到期还有四个月，房东姐姐语气很诚恳，我竟无言以对，可是看到屋里琐碎的东西，感觉不久前才刚折腾了一次，又要折腾，只想说“oh my god!神啊！救救我吧！……”</p>\n<p>​      于是今天带着一个空大脑去面试了，面试官是很随和的，我是显得很low的，回来吃了份垃圾食品，喝了瓶垃圾饮料，睡了一觉，元气有所恢复。回顾一下性能测试的基本常识，</p>\n<p>​       我所知道的性能测试工具，Jmeter, loadrunner</p>\n<p>​        Jmeter可以用于接口测试，性能测试，压力测试，web自动化测试，数据库测试，Java程序测试。开源，小巧。</p>\n<p>​        loadrunner，性能负载工具，用于模拟高并发负载测试，测试场景搭建，运行，监控以及分析结果。功能强大，收费。</p>\n<p>​        Jmeter：接口测试机接口性能压测首选</p>\n<p>​        Loadrunner：web性能首选。</p>\n<p>​         性能测试指标：</p>\n<p>​          <strong>吞吐量(throughput)</strong>：单位时间内处理的客户段请求数量，直接体现软件系统的性能承载能力，通常情况下，吞吐量用”请求数/秒”或”页面数/分钟”</p>\n<p>​         <strong>并发数(concurrency)</strong>：多个同时发生的业务操作</p>\n<p>​         <strong>响应时间</strong>：指用户从客户段发起一个请求开始，到客户段接收到从服务器端返回结果整个过程所耗费的时间</p>\n<p>​         <strong>点击数</strong>：是衡量web服务器处理能力的一个重要指标，它的统计是客户段向web服务器发了多少次http请求</p>\n<p>​         <strong>资源利用率</strong>：是指系统各种资源的使用情况，一般用资源的使用量/总的资源可用量*100%形成资源利用率的数据</p>\n<p>​          通常，没有特殊需求的话</p>\n<p>​           建议cpu使用率不高于80%（+-5）</p>\n<p>​           内存使用率不高于80%</p>\n<p>​           磁盘读写时间比不高于90%</p>\n<p><strong>错误率</strong>：指系统在负载情况下，失败交易的概率，错误率=（失败交易数/交易总数)*100%</p>\n<p>性能测试步骤：</p>\n<ol>\n<li><p>性能测试需求分析</p>\n</li>\n<li><p>性能测试计划</p>\n</li>\n<li><p>性能测试用例</p>\n</li>\n<li><p>测试脚本编写</p>\n</li>\n<li><p>测试场景设计</p>\n</li>\n<li><p>测试场景运行</p>\n</li>\n<li><p>场景运行监控</p>\n</li>\n<li><p>运行结果分析</p>\n</li>\n<li><p>系统性能调优</p>\n</li>\n<li><p>性能测试报告总结</p>\n<p>Jmeter与Loadrunner都可以做性能测试，所以方式界面什么的有区别，但是殊途同归…….</p>\n<p>Jmeter的核心：<em>参数化，关联，集合点，断言，数据库</em>。</p>\n<p>Loadrunner里VuGen的主要操作也是<em>参数化、关联、集合点、检查点、事务。</em></p>\n<p>Jmeter不可以做Ip欺骗，Loadrunner有IP  Wizard。</p>\n</li>\n</ol>\n<video src=\"fly.mp4\" controls=\"controls\"><br></video>\n\n<video src=\"baby.mp4\" controls=\"controls\"><br></video>"},{"title":"断言的常用方法(追回)","date":"2019-05-10T12:51:01.000Z","_content":"\n\n<p>常用的断言方法，直接上unittest文档截图：</p>\n\n{% asset_img assert_常用.png 常用方法 %}\n\n{% asset_img assert_常用2.png 常用方法 %}\n\n{% asset_img assert_常用3.png 常用方法 %}\n\n废弃的名称\n\n{% asset_img assert_废弃名.png 废弃的名称 %}\n\n\n\n","source":"_posts/断言的常用方法-追回.md","raw":"---\ntitle:  断言的常用方法(追回)\ndate: 2019-05-10 20:51:01\ntags:\n---\n\n\n<p>常用的断言方法，直接上unittest文档截图：</p>\n\n{% asset_img assert_常用.png 常用方法 %}\n\n{% asset_img assert_常用2.png 常用方法 %}\n\n{% asset_img assert_常用3.png 常用方法 %}\n\n废弃的名称\n\n{% asset_img assert_废弃名.png 废弃的名称 %}\n\n\n\n","slug":"断言的常用方法-追回","published":1,"updated":"2019-05-10T14:04:23.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6me000h5cwp2fx60abj","content":"<p>常用的断言方法，直接上unittest文档截图：</p>\n\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_常用.png\" title=\"常用方法\">\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_常用2.png\" title=\"常用方法\">\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_常用3.png\" title=\"常用方法\">\n<p>废弃的名称</p>\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_废弃名.png\" title=\"废弃的名称\">\n","site":{"data":{}},"excerpt":"","more":"<p>常用的断言方法，直接上unittest文档截图：</p>\n\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_常用.png\" title=\"常用方法\">\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_常用2.png\" title=\"常用方法\">\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_常用3.png\" title=\"常用方法\">\n<p>废弃的名称</p>\n<img src=\"/2019/05/10/断言的常用方法-追回/assert_废弃名.png\" title=\"废弃的名称\">\n"},{"title":"最重要的(回溯)","date":"2019-05-10T14:57:09.000Z","_content":"\n<p>        今天偷闲，又看到网上996的讨论，最近网上比较热闹的话题it35岁被淘汰以及it行业996icu，当然也可能是我自己的关注点在上面挪不开，看到这些想到自己最初设立职业目标的状况。</p>\n<p>        高中第一次接触电脑就爱上了电脑，愿望从初中的希望有一屋子书变成了有一间屋子，一台电脑足以。工作后有了工资的第一件事是拿攒了几个月的薪水买台电脑，买完电脑那个月没钱了，怎么过的不记得，但记得装网线是在下个月发工资后。</p>\n<p>        过了这么多年，从事it行业还在为之努力，但我觉得最重要离不开的东西还需要加上因为拥有而被忽略的阳光、空气、水，而电脑要排在这几样的后面。</p>\n<p>        小时候知道这些是我们生存的基础，然而对它们重要性的认知只存在于道理中。阳光曾经是被我忽略彻底的存在，现在我们还在各种防晒，可是当在不见阳光的房子里工作一天伴着月光回家，当一栋栋高层竖起来在路上也很难晒到阳光，当住进了高层采光不好的房子，这一刻突然发现阳光很重要。空气，家乡那个小城是工业城市，前几年最严重的时候，空气整年都是灰蒙蒙的，站到路上等车，马路上的灰青色的汽车尾气肉眼可见，不太灵光的鼻腔里充斥着汽车尾气的味道，被呛得难受，过年的夜晚走在回家的路上觉得呼吸困难深吸了口气，然后更憋了，吸进去的空气满满的炮竹放后的火药味。好在这几年得到了治理，蓝天白云又能看到了。水，应该是最直观的，因为我们一直在交水费，水费也越来越高，我的直观体验，前几年开始，有时候自来水出来的水有种黏黏的触觉。</p>\n<p>        所以，我想表达什么？或许是，现在突然认识到我们这些很容易得到的，被忽略的生存之本的东西，慢慢也在变得不那么唾手可得，我得提醒自己珍惜拥有的；努力，却不要忘本逐末。</p>\n{% asset_img Screenshot_20180315-182005.png 依旧是我喜欢的国宝系列，带给人快乐的小宝贝 %}","source":"_posts/最重要的-回溯.md","raw":"---\ntitle: 最重要的(回溯)\ndate: 2019-05-10 22:57:09\ntags:\n---\n\n<p>        今天偷闲，又看到网上996的讨论，最近网上比较热闹的话题it35岁被淘汰以及it行业996icu，当然也可能是我自己的关注点在上面挪不开，看到这些想到自己最初设立职业目标的状况。</p>\n<p>        高中第一次接触电脑就爱上了电脑，愿望从初中的希望有一屋子书变成了有一间屋子，一台电脑足以。工作后有了工资的第一件事是拿攒了几个月的薪水买台电脑，买完电脑那个月没钱了，怎么过的不记得，但记得装网线是在下个月发工资后。</p>\n<p>        过了这么多年，从事it行业还在为之努力，但我觉得最重要离不开的东西还需要加上因为拥有而被忽略的阳光、空气、水，而电脑要排在这几样的后面。</p>\n<p>        小时候知道这些是我们生存的基础，然而对它们重要性的认知只存在于道理中。阳光曾经是被我忽略彻底的存在，现在我们还在各种防晒，可是当在不见阳光的房子里工作一天伴着月光回家，当一栋栋高层竖起来在路上也很难晒到阳光，当住进了高层采光不好的房子，这一刻突然发现阳光很重要。空气，家乡那个小城是工业城市，前几年最严重的时候，空气整年都是灰蒙蒙的，站到路上等车，马路上的灰青色的汽车尾气肉眼可见，不太灵光的鼻腔里充斥着汽车尾气的味道，被呛得难受，过年的夜晚走在回家的路上觉得呼吸困难深吸了口气，然后更憋了，吸进去的空气满满的炮竹放后的火药味。好在这几年得到了治理，蓝天白云又能看到了。水，应该是最直观的，因为我们一直在交水费，水费也越来越高，我的直观体验，前几年开始，有时候自来水出来的水有种黏黏的触觉。</p>\n<p>        所以，我想表达什么？或许是，现在突然认识到我们这些很容易得到的，被忽略的生存之本的东西，慢慢也在变得不那么唾手可得，我得提醒自己珍惜拥有的；努力，却不要忘本逐末。</p>\n{% asset_img Screenshot_20180315-182005.png 依旧是我喜欢的国宝系列，带给人快乐的小宝贝 %}","slug":"最重要的-回溯","published":1,"updated":"2019-05-10T14:59:04.731Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6mz000i5cwph55on9wr","content":"<p></p><p>        今天偷闲，又看到网上996的讨论，最近网上比较热闹的话题it35岁被淘汰以及it行业996icu，当然也可能是我自己的关注点在上面挪不开，看到这些想到自己最初设立职业目标的状况。</p><p></p>\n<p></p><p>        高中第一次接触电脑就爱上了电脑，愿望从初中的希望有一屋子书变成了有一间屋子，一台电脑足以。工作后有了工资的第一件事是拿攒了几个月的薪水买台电脑，买完电脑那个月没钱了，怎么过的不记得，但记得装网线是在下个月发工资后。</p><p></p>\n<p></p><p>        过了这么多年，从事it行业还在为之努力，但我觉得最重要离不开的东西还需要加上因为拥有而被忽略的阳光、空气、水，而电脑要排在这几样的后面。</p><p></p>\n<p></p><p>        小时候知道这些是我们生存的基础，然而对它们重要性的认知只存在于道理中。阳光曾经是被我忽略彻底的存在，现在我们还在各种防晒，可是当在不见阳光的房子里工作一天伴着月光回家，当一栋栋高层竖起来在路上也很难晒到阳光，当住进了高层采光不好的房子，这一刻突然发现阳光很重要。空气，家乡那个小城是工业城市，前几年最严重的时候，空气整年都是灰蒙蒙的，站到路上等车，马路上的灰青色的汽车尾气肉眼可见，不太灵光的鼻腔里充斥着汽车尾气的味道，被呛得难受，过年的夜晚走在回家的路上觉得呼吸困难深吸了口气，然后更憋了，吸进去的空气满满的炮竹放后的火药味。好在这几年得到了治理，蓝天白云又能看到了。水，应该是最直观的，因为我们一直在交水费，水费也越来越高，我的直观体验，前几年开始，有时候自来水出来的水有种黏黏的触觉。</p><p></p>\n<p></p><p>        所以，我想表达什么？或许是，现在突然认识到我们这些很容易得到的，被忽略的生存之本的东西，慢慢也在变得不那么唾手可得，我得提醒自己珍惜拥有的；努力，却不要忘本逐末。</p><br><img src=\"/2019/05/10/最重要的-回溯/Screenshot_20180315-182005.png\" title=\"依旧是我喜欢的国宝系列，带给人快乐的小宝贝\"><p></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p>        今天偷闲，又看到网上996的讨论，最近网上比较热闹的话题it35岁被淘汰以及it行业996icu，当然也可能是我自己的关注点在上面挪不开，看到这些想到自己最初设立职业目标的状况。</p><p></p>\n<p></p><p>        高中第一次接触电脑就爱上了电脑，愿望从初中的希望有一屋子书变成了有一间屋子，一台电脑足以。工作后有了工资的第一件事是拿攒了几个月的薪水买台电脑，买完电脑那个月没钱了，怎么过的不记得，但记得装网线是在下个月发工资后。</p><p></p>\n<p></p><p>        过了这么多年，从事it行业还在为之努力，但我觉得最重要离不开的东西还需要加上因为拥有而被忽略的阳光、空气、水，而电脑要排在这几样的后面。</p><p></p>\n<p></p><p>        小时候知道这些是我们生存的基础，然而对它们重要性的认知只存在于道理中。阳光曾经是被我忽略彻底的存在，现在我们还在各种防晒，可是当在不见阳光的房子里工作一天伴着月光回家，当一栋栋高层竖起来在路上也很难晒到阳光，当住进了高层采光不好的房子，这一刻突然发现阳光很重要。空气，家乡那个小城是工业城市，前几年最严重的时候，空气整年都是灰蒙蒙的，站到路上等车，马路上的灰青色的汽车尾气肉眼可见，不太灵光的鼻腔里充斥着汽车尾气的味道，被呛得难受，过年的夜晚走在回家的路上觉得呼吸困难深吸了口气，然后更憋了，吸进去的空气满满的炮竹放后的火药味。好在这几年得到了治理，蓝天白云又能看到了。水，应该是最直观的，因为我们一直在交水费，水费也越来越高，我的直观体验，前几年开始，有时候自来水出来的水有种黏黏的触觉。</p><p></p>\n<p></p><p>        所以，我想表达什么？或许是，现在突然认识到我们这些很容易得到的，被忽略的生存之本的东西，慢慢也在变得不那么唾手可得，我得提醒自己珍惜拥有的；努力，却不要忘本逐末。</p><br><img src=\"/2019/05/10/最重要的-回溯/Screenshot_20180315-182005.png\" title=\"依旧是我喜欢的国宝系列，带给人快乐的小宝贝\"><p></p>\n"},{"title":"测试理论(回溯)","date":"2019-05-10T15:07:49.000Z","_content":"\n<p>一直闲赋在家，对前段学习内容进行回顾，希望对找工作有帮助</p>\n<h3 id=\"测试基本理论\"><a href=\"#测试基本理论\" class=\"headerlink\" title=\"测试基本理论\"></a>测试基本理论</h3><h5 id=\"一、软件测试定义\"><a href=\"#一、软件测试定义\" class=\"headerlink\" title=\"一、软件测试定义\"></a>一、软件测试定义</h5><p>指的是通过手工或工具对被测对象进行测试操作，从而验证实际结果与预期之间是否存在差异</p>\n<h5 id=\"二、软件测试的作用\"><a href=\"#二、软件测试的作用\" class=\"headerlink\" title=\"二、软件测试的作用\"></a>二、软件测试的作用</h5><ol>\n<li><p>测试工作可以发现并修复软件中存在的缺陷，从而提高用户对软件的使用信心</p>\n</li>\n<li><p>测试操作可以记录软件使用过程中产生的一些数据，从而为决策者提供依据</p>\n</li>\n<li><p>测试操作可以降低同类型软件开发的风险</p>\n<p>总之，测试的目的就是通过尽可能少的人力、财力、物力来查找并解决软件中存在的缺陷从而降低商业风险</p>\n</li>\n</ol>\n<h5 id=\"三、测试原则\"><a href=\"#三、测试原则\" class=\"headerlink\" title=\"三、测试原则\"></a>三、测试原则</h5><ol>\n<li>测试说明缺陷的存在，而不能说明缺陷不存在</li>\n<li>穷尽测试是不可能的</li>\n<li>测试的尽早介入可以节省时间和成本</li>\n<li>缺陷的群集效应</li>\n<li>杀虫剂悖论</li>\n<li>测试活动依赖于测试周境</li>\n<li>不存在缺陷的谬论</li>\n</ol>\n<h5 id=\"四、开发过程模型\"><a href=\"#四、开发过程模型\" class=\"headerlink\" title=\"四、开发过程模型\"></a>四、开发过程模型</h5><ul>\n<li>瀑布模型：需求分析-&gt;设计-&gt;编码-&gt;实现-&gt;软件测试-&gt;完成</li>\n<li>快速原型模型</li>\n<li>螺旋模型</li>\n</ul>\n<h5 id=\"五、测试模型\"><a href=\"#五、测试模型\" class=\"headerlink\" title=\"五、测试模型\"></a>五、测试模型</h5><ul>\n<li><p>v模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p>\n</li>\n<li><p>w模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;集成-&gt;实施-&gt;交付</p>\n<p>               验收/系统测试设计-&gt;集成测试设计-&gt;单元测试设计-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p>\n<h5 id=\"六、测试分类\"><a href=\"#六、测试分类\" class=\"headerlink\" title=\"六、测试分类\"></a>六、测试分类</h5></li>\n</ul>\n<p>按开发阶段分：</p>\n<ul>\n<li>单元测试：又称模块测试，针对软件设计中的最小单位-程序模块，进行正确性检查的测试。</li>\n<li>集成测试：又叫组装测试，通常在单元测试的基础上，将所有程序模块进行有序的递增的测试，重点测试不同模块的接口组成 部分</li>\n<li>系统测试：系统测试在系统完毕后进行测试，前期主要测试系统的功能是否满足需求，后期主要测试系统运行的性能是否满足需求，以及系统在不同的软硬件环境中的兼容性等</li>\n<li>验收测试：验收测试是部署软件之前的最后一个测试操作。它是技术测试的最后一个阶段，也称为交付测试。验收测试的目的是确保软件准备就绪，按照项目合同、任务书、双方约定的验收依据文档，向软件购买都展示该软件系统满足原始需求。</li>\n</ul>\n<p>     </p>\n<p>关于分类，自己写了一点，百度了一下，发现下面链接的作者博客内容逻辑清晰，简洁明了，故转发</p>\n<p><a href=\"https://www.cnblogs.com/findyou/p/6480411.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/findyou/p/6480411.html</a></p>\n<p><img src=\"E:\\hexo\\source\\_posts\\测试理论\\Screenshot_20180315-181148.png\" alt=\"\"></p>\n{% asset_img Screenshot_20180315-181148.png 上面的图仅为抚慰我在家吃土的点点小郁闷 %}\n\n<p>上面的图仅为抚慰我在家吃土的点点小郁闷</p>","source":"_posts/测试理论-回溯.md","raw":"---\ntitle: 测试理论(回溯)\ndate: 2019-05-10 23:07:49\ntags:\n---\n\n<p>一直闲赋在家，对前段学习内容进行回顾，希望对找工作有帮助</p>\n<h3 id=\"测试基本理论\"><a href=\"#测试基本理论\" class=\"headerlink\" title=\"测试基本理论\"></a>测试基本理论</h3><h5 id=\"一、软件测试定义\"><a href=\"#一、软件测试定义\" class=\"headerlink\" title=\"一、软件测试定义\"></a>一、软件测试定义</h5><p>指的是通过手工或工具对被测对象进行测试操作，从而验证实际结果与预期之间是否存在差异</p>\n<h5 id=\"二、软件测试的作用\"><a href=\"#二、软件测试的作用\" class=\"headerlink\" title=\"二、软件测试的作用\"></a>二、软件测试的作用</h5><ol>\n<li><p>测试工作可以发现并修复软件中存在的缺陷，从而提高用户对软件的使用信心</p>\n</li>\n<li><p>测试操作可以记录软件使用过程中产生的一些数据，从而为决策者提供依据</p>\n</li>\n<li><p>测试操作可以降低同类型软件开发的风险</p>\n<p>总之，测试的目的就是通过尽可能少的人力、财力、物力来查找并解决软件中存在的缺陷从而降低商业风险</p>\n</li>\n</ol>\n<h5 id=\"三、测试原则\"><a href=\"#三、测试原则\" class=\"headerlink\" title=\"三、测试原则\"></a>三、测试原则</h5><ol>\n<li>测试说明缺陷的存在，而不能说明缺陷不存在</li>\n<li>穷尽测试是不可能的</li>\n<li>测试的尽早介入可以节省时间和成本</li>\n<li>缺陷的群集效应</li>\n<li>杀虫剂悖论</li>\n<li>测试活动依赖于测试周境</li>\n<li>不存在缺陷的谬论</li>\n</ol>\n<h5 id=\"四、开发过程模型\"><a href=\"#四、开发过程模型\" class=\"headerlink\" title=\"四、开发过程模型\"></a>四、开发过程模型</h5><ul>\n<li>瀑布模型：需求分析-&gt;设计-&gt;编码-&gt;实现-&gt;软件测试-&gt;完成</li>\n<li>快速原型模型</li>\n<li>螺旋模型</li>\n</ul>\n<h5 id=\"五、测试模型\"><a href=\"#五、测试模型\" class=\"headerlink\" title=\"五、测试模型\"></a>五、测试模型</h5><ul>\n<li><p>v模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p>\n</li>\n<li><p>w模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;集成-&gt;实施-&gt;交付</p>\n<p>               验收/系统测试设计-&gt;集成测试设计-&gt;单元测试设计-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p>\n<h5 id=\"六、测试分类\"><a href=\"#六、测试分类\" class=\"headerlink\" title=\"六、测试分类\"></a>六、测试分类</h5></li>\n</ul>\n<p>按开发阶段分：</p>\n<ul>\n<li>单元测试：又称模块测试，针对软件设计中的最小单位-程序模块，进行正确性检查的测试。</li>\n<li>集成测试：又叫组装测试，通常在单元测试的基础上，将所有程序模块进行有序的递增的测试，重点测试不同模块的接口组成 部分</li>\n<li>系统测试：系统测试在系统完毕后进行测试，前期主要测试系统的功能是否满足需求，后期主要测试系统运行的性能是否满足需求，以及系统在不同的软硬件环境中的兼容性等</li>\n<li>验收测试：验收测试是部署软件之前的最后一个测试操作。它是技术测试的最后一个阶段，也称为交付测试。验收测试的目的是确保软件准备就绪，按照项目合同、任务书、双方约定的验收依据文档，向软件购买都展示该软件系统满足原始需求。</li>\n</ul>\n<p>     </p>\n<p>关于分类，自己写了一点，百度了一下，发现下面链接的作者博客内容逻辑清晰，简洁明了，故转发</p>\n<p><a href=\"https://www.cnblogs.com/findyou/p/6480411.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/findyou/p/6480411.html</a></p>\n<p><img src=\"E:\\hexo\\source\\_posts\\测试理论\\Screenshot_20180315-181148.png\" alt=\"\"></p>\n{% asset_img Screenshot_20180315-181148.png 上面的图仅为抚慰我在家吃土的点点小郁闷 %}\n\n<p>上面的图仅为抚慰我在家吃土的点点小郁闷</p>","slug":"测试理论-回溯","published":1,"updated":"2019-05-10T15:09:37.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6n2000k5cwp6c0o5noe","content":"<p>一直闲赋在家，对前段学习内容进行回顾，希望对找工作有帮助</p><br><h3 id=\"测试基本理论\"><a href=\"#测试基本理论\" class=\"headerlink\" title=\"测试基本理论\"></a>测试基本理论</h3><h5 id=\"一、软件测试定义\"><a href=\"#一、软件测试定义\" class=\"headerlink\" title=\"一、软件测试定义\"></a>一、软件测试定义</h5><p>指的是通过手工或工具对被测对象进行测试操作，从而验证实际结果与预期之间是否存在差异</p><br><h5 id=\"二、软件测试的作用\"><a href=\"#二、软件测试的作用\" class=\"headerlink\" title=\"二、软件测试的作用\"></a>二、软件测试的作用</h5><ol><br><li><p>测试工作可以发现并修复软件中存在的缺陷，从而提高用户对软件的使用信心</p><br></li><br><li><p>测试操作可以记录软件使用过程中产生的一些数据，从而为决策者提供依据</p><br></li><br><li><p>测试操作可以降低同类型软件开发的风险</p><br><p>总之，测试的目的就是通过尽可能少的人力、财力、物力来查找并解决软件中存在的缺陷从而降低商业风险</p><br></li><br></ol><br><h5 id=\"三、测试原则\"><a href=\"#三、测试原则\" class=\"headerlink\" title=\"三、测试原则\"></a>三、测试原则</h5><ol><br><li>测试说明缺陷的存在，而不能说明缺陷不存在</li><br><li>穷尽测试是不可能的</li><br><li>测试的尽早介入可以节省时间和成本</li><br><li>缺陷的群集效应</li><br><li>杀虫剂悖论</li><br><li>测试活动依赖于测试周境</li><br><li>不存在缺陷的谬论</li><br></ol><br><h5 id=\"四、开发过程模型\"><a href=\"#四、开发过程模型\" class=\"headerlink\" title=\"四、开发过程模型\"></a>四、开发过程模型</h5><ul><br><li>瀑布模型：需求分析-&gt;设计-&gt;编码-&gt;实现-&gt;软件测试-&gt;完成</li><br><li>快速原型模型</li><br><li>螺旋模型</li><br></ul><br><h5 id=\"五、测试模型\"><a href=\"#五、测试模型\" class=\"headerlink\" title=\"五、测试模型\"></a>五、测试模型</h5><ul><br><li><p>v模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p><br></li><br><li><p>w模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;集成-&gt;实施-&gt;交付</p><br><p>               验收/系统测试设计-&gt;集成测试设计-&gt;单元测试设计-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p><br><h5 id=\"六、测试分类\"><a href=\"#六、测试分类\" class=\"headerlink\" title=\"六、测试分类\"></a>六、测试分类</h5></li><br></ul><br><p>按开发阶段分：</p><br><ul><br><li>单元测试：又称模块测试，针对软件设计中的最小单位-程序模块，进行正确性检查的测试。</li><br><li>集成测试：又叫组装测试，通常在单元测试的基础上，将所有程序模块进行有序的递增的测试，重点测试不同模块的接口组成 部分</li><br><li>系统测试：系统测试在系统完毕后进行测试，前期主要测试系统的功能是否满足需求，后期主要测试系统运行的性能是否满足需求，以及系统在不同的软硬件环境中的兼容性等</li><br><li>验收测试：验收测试是部署软件之前的最后一个测试操作。它是技术测试的最后一个阶段，也称为交付测试。验收测试的目的是确保软件准备就绪，按照项目合同、任务书、双方约定的验收依据文档，向软件购买都展示该软件系统满足原始需求。</li><br></ul><br><p>     </p><br><p>关于分类，自己写了一点，百度了一下，发现下面链接的作者博客内容逻辑清晰，简洁明了，故转发</p><br><p><a href=\"https://www.cnblogs.com/findyou/p/6480411.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/findyou/p/6480411.html</a></p><br><p><img src=\"E:\\hexo\\source\\_posts\\测试理论\\Screenshot_20180315-181148.png\" alt></p><br><img src=\"/2019/05/10/测试理论-回溯/Screenshot_20180315-181148.png\" title=\"上面的图仅为抚慰我在家吃土的点点小郁闷\"><br><br><p>上面的图仅为抚慰我在家吃土的点点小郁闷</p>","site":{"data":{}},"excerpt":"","more":"<p>一直闲赋在家，对前段学习内容进行回顾，希望对找工作有帮助</p><br><h3 id=\"测试基本理论\"><a href=\"#测试基本理论\" class=\"headerlink\" title=\"测试基本理论\"></a>测试基本理论</h3><h5 id=\"一、软件测试定义\"><a href=\"#一、软件测试定义\" class=\"headerlink\" title=\"一、软件测试定义\"></a>一、软件测试定义</h5><p>指的是通过手工或工具对被测对象进行测试操作，从而验证实际结果与预期之间是否存在差异</p><br><h5 id=\"二、软件测试的作用\"><a href=\"#二、软件测试的作用\" class=\"headerlink\" title=\"二、软件测试的作用\"></a>二、软件测试的作用</h5><ol><br><li><p>测试工作可以发现并修复软件中存在的缺陷，从而提高用户对软件的使用信心</p><br></li><br><li><p>测试操作可以记录软件使用过程中产生的一些数据，从而为决策者提供依据</p><br></li><br><li><p>测试操作可以降低同类型软件开发的风险</p><br><p>总之，测试的目的就是通过尽可能少的人力、财力、物力来查找并解决软件中存在的缺陷从而降低商业风险</p><br></li><br></ol><br><h5 id=\"三、测试原则\"><a href=\"#三、测试原则\" class=\"headerlink\" title=\"三、测试原则\"></a>三、测试原则</h5><ol><br><li>测试说明缺陷的存在，而不能说明缺陷不存在</li><br><li>穷尽测试是不可能的</li><br><li>测试的尽早介入可以节省时间和成本</li><br><li>缺陷的群集效应</li><br><li>杀虫剂悖论</li><br><li>测试活动依赖于测试周境</li><br><li>不存在缺陷的谬论</li><br></ol><br><h5 id=\"四、开发过程模型\"><a href=\"#四、开发过程模型\" class=\"headerlink\" title=\"四、开发过程模型\"></a>四、开发过程模型</h5><ul><br><li>瀑布模型：需求分析-&gt;设计-&gt;编码-&gt;实现-&gt;软件测试-&gt;完成</li><br><li>快速原型模型</li><br><li>螺旋模型</li><br></ul><br><h5 id=\"五、测试模型\"><a href=\"#五、测试模型\" class=\"headerlink\" title=\"五、测试模型\"></a>五、测试模型</h5><ul><br><li><p>v模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p><br></li><br><li><p>w模型：需求分析-&gt;概要设计-&gt;详细设计-&gt;编码-&gt;集成-&gt;实施-&gt;交付</p><br><p>               验收/系统测试设计-&gt;集成测试设计-&gt;单元测试设计-&gt;单元测试-&gt;集成测试-&gt;系统测试-&gt;验收测试</p><br><h5 id=\"六、测试分类\"><a href=\"#六、测试分类\" class=\"headerlink\" title=\"六、测试分类\"></a>六、测试分类</h5></li><br></ul><br><p>按开发阶段分：</p><br><ul><br><li>单元测试：又称模块测试，针对软件设计中的最小单位-程序模块，进行正确性检查的测试。</li><br><li>集成测试：又叫组装测试，通常在单元测试的基础上，将所有程序模块进行有序的递增的测试，重点测试不同模块的接口组成 部分</li><br><li>系统测试：系统测试在系统完毕后进行测试，前期主要测试系统的功能是否满足需求，后期主要测试系统运行的性能是否满足需求，以及系统在不同的软硬件环境中的兼容性等</li><br><li>验收测试：验收测试是部署软件之前的最后一个测试操作。它是技术测试的最后一个阶段，也称为交付测试。验收测试的目的是确保软件准备就绪，按照项目合同、任务书、双方约定的验收依据文档，向软件购买都展示该软件系统满足原始需求。</li><br></ul><br><p>     </p><br><p>关于分类，自己写了一点，百度了一下，发现下面链接的作者博客内容逻辑清晰，简洁明了，故转发</p><br><p><a href=\"https://www.cnblogs.com/findyou/p/6480411.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/findyou/p/6480411.html</a></p><br><p><img src=\"E:\\hexo\\source\\_posts\\测试理论\\Screenshot_20180315-181148.png\" alt></p><br><img src=\"/2019/05/10/测试理论-回溯/Screenshot_20180315-181148.png\" title=\"上面的图仅为抚慰我在家吃土的点点小郁闷\"><br><br><p>上面的图仅为抚慰我在家吃土的点点小郁闷</p>"},{"title":"测试理论2(回溯)","date":"2019-05-10T15:00:07.000Z","_content":"\n<h5 id=\"一、测试活动和测试任务\"><a href=\"#一、测试活动和测试任务\" class=\"headerlink\" title=\"一、测试活动和测试任务\"></a>一、测试活动和测试任务</h5><p>测试过程由以下活动组成:（源自istqb基础级大纲2018版)</p>\n<ul>\n<li>测试计划</li>\n<li>测试监督与控制</li>\n<li>测试分析</li>\n<li>测试设计</li>\n<li>测试实施</li>\n<li>测试执行</li>\n<li>测试结束</li>\n</ul>\n<p>项目测试流程</p>\n<ul>\n<li><p>搭建测试环境</p>\n</li>\n<li><p>快速熟悉项目</p>\n</li>\n<li><p>编写测试计划</p>\n</li>\n<li><p>编写测试方案、</p>\n</li>\n<li><p>设计、编写、执行测试用例</p>\n</li>\n<li><p>生成测试报告</p>\n</li>\n</ul>\n<h5 id=\"二、测试用例\"><a href=\"#二、测试用例\" class=\"headerlink\" title=\"二、测试用例\"></a>二、测试用例</h5><p>定义：测试用例（Test Case)是为测试产品是否满足某个需求而设计的一组数据，包括测试输入、执行条件、执行步骤和预期结果等内容，它是指导测试工作进行的依据</p>\n<p>测试用例包含要素：用例编号、测试模块、用例标题、用例级别、测试条件、测试输入、操作步骤、预期结果等</p>\n<h5 id=\"三、测试用例设计方法\"><a href=\"#三、测试用例设计方法\" class=\"headerlink\" title=\"三、测试用例设计方法\"></a>三、测试用例设计方法</h5><ul>\n<li>等价类划分法</li>\n<li>边界值法</li>\n<li>判定表法</li>\n<li>因果图法</li>\n<li>场景法</li>\n<li>流程图法</li>\n<li>错误推测法</li>\n<li>正交实验法</li>\n</ul>\n{% asset_img IMG_20180315_230714.png 上面的图仅为抚慰我在家吃土的点点小郁闷 %}","source":"_posts/测试理论2-回溯.md","raw":"---\ntitle: 测试理论2(回溯)\ndate: 2019-05-10 23:00:07\ntags:\n---\n\n<h5 id=\"一、测试活动和测试任务\"><a href=\"#一、测试活动和测试任务\" class=\"headerlink\" title=\"一、测试活动和测试任务\"></a>一、测试活动和测试任务</h5><p>测试过程由以下活动组成:（源自istqb基础级大纲2018版)</p>\n<ul>\n<li>测试计划</li>\n<li>测试监督与控制</li>\n<li>测试分析</li>\n<li>测试设计</li>\n<li>测试实施</li>\n<li>测试执行</li>\n<li>测试结束</li>\n</ul>\n<p>项目测试流程</p>\n<ul>\n<li><p>搭建测试环境</p>\n</li>\n<li><p>快速熟悉项目</p>\n</li>\n<li><p>编写测试计划</p>\n</li>\n<li><p>编写测试方案、</p>\n</li>\n<li><p>设计、编写、执行测试用例</p>\n</li>\n<li><p>生成测试报告</p>\n</li>\n</ul>\n<h5 id=\"二、测试用例\"><a href=\"#二、测试用例\" class=\"headerlink\" title=\"二、测试用例\"></a>二、测试用例</h5><p>定义：测试用例（Test Case)是为测试产品是否满足某个需求而设计的一组数据，包括测试输入、执行条件、执行步骤和预期结果等内容，它是指导测试工作进行的依据</p>\n<p>测试用例包含要素：用例编号、测试模块、用例标题、用例级别、测试条件、测试输入、操作步骤、预期结果等</p>\n<h5 id=\"三、测试用例设计方法\"><a href=\"#三、测试用例设计方法\" class=\"headerlink\" title=\"三、测试用例设计方法\"></a>三、测试用例设计方法</h5><ul>\n<li>等价类划分法</li>\n<li>边界值法</li>\n<li>判定表法</li>\n<li>因果图法</li>\n<li>场景法</li>\n<li>流程图法</li>\n<li>错误推测法</li>\n<li>正交实验法</li>\n</ul>\n{% asset_img IMG_20180315_230714.png 上面的图仅为抚慰我在家吃土的点点小郁闷 %}","slug":"测试理论2-回溯","published":1,"updated":"2019-05-10T15:01:37.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6n3000l5cwpqposvq8z","content":"<p></p><h5 id=\"一、测试活动和测试任务\"><a href=\"#一、测试活动和测试任务\" class=\"headerlink\" title=\"一、测试活动和测试任务\"></a>一、测试活动和测试任务</h5><p>测试过程由以下活动组成:（源自istqb基础级大纲2018版)</p><p></p>\n<p><ul></ul></p>\n<p><li>测试计划</li></p>\n<p><li>测试监督与控制</li></p>\n<p><li>测试分析</li></p>\n<p><li>测试设计</li></p>\n<p><li>测试实施</li></p>\n<p><li>测试执行</li></p>\n<p><li>测试结束</li><br></p>\n<p></p><p>项目测试流程</p><p></p>\n<p><ul></ul></p>\n<p><li><p>搭建测试环境</p><br></li></p>\n<p><li><p>快速熟悉项目</p><br></li></p>\n<p><li><p>编写测试计划</p><br></li></p>\n<p><li><p>编写测试方案、</p><br></li></p>\n<p><li><p>设计、编写、执行测试用例</p><br></li></p>\n<p><li><p>生成测试报告</p><br></li><br></p>\n<p></p><h5 id=\"二、测试用例\"><a href=\"#二、测试用例\" class=\"headerlink\" title=\"二、测试用例\"></a>二、测试用例</h5><p>定义：测试用例（Test Case)是为测试产品是否满足某个需求而设计的一组数据，包括测试输入、执行条件、执行步骤和预期结果等内容，它是指导测试工作进行的依据</p><p></p>\n<p></p><p>测试用例包含要素：用例编号、测试模块、用例标题、用例级别、测试条件、测试输入、操作步骤、预期结果等</p><p></p>\n<p></p><h5 id=\"三、测试用例设计方法\"><a href=\"#三、测试用例设计方法\" class=\"headerlink\" title=\"三、测试用例设计方法\"></a>三、测试用例设计方法</h5><ul><p></p>\n<p><li>等价类划分法</li></p>\n<p><li>边界值法</li></p>\n<p><li>判定表法</li></p>\n<p><li>因果图法</li></p>\n<p><li>场景法</li></p>\n<p><li>流程图法</li></p>\n<p><li>错误推测法</li></p>\n<p><li>正交实验法</li><br></p></ul><br><img src=\"/2019/05/10/测试理论2-回溯/IMG_20180315_230714.png\" title=\"上面的图仅为抚慰我在家吃土的点点小郁闷\"><p></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><h5 id=\"一、测试活动和测试任务\"><a href=\"#一、测试活动和测试任务\" class=\"headerlink\" title=\"一、测试活动和测试任务\"></a>一、测试活动和测试任务</h5><p>测试过程由以下活动组成:（源自istqb基础级大纲2018版)</p><p></p>\n<p><ul></ul></p>\n<p><li>测试计划</li></p>\n<p><li>测试监督与控制</li></p>\n<p><li>测试分析</li></p>\n<p><li>测试设计</li></p>\n<p><li>测试实施</li></p>\n<p><li>测试执行</li></p>\n<p><li>测试结束</li><br></p>\n<p></p><p>项目测试流程</p><p></p>\n<p><ul></ul></p>\n<p><li><p>搭建测试环境</p><br></li></p>\n<p><li><p>快速熟悉项目</p><br></li></p>\n<p><li><p>编写测试计划</p><br></li></p>\n<p><li><p>编写测试方案、</p><br></li></p>\n<p><li><p>设计、编写、执行测试用例</p><br></li></p>\n<p><li><p>生成测试报告</p><br></li><br></p>\n<p></p><h5 id=\"二、测试用例\"><a href=\"#二、测试用例\" class=\"headerlink\" title=\"二、测试用例\"></a>二、测试用例</h5><p>定义：测试用例（Test Case)是为测试产品是否满足某个需求而设计的一组数据，包括测试输入、执行条件、执行步骤和预期结果等内容，它是指导测试工作进行的依据</p><p></p>\n<p></p><p>测试用例包含要素：用例编号、测试模块、用例标题、用例级别、测试条件、测试输入、操作步骤、预期结果等</p><p></p>\n<p></p><h5 id=\"三、测试用例设计方法\"><a href=\"#三、测试用例设计方法\" class=\"headerlink\" title=\"三、测试用例设计方法\"></a>三、测试用例设计方法</h5><ul><p></p>\n<p><li>等价类划分法</li></p>\n<p><li>边界值法</li></p>\n<p><li>判定表法</li></p>\n<p><li>因果图法</li></p>\n<p><li>场景法</li></p>\n<p><li>流程图法</li></p>\n<p><li>错误推测法</li></p>\n<p><li>正交实验法</li><br></p></ul><br><img src=\"/2019/05/10/测试理论2-回溯/IMG_20180315_230714.png\" title=\"上面的图仅为抚慰我在家吃土的点点小郁闷\"><p></p>\n"},{"title":"测试理论3(回溯)","date":"2019-05-10T14:50:41.000Z","_content":"\n\n\n\n\n    <div id=\"post-time\" datetime=\"2019-04-16T09:51:40.000Z\">\n      2019-04-16\n    </div>\n\n</h2>\n\n<h5 id=\"缺陷报告\"><a href=\"#缺陷报告\" class=\"headerlink\" title=\"缺陷报告\"></a>缺陷报告</h5><p>主要包含内容：ID，模块，严重程度，优先级，状态，缺陷标题等</p>\n\n<h5 id=\"缺陷的状态\"><a href=\"#缺陷的状态\" class=\"headerlink\" title=\"缺陷的状态\"></a>缺陷的状态</h5><p>1.submitted：已提交的缺陷</p>\n<p>2.open：确认“提交的缺陷”，等待处理</p>\n<p>3.resolved：缺陷被修复</p>\n<p>4.rejected：拒绝“提交的缺陷”，不需要修复或不是缺陷</p>\n<p>5.closed：确认被修复的缺陷，将其关闭</p>\n<p>6.later：需要延后处理的缺陷</p>\n\n\n<iframe src=\"//player.bilibili.com/player.html?aid=27537280&cid=47509699&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"285\"> </iframe>","source":"_posts/测试理论3-回溯.md","raw":"---\ntitle: 测试理论3(回溯)\ndate: 2019-05-10 22:50:41\ntags:\n---\n\n\n\n\n\n    <div id=\"post-time\" datetime=\"2019-04-16T09:51:40.000Z\">\n      2019-04-16\n    </div>\n\n</h2>\n\n<h5 id=\"缺陷报告\"><a href=\"#缺陷报告\" class=\"headerlink\" title=\"缺陷报告\"></a>缺陷报告</h5><p>主要包含内容：ID，模块，严重程度，优先级，状态，缺陷标题等</p>\n\n<h5 id=\"缺陷的状态\"><a href=\"#缺陷的状态\" class=\"headerlink\" title=\"缺陷的状态\"></a>缺陷的状态</h5><p>1.submitted：已提交的缺陷</p>\n<p>2.open：确认“提交的缺陷”，等待处理</p>\n<p>3.resolved：缺陷被修复</p>\n<p>4.rejected：拒绝“提交的缺陷”，不需要修复或不是缺陷</p>\n<p>5.closed：确认被修复的缺陷，将其关闭</p>\n<p>6.later：需要延后处理的缺陷</p>\n\n\n<iframe src=\"//player.bilibili.com/player.html?aid=27537280&cid=47509699&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"285\"> </iframe>","slug":"测试理论3-回溯","published":1,"updated":"2019-05-10T14:54:23.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6n4000m5cwpio0mdczr","content":"<pre><code>&lt;div id=&quot;post-time&quot; datetime=&quot;2019-04-16T09:51:40.000Z&quot;&gt;\n  2019-04-16\n&lt;/div&gt;\n</code></pre><p></p>\n<p></p><h5 id=\"缺陷报告\"><a href=\"#缺陷报告\" class=\"headerlink\" title=\"缺陷报告\"></a>缺陷报告</h5><p>主要包含内容：ID，模块，严重程度，优先级，状态，缺陷标题等</p><p></p>\n<p></p><h5 id=\"缺陷的状态\"><a href=\"#缺陷的状态\" class=\"headerlink\" title=\"缺陷的状态\"></a>缺陷的状态</h5><p>1.submitted：已提交的缺陷</p><p></p>\n<p>2.open：确认“提交的缺陷”，等待处理</p><br><p>3.resolved：缺陷被修复</p><br><p>4.rejected：拒绝“提交的缺陷”，不需要修复或不是缺陷</p><br><p>5.closed：确认被修复的缺陷，将其关闭</p><br><p>6.later：需要延后处理的缺陷</p>\n\n\n<iframe src=\"//player.bilibili.com/player.html?aid=27537280&cid=47509699&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"285\"> </iframe>","site":{"data":{}},"excerpt":"","more":"<pre><code>&lt;div id=&quot;post-time&quot; datetime=&quot;2019-04-16T09:51:40.000Z&quot;&gt;\n  2019-04-16\n&lt;/div&gt;\n</code></pre><p></p>\n<p></p><h5 id=\"缺陷报告\"><a href=\"#缺陷报告\" class=\"headerlink\" title=\"缺陷报告\"></a>缺陷报告</h5><p>主要包含内容：ID，模块，严重程度，优先级，状态，缺陷标题等</p><p></p>\n<p></p><h5 id=\"缺陷的状态\"><a href=\"#缺陷的状态\" class=\"headerlink\" title=\"缺陷的状态\"></a>缺陷的状态</h5><p>1.submitted：已提交的缺陷</p><p></p>\n<p>2.open：确认“提交的缺陷”，等待处理</p><br><p>3.resolved：缺陷被修复</p><br><p>4.rejected：拒绝“提交的缺陷”，不需要修复或不是缺陷</p><br><p>5.closed：确认被修复的缺陷，将其关闭</p><br><p>6.later：需要延后处理的缺陷</p>\n\n\n<iframe src=\"//player.bilibili.com/player.html?aid=27537280&cid=47509699&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" height=\"285\"> </iframe>"},{"title":"着急下班的熊宝(追回)","date":"2019-05-10T12:47:48.000Z","_content":"\n<video width=\"320\" height=\"240\" controls>\n<source src=\"Video_2019-04-28.mp4\" type=\"video/mp4\"></video>\n\n这天只有一只着急下班的熊宝","source":"_posts/着急下班的熊宝-追回.md","raw":"---\ntitle: 着急下班的熊宝(追回)\ndate: 2019-05-10 20:47:48\ntags:\n---\n\n<video width=\"320\" height=\"240\" controls>\n<source src=\"Video_2019-04-28.mp4\" type=\"video/mp4\"></video>\n\n这天只有一只着急下班的熊宝","slug":"着急下班的熊宝-追回","published":1,"updated":"2019-08-24T01:51:26.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6n5000n5cwpi0mexg4l","content":"<video width=\"320\" height=\"240\" controls><br><source src=\"Video_2019-04-28.mp4\" type=\"video/mp4\"></video>\n\n<p>这天只有一只着急下班的熊宝</p>\n","site":{"data":{}},"excerpt":"","more":"<video width=\"320\" height=\"240\" controls><br><source src=\"Video_2019-04-28.mp4\" type=\"video/mp4\"></video>\n\n<p>这天只有一只着急下班的熊宝</p>\n"},{"title":"简单的自动求职脚本(追回)","date":"2019-05-10T11:28:58.000Z","_content":"\n<p>写了一个简单的傻瓜式自动投简历脚本，不会筛选，也没有做框架，就一个流程下来了，为了投简历偷点懒，顺便再重新熟悉熟悉unittest基本功能点，毕竟比沈腾也小不了几岁。</p>\n\n\n\n```python\nimport time\nimport unittest\nfrom selenium import webdriver\n\n\nclass Test_jobSearch(unittest.TestCase):\n    def setUp(self):\n        # 实例化驱动，打开网页\n        self.driver = webdriver.Edge()\n        self.driver.get(\"https://www.zhaopin.com/\")\n        self.driver.implicitly_wait(30)\n\n    def test_searchjob(self):\n        # 点击取消警示信息\n        self.driver.find_element_by_xpath(\"//div[@class='risk-warning__content']/button\").click()\n        # 确定是否登录\n        self.ele = self.driver.find_element_by_xpath(\"//span[@class='zp-userinfo']\")\n        if self.ele.text == \"xxx\":\n            # 确认登录，定位搜索框，搜索招聘信息\n            self.driver.find_element_by_class_name(\"zp-search__input\").clear()\n            self.driver.find_element_by_class_name(\"zp-search__input\").send_keys(\"软件测试\")\n            self.driver.find_element_by_css_selector(\"a.zp-search__btn.zp-search__btn--blue\").click()\n            # self.driver.find_element_by_class_name(\"zp-search__btn zp-search__btn--blue\").click()\n            # self.driver.close()\n        # 进入招聘列表页\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        time.sleep(3)\n        self.ele_city = self.driver.find_element_by_class_name(\"current-city__name\").text\n        # print(self.ele_city)\n        # 确定应聘城市\n        try:\n            self.assertEqual(self.ele_city, \"深圳\")\n        except:\n            # 不是所应聘城市，修改应聘城市信息\n            self.driver.find_element_by_class_name(\"current-city__name\").click()\n            time.sleep(5)\n            self.driver.find_element_by_link_text(\"深圳\")\n        # 选择最新发布信息\n        self.driver.find_element_by_link_text(\"最新发布\").click()\n        # 下滚滚动条\n        js = \"window.scrollTo(0,1000)\"\n        self.driver.execute_script(js)\n        time.sleep(5)\n        # 应聘职位全选，\n        self.driver.find_element_by_class_name(\"pagination__check__content__checkbox\").click()\n        time.sleep(3)\n        # 点击求职申请\n        self.driver.find_elements_by_xpath(\"//button[@class='a-button a--bordered a--filled' and text()='申请职位 90']\")[\n            0].click()\n        time.sleep(5)\n        self.driver.find_element_by_css_selector(\"button.a-button.a--bordered.a--filled\")\n        # 完成退出浏览器\n        self.driver.quit()\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n\n\n<p>上面的代码排版也太……回头再整理吧，发布以后看到的排版还好，就这样吧</p>\n<p>说明：</p>\n<ol>\n<li>仅在Edge下正常运行，前提是需要曾经登录过，不用再输用户名密码</li>\n<li>在Firefox下，需要登录，因为验证码问题未解决，故登录后脚本停止运行</li>\n<li>Chrome下，本机运行特别慢，正在找合适的浏览器跟驱动</li>\n<li>IE下，搜索元素定位不到，所以……</li>\n</ol\n\n\n\n\n{% asset_img 640.gif 小可爱 %}\n\n\n","source":"_posts/简单的自动求职脚本(追回).md","raw":"---\ntitle: 简单的自动求职脚本(追回)\ndate: 2019-05-10 19:28:58\ntags:\n---\n\n<p>写了一个简单的傻瓜式自动投简历脚本，不会筛选，也没有做框架，就一个流程下来了，为了投简历偷点懒，顺便再重新熟悉熟悉unittest基本功能点，毕竟比沈腾也小不了几岁。</p>\n\n\n\n```python\nimport time\nimport unittest\nfrom selenium import webdriver\n\n\nclass Test_jobSearch(unittest.TestCase):\n    def setUp(self):\n        # 实例化驱动，打开网页\n        self.driver = webdriver.Edge()\n        self.driver.get(\"https://www.zhaopin.com/\")\n        self.driver.implicitly_wait(30)\n\n    def test_searchjob(self):\n        # 点击取消警示信息\n        self.driver.find_element_by_xpath(\"//div[@class='risk-warning__content']/button\").click()\n        # 确定是否登录\n        self.ele = self.driver.find_element_by_xpath(\"//span[@class='zp-userinfo']\")\n        if self.ele.text == \"xxx\":\n            # 确认登录，定位搜索框，搜索招聘信息\n            self.driver.find_element_by_class_name(\"zp-search__input\").clear()\n            self.driver.find_element_by_class_name(\"zp-search__input\").send_keys(\"软件测试\")\n            self.driver.find_element_by_css_selector(\"a.zp-search__btn.zp-search__btn--blue\").click()\n            # self.driver.find_element_by_class_name(\"zp-search__btn zp-search__btn--blue\").click()\n            # self.driver.close()\n        # 进入招聘列表页\n        self.driver.switch_to.window(self.driver.window_handles[1])\n        time.sleep(3)\n        self.ele_city = self.driver.find_element_by_class_name(\"current-city__name\").text\n        # print(self.ele_city)\n        # 确定应聘城市\n        try:\n            self.assertEqual(self.ele_city, \"深圳\")\n        except:\n            # 不是所应聘城市，修改应聘城市信息\n            self.driver.find_element_by_class_name(\"current-city__name\").click()\n            time.sleep(5)\n            self.driver.find_element_by_link_text(\"深圳\")\n        # 选择最新发布信息\n        self.driver.find_element_by_link_text(\"最新发布\").click()\n        # 下滚滚动条\n        js = \"window.scrollTo(0,1000)\"\n        self.driver.execute_script(js)\n        time.sleep(5)\n        # 应聘职位全选，\n        self.driver.find_element_by_class_name(\"pagination__check__content__checkbox\").click()\n        time.sleep(3)\n        # 点击求职申请\n        self.driver.find_elements_by_xpath(\"//button[@class='a-button a--bordered a--filled' and text()='申请职位 90']\")[\n            0].click()\n        time.sleep(5)\n        self.driver.find_element_by_css_selector(\"button.a-button.a--bordered.a--filled\")\n        # 完成退出浏览器\n        self.driver.quit()\n\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\n\n\n<p>上面的代码排版也太……回头再整理吧，发布以后看到的排版还好，就这样吧</p>\n<p>说明：</p>\n<ol>\n<li>仅在Edge下正常运行，前提是需要曾经登录过，不用再输用户名密码</li>\n<li>在Firefox下，需要登录，因为验证码问题未解决，故登录后脚本停止运行</li>\n<li>Chrome下，本机运行特别慢，正在找合适的浏览器跟驱动</li>\n<li>IE下，搜索元素定位不到，所以……</li>\n</ol\n\n\n\n\n{% asset_img 640.gif 小可爱 %}\n\n\n","slug":"简单的自动求职脚本(追回)","published":1,"updated":"2019-10-30T02:41:57.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6n8000o5cwpytzktu2l","content":"<p>写了一个简单的傻瓜式自动投简历脚本，不会筛选，也没有做框架，就一个流程下来了，为了投简历偷点懒，顺便再重新熟悉熟悉unittest基本功能点，毕竟比沈腾也小不了几岁。</p>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test_jobSearch</span><span class=\"params\">(unittest.TestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 实例化驱动，打开网页</span></span><br><span class=\"line\">        self.driver = webdriver.Edge()</span><br><span class=\"line\">        self.driver.get(<span class=\"string\">\"https://www.zhaopin.com/\"</span>)</span><br><span class=\"line\">        self.driver.implicitly_wait(<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_searchjob</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 点击取消警示信息</span></span><br><span class=\"line\">        self.driver.find_element_by_xpath(<span class=\"string\">\"//div[@class='risk-warning__content']/button\"</span>).click()</span><br><span class=\"line\">        <span class=\"comment\"># 确定是否登录</span></span><br><span class=\"line\">        self.ele = self.driver.find_element_by_xpath(<span class=\"string\">\"//span[@class='zp-userinfo']\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.ele.text == <span class=\"string\">\"xxx\"</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 确认登录，定位搜索框，搜索招聘信息</span></span><br><span class=\"line\">            self.driver.find_element_by_class_name(<span class=\"string\">\"zp-search__input\"</span>).clear()</span><br><span class=\"line\">            self.driver.find_element_by_class_name(<span class=\"string\">\"zp-search__input\"</span>).send_keys(<span class=\"string\">\"软件测试\"</span>)</span><br><span class=\"line\">            self.driver.find_element_by_css_selector(<span class=\"string\">\"a.zp-search__btn.zp-search__btn--blue\"</span>).click()</span><br><span class=\"line\">            <span class=\"comment\"># self.driver.find_element_by_class_name(\"zp-search__btn zp-search__btn--blue\").click()</span></span><br><span class=\"line\">            <span class=\"comment\"># self.driver.close()</span></span><br><span class=\"line\">        <span class=\"comment\"># 进入招聘列表页</span></span><br><span class=\"line\">        self.driver.switch_to.window(self.driver.window_handles[<span class=\"number\">1</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.ele_city = self.driver.find_element_by_class_name(<span class=\"string\">\"current-city__name\"</span>).text</span><br><span class=\"line\">        <span class=\"comment\"># print(self.ele_city)</span></span><br><span class=\"line\">        <span class=\"comment\"># 确定应聘城市</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.assertEqual(self.ele_city, <span class=\"string\">\"深圳\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 不是所应聘城市，修改应聘城市信息</span></span><br><span class=\"line\">            self.driver.find_element_by_class_name(<span class=\"string\">\"current-city__name\"</span>).click()</span><br><span class=\"line\">            time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">            self.driver.find_element_by_link_text(<span class=\"string\">\"深圳\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 选择最新发布信息</span></span><br><span class=\"line\">        self.driver.find_element_by_link_text(<span class=\"string\">\"最新发布\"</span>).click()</span><br><span class=\"line\">        <span class=\"comment\"># 下滚滚动条</span></span><br><span class=\"line\">        js = <span class=\"string\">\"window.scrollTo(0,1000)\"</span></span><br><span class=\"line\">        self.driver.execute_script(js)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 应聘职位全选，</span></span><br><span class=\"line\">        self.driver.find_element_by_class_name(<span class=\"string\">\"pagination__check__content__checkbox\"</span>).click()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 点击求职申请</span></span><br><span class=\"line\">        self.driver.find_elements_by_xpath(<span class=\"string\">\"//button[@class='a-button a--bordered a--filled' and text()='申请职位 90']\"</span>)[</span><br><span class=\"line\">            <span class=\"number\">0</span>].click()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        self.driver.find_element_by_css_selector(<span class=\"string\">\"button.a-button.a--bordered.a--filled\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 完成退出浏览器</span></span><br><span class=\"line\">        self.driver.quit()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<p></p><p>上面的代码排版也太……回头再整理吧，发布以后看到的排版还好，就这样吧</p><p></p>\n<p></p><p>说明：</p><p></p>\n<p><ol></ol></p>\n<p><li>仅在Edge下正常运行，前提是需要曾经登录过，不用再输用户名密码</li></p>\n<p><li>在Firefox下，需要登录，因为验证码问题未解决，故登录后脚本停止运行</li></p>\n<p><li>Chrome下，本机运行特别慢，正在找合适的浏览器跟驱动</li></p>\n<p><li>IE下，搜索元素定位不到，所以……</li><br>&lt;/ol</p>\n<img src=\"/2019/05/10/简单的自动求职脚本(追回)/640.gif\" title=\"小可爱\">\n","site":{"data":{}},"excerpt":"","more":"<p>写了一个简单的傻瓜式自动投简历脚本，不会筛选，也没有做框架，就一个流程下来了，为了投简历偷点懒，顺便再重新熟悉熟悉unittest基本功能点，毕竟比沈腾也小不了几岁。</p>\n\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test_jobSearch</span><span class=\"params\">(unittest.TestCase)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 实例化驱动，打开网页</span></span><br><span class=\"line\">        self.driver = webdriver.Edge()</span><br><span class=\"line\">        self.driver.get(<span class=\"string\">\"https://www.zhaopin.com/\"</span>)</span><br><span class=\"line\">        self.driver.implicitly_wait(<span class=\"number\">30</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_searchjob</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 点击取消警示信息</span></span><br><span class=\"line\">        self.driver.find_element_by_xpath(<span class=\"string\">\"//div[@class='risk-warning__content']/button\"</span>).click()</span><br><span class=\"line\">        <span class=\"comment\"># 确定是否登录</span></span><br><span class=\"line\">        self.ele = self.driver.find_element_by_xpath(<span class=\"string\">\"//span[@class='zp-userinfo']\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.ele.text == <span class=\"string\">\"xxx\"</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 确认登录，定位搜索框，搜索招聘信息</span></span><br><span class=\"line\">            self.driver.find_element_by_class_name(<span class=\"string\">\"zp-search__input\"</span>).clear()</span><br><span class=\"line\">            self.driver.find_element_by_class_name(<span class=\"string\">\"zp-search__input\"</span>).send_keys(<span class=\"string\">\"软件测试\"</span>)</span><br><span class=\"line\">            self.driver.find_element_by_css_selector(<span class=\"string\">\"a.zp-search__btn.zp-search__btn--blue\"</span>).click()</span><br><span class=\"line\">            <span class=\"comment\"># self.driver.find_element_by_class_name(\"zp-search__btn zp-search__btn--blue\").click()</span></span><br><span class=\"line\">            <span class=\"comment\"># self.driver.close()</span></span><br><span class=\"line\">        <span class=\"comment\"># 进入招聘列表页</span></span><br><span class=\"line\">        self.driver.switch_to.window(self.driver.window_handles[<span class=\"number\">1</span>])</span><br><span class=\"line\">        time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">        self.ele_city = self.driver.find_element_by_class_name(<span class=\"string\">\"current-city__name\"</span>).text</span><br><span class=\"line\">        <span class=\"comment\"># print(self.ele_city)</span></span><br><span class=\"line\">        <span class=\"comment\"># 确定应聘城市</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            self.assertEqual(self.ele_city, <span class=\"string\">\"深圳\"</span>)</span><br><span class=\"line\">        <span class=\"keyword\">except</span>:</span><br><span class=\"line\">            <span class=\"comment\"># 不是所应聘城市，修改应聘城市信息</span></span><br><span class=\"line\">            self.driver.find_element_by_class_name(<span class=\"string\">\"current-city__name\"</span>).click()</span><br><span class=\"line\">            time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">            self.driver.find_element_by_link_text(<span class=\"string\">\"深圳\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 选择最新发布信息</span></span><br><span class=\"line\">        self.driver.find_element_by_link_text(<span class=\"string\">\"最新发布\"</span>).click()</span><br><span class=\"line\">        <span class=\"comment\"># 下滚滚动条</span></span><br><span class=\"line\">        js = <span class=\"string\">\"window.scrollTo(0,1000)\"</span></span><br><span class=\"line\">        self.driver.execute_script(js)</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 应聘职位全选，</span></span><br><span class=\"line\">        self.driver.find_element_by_class_name(<span class=\"string\">\"pagination__check__content__checkbox\"</span>).click()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">3</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 点击求职申请</span></span><br><span class=\"line\">        self.driver.find_elements_by_xpath(<span class=\"string\">\"//button[@class='a-button a--bordered a--filled' and text()='申请职位 90']\"</span>)[</span><br><span class=\"line\">            <span class=\"number\">0</span>].click()</span><br><span class=\"line\">        time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">        self.driver.find_element_by_css_selector(<span class=\"string\">\"button.a-button.a--bordered.a--filled\"</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 完成退出浏览器</span></span><br><span class=\"line\">        self.driver.quit()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    unittest.main()</span><br></pre></td></tr></table></figure>\n<p></p><p>上面的代码排版也太……回头再整理吧，发布以后看到的排版还好，就这样吧</p><p></p>\n<p></p><p>说明：</p><p></p>\n<p><ol></ol></p>\n<p><li>仅在Edge下正常运行，前提是需要曾经登录过，不用再输用户名密码</li></p>\n<p><li>在Firefox下，需要登录，因为验证码问题未解决，故登录后脚本停止运行</li></p>\n<p><li>Chrome下，本机运行特别慢，正在找合适的浏览器跟驱动</li></p>\n<p><li>IE下，搜索元素定位不到，所以……</li><br>&lt;/ol</p>\n<img src=\"/2019/05/10/简单的自动求职脚本(追回)/640.gif\" title=\"小可爱\">\n"},{"title":"追剧代码(追回)","date":"2019-05-10T13:59:42.000Z","_content":"\n <p>虽然是老阿姨了，老夫的少女心不死，正好复习web自动化测试，整两行代码开正追的剧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">driver=webdriver.Edge()</span><br><span class=\"line\"># 打开爱奇艺</span><br><span class=\"line\">driver.get(&quot;https://www.iqiyi.com&quot;)</span><br><span class=\"line\">time.sleep(5)</span><br><span class=\"line\"># 向下滚动</span><br><span class=\"line\">js=&quot;window.scrollTo(0,800)&quot;</span><br><span class=\"line\">driver.execute_script(js)</span><br><span class=\"line\">time.sleep(3)</span><br><span class=\"line\"># 点击定位</span><br><span class=\"line\">driver.find_element_by_partial_link_text(&quot;夜空中最闪亮的星第&quot;).click()</span><br></pre></td></tr></table></figure>\n<p>小知识点关于断言assertRaises()的使用，直接借鉴别人的，很详细</p>\n<p><a href=\"https://www.jianshu.com/p/dae30fd493b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/dae30fd493b0</a></p>\n{% asset_img goodluck.jpg 向国宝求好运 %}\n\n","source":"_posts/追剧代码-追回.md","raw":"---\ntitle: 追剧代码(追回)\ndate: 2019-05-10 21:59:42\ntags:\n---\n\n <p>虽然是老阿姨了，老夫的少女心不死，正好复习web自动化测试，整两行代码开正追的剧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">driver=webdriver.Edge()</span><br><span class=\"line\"># 打开爱奇艺</span><br><span class=\"line\">driver.get(&quot;https://www.iqiyi.com&quot;)</span><br><span class=\"line\">time.sleep(5)</span><br><span class=\"line\"># 向下滚动</span><br><span class=\"line\">js=&quot;window.scrollTo(0,800)&quot;</span><br><span class=\"line\">driver.execute_script(js)</span><br><span class=\"line\">time.sleep(3)</span><br><span class=\"line\"># 点击定位</span><br><span class=\"line\">driver.find_element_by_partial_link_text(&quot;夜空中最闪亮的星第&quot;).click()</span><br></pre></td></tr></table></figure>\n<p>小知识点关于断言assertRaises()的使用，直接借鉴别人的，很详细</p>\n<p><a href=\"https://www.jianshu.com/p/dae30fd493b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/dae30fd493b0</a></p>\n{% asset_img goodluck.jpg 向国宝求好运 %}\n\n","slug":"追剧代码-追回","published":1,"updated":"2019-05-10T14:01:36.042Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7szy6n9000p5cwpw1zdx6jl","content":"<p> </p><p>虽然是老阿姨了，老夫的少女心不死，正好复习web自动化测试，整两行代码开正追的剧。</p><p></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">driver=webdriver.Edge()</span><br><span class=\"line\"># 打开爱奇艺</span><br><span class=\"line\">driver.get(&quot;<a href=\"https://www.iqiyi.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.iqiyi.com&quot;</a>)</span><br><span class=\"line\">time.sleep(5)</span><br><span class=\"line\"># 向下滚动</span><br><span class=\"line\">js=&quot;window.scrollTo(0,800)&quot;</span><br><span class=\"line\">driver.execute_script(js)</span><br><span class=\"line\">time.sleep(3)</span><br><span class=\"line\"># 点击定位</span><br><span class=\"line\">driver.find_element_by_partial_link_text(&quot;夜空中最闪亮的星第&quot;).click()</span><br></pre></td></tr></table></figure></p>\n<p></p><p>小知识点关于断言assertRaises()的使用，直接借鉴别人的，很详细</p><p></p>\n<p></p><p><a href=\"https://www.jianshu.com/p/dae30fd493b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/dae30fd493b0</a></p><br><img src=\"/2019/05/10/追剧代码-追回/goodluck.jpg\" title=\"向国宝求好运\"><p></p>\n","site":{"data":{}},"excerpt":"","more":"<p> </p><p>虽然是老阿姨了，老夫的少女心不死，正好复习web自动化测试，整两行代码开正追的剧。</p><p></p>\n<p><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import time</span><br><span class=\"line\"></span><br><span class=\"line\">from selenium import webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">driver=webdriver.Edge()</span><br><span class=\"line\"># 打开爱奇艺</span><br><span class=\"line\">driver.get(&quot;<a href=\"https://www.iqiyi.com&quot;\" target=\"_blank\" rel=\"noopener\">https://www.iqiyi.com&quot;</a>)</span><br><span class=\"line\">time.sleep(5)</span><br><span class=\"line\"># 向下滚动</span><br><span class=\"line\">js=&quot;window.scrollTo(0,800)&quot;</span><br><span class=\"line\">driver.execute_script(js)</span><br><span class=\"line\">time.sleep(3)</span><br><span class=\"line\"># 点击定位</span><br><span class=\"line\">driver.find_element_by_partial_link_text(&quot;夜空中最闪亮的星第&quot;).click()</span><br></pre></td></tr></table></figure></p>\n<p></p><p>小知识点关于断言assertRaises()的使用，直接借鉴别人的，很详细</p><p></p>\n<p></p><p><a href=\"https://www.jianshu.com/p/dae30fd493b0\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/dae30fd493b0</a></p><br><img src=\"/2019/05/10/追剧代码-追回/goodluck.jpg\" title=\"向国宝求好运\"><p></p>\n"}],"PostAsset":[{"_id":"source/_posts/firefox多版本安装-回溯/smile2.png","slug":"smile2.png","post":"ck7szy6lv00035cwpxeovcidr","modified":1,"renderable":0},{"_id":"source/_posts/importance-of-backup/录像2.mp4","slug":"录像2.mp4","post":"ck7szy6ly00055cwp5unxheoo","modified":1,"renderable":0},{"_id":"source/_posts/unittest知识小结-回溯/image.jpg","post":"ck7szy6m8000c5cwpnnk6c5ih","slug":"image.jpg","modified":1,"renderable":1},{"_id":"source/_posts/全职高手-坚持/insist.mp4","slug":"insist.mp4","post":"ck7szy6mb000e5cwph9b4m3ps","modified":1,"renderable":0},{"_id":"source/_posts/edge驱动问题/panda.mp4","slug":"panda.mp4","post":"ck7szy6ln00015cwp8wswddz6","modified":1,"renderable":0},{"_id":"source/_posts/Jmeter分布式执行机命令行启动报错处理/error.png","post":"ck7szy6lb00005cwp0blqim82","slug":"error.png","modified":1,"renderable":1},{"_id":"source/_posts/Jmeter分布式执行机命令行启动报错处理/lovebaby.mp4","slug":"lovebaby.mp4","post":"ck7szy6lb00005cwp0blqim82","modified":1,"renderable":0},{"_id":"source/_posts/loadrunner碰壁/panda5.mp4","slug":"panda5.mp4","post":"ck7szy6m000075cwplxs9arsl","modified":1,"renderable":0},{"_id":"source/_posts/loadrunner碰壁/panda6.mp4","slug":"panda6.mp4","post":"ck7szy6m000075cwplxs9arsl","modified":1,"renderable":0},{"_id":"source/_posts/关于selenium-IDE-回溯/存储器类型命令.png","post":"ck7szy6mc000f5cwpyusb83wb","slug":"存储器类型命令.png","modified":1,"renderable":1},{"_id":"source/_posts/关于selenium-IDE-回溯/存储器类型命令结果.png","post":"ck7szy6mc000f5cwpyusb83wb","slug":"存储器类型命令结果.png","modified":1,"renderable":1},{"_id":"source/_posts/性能测试指标/baby.mp4","slug":"baby.mp4","post":"ck7szy6me000g5cwpn785zv8g","modified":1,"renderable":0},{"_id":"source/_posts/性能测试指标/fly.mp4","slug":"fly.mp4","post":"ck7szy6me000g5cwpn785zv8g","modified":1,"renderable":0},{"_id":"source/_posts/断言的常用方法-追回/assert_常用.png","post":"ck7szy6me000h5cwp2fx60abj","slug":"assert_常用.png","modified":1,"renderable":1},{"_id":"source/_posts/断言的常用方法-追回/assert_常用2.png","post":"ck7szy6me000h5cwp2fx60abj","slug":"assert_常用2.png","modified":1,"renderable":1},{"_id":"source/_posts/断言的常用方法-追回/assert_常用3.png","post":"ck7szy6me000h5cwp2fx60abj","slug":"assert_常用3.png","modified":1,"renderable":1},{"_id":"source/_posts/断言的常用方法-追回/assert_废弃名.png","post":"ck7szy6me000h5cwp2fx60abj","slug":"assert_废弃名.png","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/add.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"add.jpg","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/add2.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"add2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/chart.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"chart.jpg","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/error.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"error.jpg","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/ex.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"ex.jpg","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/old.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"old.jpg","modified":1,"renderable":1},{"_id":"source/_posts/jmeter第三方图像监视器插件无响应/option.jpg","post":"ck7szy6lz00065cwps1lclm16","slug":"option.jpg","modified":1,"renderable":1},{"_id":"source/_posts/最重要的-回溯/Screenshot_20180315-182005.png","slug":"Screenshot_20180315-182005.png","post":"ck7szy6mz000i5cwph55on9wr","modified":1,"renderable":0},{"_id":"source/_posts/测试理论2-回溯/IMG_20180315_230714.png","slug":"IMG_20180315_230714.png","post":"ck7szy6n3000l5cwpqposvq8z","modified":1,"renderable":0},{"_id":"source/_posts/着急下班的熊宝-追回/Video_2019-04-28.mp4","slug":"Video_2019-04-28.mp4","post":"ck7szy6n5000n5cwpi0mexg4l","modified":1,"renderable":0},{"_id":"source/_posts/简单的自动求职脚本(追回)/640.gif","slug":"640.gif","post":"ck7szy6n8000o5cwpytzktu2l","modified":1,"renderable":0},{"_id":"source/_posts/追剧代码-追回/goodluck.jpg","post":"ck7szy6n9000p5cwpw1zdx6jl","slug":"goodluck.jpg","modified":1,"renderable":1},{"_id":"source/_posts/测试理论-回溯/Screenshot_20180315-181148.png","slug":"Screenshot_20180315-181148.png","post":"ck7szy6n2000k5cwp6c0o5noe","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}